/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { MiddayError } from "./middayerror.js";

/**
 * Internal server error.
 */
export type CreateInvoiceInternalServerErrorData = {
  /**
   * Error message
   */
  message: string;
};

/**
 * Internal server error.
 */
export class CreateInvoiceInternalServerError extends MiddayError {
  /** The original data that was passed to this error instance. */
  data$: CreateInvoiceInternalServerErrorData;

  constructor(
    err: CreateInvoiceInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "CreateInvoiceInternalServerError";
  }
}

/**
 * Conflict. Invoice number already exists.
 */
export type ConflictErrorData = {
  /**
   * Error message about the conflict
   */
  message: string;
};

/**
 * Conflict. Invoice number already exists.
 */
export class ConflictError extends MiddayError {
  /** The original data that was passed to this error instance. */
  data$: ConflictErrorData;

  constructor(
    err: ConflictErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "ConflictError";
  }
}

/**
 * Customer not found.
 */
export type CreateInvoiceNotFoundErrorData = {
  /**
   * Error message
   */
  message: string;
};

/**
 * Customer not found.
 */
export class CreateInvoiceNotFoundError extends MiddayError {
  /** The original data that was passed to this error instance. */
  data$: CreateInvoiceNotFoundErrorData;

  constructor(
    err: CreateInvoiceNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "CreateInvoiceNotFoundError";
  }
}

/**
 * Bad request. Invalid input data or validation errors.
 */
export type CreateInvoiceBadRequestErrorData = {
  /**
   * Error message describing the validation failure
   */
  message: string;
};

/**
 * Bad request. Invalid input data or validation errors.
 */
export class CreateInvoiceBadRequestError extends MiddayError {
  /** The original data that was passed to this error instance. */
  data$: CreateInvoiceBadRequestErrorData;

  constructor(
    err: CreateInvoiceBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "CreateInvoiceBadRequestError";
  }
}

/** @internal */
export const CreateInvoiceInternalServerError$inboundSchema: z.ZodType<
  CreateInvoiceInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new CreateInvoiceInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type CreateInvoiceInternalServerError$Outbound = {
  message: string;
};

/** @internal */
export const CreateInvoiceInternalServerError$outboundSchema: z.ZodType<
  CreateInvoiceInternalServerError$Outbound,
  z.ZodTypeDef,
  CreateInvoiceInternalServerError
> = z.instanceof(CreateInvoiceInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInvoiceInternalServerError$ {
  /** @deprecated use `CreateInvoiceInternalServerError$inboundSchema` instead. */
  export const inboundSchema = CreateInvoiceInternalServerError$inboundSchema;
  /** @deprecated use `CreateInvoiceInternalServerError$outboundSchema` instead. */
  export const outboundSchema = CreateInvoiceInternalServerError$outboundSchema;
  /** @deprecated use `CreateInvoiceInternalServerError$Outbound` instead. */
  export type Outbound = CreateInvoiceInternalServerError$Outbound;
}

/** @internal */
export const ConflictError$inboundSchema: z.ZodType<
  ConflictError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ConflictError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ConflictError$Outbound = {
  message: string;
};

/** @internal */
export const ConflictError$outboundSchema: z.ZodType<
  ConflictError$Outbound,
  z.ZodTypeDef,
  ConflictError
> = z.instanceof(ConflictError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConflictError$ {
  /** @deprecated use `ConflictError$inboundSchema` instead. */
  export const inboundSchema = ConflictError$inboundSchema;
  /** @deprecated use `ConflictError$outboundSchema` instead. */
  export const outboundSchema = ConflictError$outboundSchema;
  /** @deprecated use `ConflictError$Outbound` instead. */
  export type Outbound = ConflictError$Outbound;
}

/** @internal */
export const CreateInvoiceNotFoundError$inboundSchema: z.ZodType<
  CreateInvoiceNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new CreateInvoiceNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type CreateInvoiceNotFoundError$Outbound = {
  message: string;
};

/** @internal */
export const CreateInvoiceNotFoundError$outboundSchema: z.ZodType<
  CreateInvoiceNotFoundError$Outbound,
  z.ZodTypeDef,
  CreateInvoiceNotFoundError
> = z.instanceof(CreateInvoiceNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInvoiceNotFoundError$ {
  /** @deprecated use `CreateInvoiceNotFoundError$inboundSchema` instead. */
  export const inboundSchema = CreateInvoiceNotFoundError$inboundSchema;
  /** @deprecated use `CreateInvoiceNotFoundError$outboundSchema` instead. */
  export const outboundSchema = CreateInvoiceNotFoundError$outboundSchema;
  /** @deprecated use `CreateInvoiceNotFoundError$Outbound` instead. */
  export type Outbound = CreateInvoiceNotFoundError$Outbound;
}

/** @internal */
export const CreateInvoiceBadRequestError$inboundSchema: z.ZodType<
  CreateInvoiceBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new CreateInvoiceBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type CreateInvoiceBadRequestError$Outbound = {
  message: string;
};

/** @internal */
export const CreateInvoiceBadRequestError$outboundSchema: z.ZodType<
  CreateInvoiceBadRequestError$Outbound,
  z.ZodTypeDef,
  CreateInvoiceBadRequestError
> = z.instanceof(CreateInvoiceBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInvoiceBadRequestError$ {
  /** @deprecated use `CreateInvoiceBadRequestError$inboundSchema` instead. */
  export const inboundSchema = CreateInvoiceBadRequestError$inboundSchema;
  /** @deprecated use `CreateInvoiceBadRequestError$outboundSchema` instead. */
  export const outboundSchema = CreateInvoiceBadRequestError$outboundSchema;
  /** @deprecated use `CreateInvoiceBadRequestError$Outbound` instead. */
  export type Outbound = CreateInvoiceBadRequestError$Outbound;
}
