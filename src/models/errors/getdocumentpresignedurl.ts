/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { MiddayError } from "./middayerror.js";

/**
 * Internal server error - Failed to generate pre-signed URL
 */
export type GetDocumentPreSignedUrlInternalServerErrorData = {
  error: string;
};

/**
 * Internal server error - Failed to generate pre-signed URL
 */
export class GetDocumentPreSignedUrlInternalServerError extends MiddayError {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: GetDocumentPreSignedUrlInternalServerErrorData;

  constructor(
    err: GetDocumentPreSignedUrlInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "GetDocumentPreSignedUrlInternalServerError";
  }
}

/**
 * Document not found
 */
export type GetDocumentPreSignedUrlNotFoundErrorData = {
  error: string;
};

/**
 * Document not found
 */
export class GetDocumentPreSignedUrlNotFoundError extends MiddayError {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: GetDocumentPreSignedUrlNotFoundErrorData;

  constructor(
    err: GetDocumentPreSignedUrlNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "GetDocumentPreSignedUrlNotFoundError";
  }
}

/**
 * Bad request - Document file path not available
 */
export type GetDocumentPreSignedUrlBadRequestErrorData = {
  error: string;
};

/**
 * Bad request - Document file path not available
 */
export class GetDocumentPreSignedUrlBadRequestError extends MiddayError {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: GetDocumentPreSignedUrlBadRequestErrorData;

  constructor(
    err: GetDocumentPreSignedUrlBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "GetDocumentPreSignedUrlBadRequestError";
  }
}

/** @internal */
export const GetDocumentPreSignedUrlInternalServerError$inboundSchema:
  z.ZodType<GetDocumentPreSignedUrlInternalServerError, z.ZodTypeDef, unknown> =
    z.object({
      error: z.string(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new GetDocumentPreSignedUrlInternalServerError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type GetDocumentPreSignedUrlInternalServerError$Outbound = {
  error: string;
};

/** @internal */
export const GetDocumentPreSignedUrlInternalServerError$outboundSchema:
  z.ZodType<
    GetDocumentPreSignedUrlInternalServerError$Outbound,
    z.ZodTypeDef,
    GetDocumentPreSignedUrlInternalServerError
  > = z.instanceof(GetDocumentPreSignedUrlInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDocumentPreSignedUrlInternalServerError$ {
  /** @deprecated use `GetDocumentPreSignedUrlInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    GetDocumentPreSignedUrlInternalServerError$inboundSchema;
  /** @deprecated use `GetDocumentPreSignedUrlInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    GetDocumentPreSignedUrlInternalServerError$outboundSchema;
  /** @deprecated use `GetDocumentPreSignedUrlInternalServerError$Outbound` instead. */
  export type Outbound = GetDocumentPreSignedUrlInternalServerError$Outbound;
}

/** @internal */
export const GetDocumentPreSignedUrlNotFoundError$inboundSchema: z.ZodType<
  GetDocumentPreSignedUrlNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new GetDocumentPreSignedUrlNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GetDocumentPreSignedUrlNotFoundError$Outbound = {
  error: string;
};

/** @internal */
export const GetDocumentPreSignedUrlNotFoundError$outboundSchema: z.ZodType<
  GetDocumentPreSignedUrlNotFoundError$Outbound,
  z.ZodTypeDef,
  GetDocumentPreSignedUrlNotFoundError
> = z.instanceof(GetDocumentPreSignedUrlNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDocumentPreSignedUrlNotFoundError$ {
  /** @deprecated use `GetDocumentPreSignedUrlNotFoundError$inboundSchema` instead. */
  export const inboundSchema =
    GetDocumentPreSignedUrlNotFoundError$inboundSchema;
  /** @deprecated use `GetDocumentPreSignedUrlNotFoundError$outboundSchema` instead. */
  export const outboundSchema =
    GetDocumentPreSignedUrlNotFoundError$outboundSchema;
  /** @deprecated use `GetDocumentPreSignedUrlNotFoundError$Outbound` instead. */
  export type Outbound = GetDocumentPreSignedUrlNotFoundError$Outbound;
}

/** @internal */
export const GetDocumentPreSignedUrlBadRequestError$inboundSchema: z.ZodType<
  GetDocumentPreSignedUrlBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new GetDocumentPreSignedUrlBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GetDocumentPreSignedUrlBadRequestError$Outbound = {
  error: string;
};

/** @internal */
export const GetDocumentPreSignedUrlBadRequestError$outboundSchema: z.ZodType<
  GetDocumentPreSignedUrlBadRequestError$Outbound,
  z.ZodTypeDef,
  GetDocumentPreSignedUrlBadRequestError
> = z.instanceof(GetDocumentPreSignedUrlBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDocumentPreSignedUrlBadRequestError$ {
  /** @deprecated use `GetDocumentPreSignedUrlBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    GetDocumentPreSignedUrlBadRequestError$inboundSchema;
  /** @deprecated use `GetDocumentPreSignedUrlBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    GetDocumentPreSignedUrlBadRequestError$outboundSchema;
  /** @deprecated use `GetDocumentPreSignedUrlBadRequestError$Outbound` instead. */
  export type Outbound = GetDocumentPreSignedUrlBadRequestError$Outbound;
}
