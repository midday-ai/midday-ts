/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { MiddayError } from "./middayerror.js";

/**
 * Internal server error - Failed to generate pre-signed URL
 */
export type GetInboxPreSignedUrlInternalServerErrorData = {
  error: string;
};

/**
 * Internal server error - Failed to generate pre-signed URL
 */
export class GetInboxPreSignedUrlInternalServerError extends MiddayError {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: GetInboxPreSignedUrlInternalServerErrorData;

  constructor(
    err: GetInboxPreSignedUrlInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "GetInboxPreSignedUrlInternalServerError";
  }
}

/**
 * Inbox item not found
 */
export type GetInboxPreSignedUrlNotFoundErrorData = {
  error: string;
};

/**
 * Inbox item not found
 */
export class GetInboxPreSignedUrlNotFoundError extends MiddayError {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: GetInboxPreSignedUrlNotFoundErrorData;

  constructor(
    err: GetInboxPreSignedUrlNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "GetInboxPreSignedUrlNotFoundError";
  }
}

/**
 * Bad request - Attachment file path not available
 */
export type GetInboxPreSignedUrlBadRequestErrorData = {
  error: string;
};

/**
 * Bad request - Attachment file path not available
 */
export class GetInboxPreSignedUrlBadRequestError extends MiddayError {
  error: string;

  /** The original data that was passed to this error instance. */
  data$: GetInboxPreSignedUrlBadRequestErrorData;

  constructor(
    err: GetInboxPreSignedUrlBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "GetInboxPreSignedUrlBadRequestError";
  }
}

/** @internal */
export const GetInboxPreSignedUrlInternalServerError$inboundSchema: z.ZodType<
  GetInboxPreSignedUrlInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new GetInboxPreSignedUrlInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GetInboxPreSignedUrlInternalServerError$Outbound = {
  error: string;
};

/** @internal */
export const GetInboxPreSignedUrlInternalServerError$outboundSchema: z.ZodType<
  GetInboxPreSignedUrlInternalServerError$Outbound,
  z.ZodTypeDef,
  GetInboxPreSignedUrlInternalServerError
> = z.instanceof(GetInboxPreSignedUrlInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInboxPreSignedUrlInternalServerError$ {
  /** @deprecated use `GetInboxPreSignedUrlInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    GetInboxPreSignedUrlInternalServerError$inboundSchema;
  /** @deprecated use `GetInboxPreSignedUrlInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    GetInboxPreSignedUrlInternalServerError$outboundSchema;
  /** @deprecated use `GetInboxPreSignedUrlInternalServerError$Outbound` instead. */
  export type Outbound = GetInboxPreSignedUrlInternalServerError$Outbound;
}

/** @internal */
export const GetInboxPreSignedUrlNotFoundError$inboundSchema: z.ZodType<
  GetInboxPreSignedUrlNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new GetInboxPreSignedUrlNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GetInboxPreSignedUrlNotFoundError$Outbound = {
  error: string;
};

/** @internal */
export const GetInboxPreSignedUrlNotFoundError$outboundSchema: z.ZodType<
  GetInboxPreSignedUrlNotFoundError$Outbound,
  z.ZodTypeDef,
  GetInboxPreSignedUrlNotFoundError
> = z.instanceof(GetInboxPreSignedUrlNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInboxPreSignedUrlNotFoundError$ {
  /** @deprecated use `GetInboxPreSignedUrlNotFoundError$inboundSchema` instead. */
  export const inboundSchema = GetInboxPreSignedUrlNotFoundError$inboundSchema;
  /** @deprecated use `GetInboxPreSignedUrlNotFoundError$outboundSchema` instead. */
  export const outboundSchema =
    GetInboxPreSignedUrlNotFoundError$outboundSchema;
  /** @deprecated use `GetInboxPreSignedUrlNotFoundError$Outbound` instead. */
  export type Outbound = GetInboxPreSignedUrlNotFoundError$Outbound;
}

/** @internal */
export const GetInboxPreSignedUrlBadRequestError$inboundSchema: z.ZodType<
  GetInboxPreSignedUrlBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new GetInboxPreSignedUrlBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GetInboxPreSignedUrlBadRequestError$Outbound = {
  error: string;
};

/** @internal */
export const GetInboxPreSignedUrlBadRequestError$outboundSchema: z.ZodType<
  GetInboxPreSignedUrlBadRequestError$Outbound,
  z.ZodTypeDef,
  GetInboxPreSignedUrlBadRequestError
> = z.instanceof(GetInboxPreSignedUrlBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInboxPreSignedUrlBadRequestError$ {
  /** @deprecated use `GetInboxPreSignedUrlBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    GetInboxPreSignedUrlBadRequestError$inboundSchema;
  /** @deprecated use `GetInboxPreSignedUrlBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    GetInboxPreSignedUrlBadRequestError$outboundSchema;
  /** @deprecated use `GetInboxPreSignedUrlBadRequestError$Outbound` instead. */
  export type Outbound = GetInboxPreSignedUrlBadRequestError$Outbound;
}
