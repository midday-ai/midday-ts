/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { MiddayError } from "./middayerror.js";

/**
 * Internal server error - Failed to generate pre-signed URL
 */
export type GetTransactionAttachmentPreSignedUrlInternalServerErrorData = {
  error: string;
};

/**
 * Internal server error - Failed to generate pre-signed URL
 */
export class GetTransactionAttachmentPreSignedUrlInternalServerError
  extends MiddayError
{
  error: string;

  /** The original data that was passed to this error instance. */
  data$: GetTransactionAttachmentPreSignedUrlInternalServerErrorData;

  constructor(
    err: GetTransactionAttachmentPreSignedUrlInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "GetTransactionAttachmentPreSignedUrlInternalServerError";
  }
}

/**
 * Transaction or attachment not found
 */
export type GetTransactionAttachmentPreSignedUrlNotFoundErrorData = {
  error: string;
};

/**
 * Transaction or attachment not found
 */
export class GetTransactionAttachmentPreSignedUrlNotFoundError
  extends MiddayError
{
  error: string;

  /** The original data that was passed to this error instance. */
  data$: GetTransactionAttachmentPreSignedUrlNotFoundErrorData;

  constructor(
    err: GetTransactionAttachmentPreSignedUrlNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "GetTransactionAttachmentPreSignedUrlNotFoundError";
  }
}

/**
 * Bad request - Attachment file path not available
 */
export type GetTransactionAttachmentPreSignedUrlBadRequestErrorData = {
  error: string;
};

/**
 * Bad request - Attachment file path not available
 */
export class GetTransactionAttachmentPreSignedUrlBadRequestError
  extends MiddayError
{
  error: string;

  /** The original data that was passed to this error instance. */
  data$: GetTransactionAttachmentPreSignedUrlBadRequestErrorData;

  constructor(
    err: GetTransactionAttachmentPreSignedUrlBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;

    this.name = "GetTransactionAttachmentPreSignedUrlBadRequestError";
  }
}

/** @internal */
export const GetTransactionAttachmentPreSignedUrlInternalServerError$inboundSchema:
  z.ZodType<
    GetTransactionAttachmentPreSignedUrlInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new GetTransactionAttachmentPreSignedUrlInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type GetTransactionAttachmentPreSignedUrlInternalServerError$Outbound = {
  error: string;
};

/** @internal */
export const GetTransactionAttachmentPreSignedUrlInternalServerError$outboundSchema:
  z.ZodType<
    GetTransactionAttachmentPreSignedUrlInternalServerError$Outbound,
    z.ZodTypeDef,
    GetTransactionAttachmentPreSignedUrlInternalServerError
  > = z.instanceof(GetTransactionAttachmentPreSignedUrlInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionAttachmentPreSignedUrlInternalServerError$ {
  /** @deprecated use `GetTransactionAttachmentPreSignedUrlInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionAttachmentPreSignedUrlInternalServerError$inboundSchema;
  /** @deprecated use `GetTransactionAttachmentPreSignedUrlInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionAttachmentPreSignedUrlInternalServerError$outboundSchema;
  /** @deprecated use `GetTransactionAttachmentPreSignedUrlInternalServerError$Outbound` instead. */
  export type Outbound =
    GetTransactionAttachmentPreSignedUrlInternalServerError$Outbound;
}

/** @internal */
export const GetTransactionAttachmentPreSignedUrlNotFoundError$inboundSchema:
  z.ZodType<
    GetTransactionAttachmentPreSignedUrlNotFoundError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new GetTransactionAttachmentPreSignedUrlNotFoundError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type GetTransactionAttachmentPreSignedUrlNotFoundError$Outbound = {
  error: string;
};

/** @internal */
export const GetTransactionAttachmentPreSignedUrlNotFoundError$outboundSchema:
  z.ZodType<
    GetTransactionAttachmentPreSignedUrlNotFoundError$Outbound,
    z.ZodTypeDef,
    GetTransactionAttachmentPreSignedUrlNotFoundError
  > = z.instanceof(GetTransactionAttachmentPreSignedUrlNotFoundError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionAttachmentPreSignedUrlNotFoundError$ {
  /** @deprecated use `GetTransactionAttachmentPreSignedUrlNotFoundError$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionAttachmentPreSignedUrlNotFoundError$inboundSchema;
  /** @deprecated use `GetTransactionAttachmentPreSignedUrlNotFoundError$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionAttachmentPreSignedUrlNotFoundError$outboundSchema;
  /** @deprecated use `GetTransactionAttachmentPreSignedUrlNotFoundError$Outbound` instead. */
  export type Outbound =
    GetTransactionAttachmentPreSignedUrlNotFoundError$Outbound;
}

/** @internal */
export const GetTransactionAttachmentPreSignedUrlBadRequestError$inboundSchema:
  z.ZodType<
    GetTransactionAttachmentPreSignedUrlBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.string(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new GetTransactionAttachmentPreSignedUrlBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type GetTransactionAttachmentPreSignedUrlBadRequestError$Outbound = {
  error: string;
};

/** @internal */
export const GetTransactionAttachmentPreSignedUrlBadRequestError$outboundSchema:
  z.ZodType<
    GetTransactionAttachmentPreSignedUrlBadRequestError$Outbound,
    z.ZodTypeDef,
    GetTransactionAttachmentPreSignedUrlBadRequestError
  > = z.instanceof(GetTransactionAttachmentPreSignedUrlBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionAttachmentPreSignedUrlBadRequestError$ {
  /** @deprecated use `GetTransactionAttachmentPreSignedUrlBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionAttachmentPreSignedUrlBadRequestError$inboundSchema;
  /** @deprecated use `GetTransactionAttachmentPreSignedUrlBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionAttachmentPreSignedUrlBadRequestError$outboundSchema;
  /** @deprecated use `GetTransactionAttachmentPreSignedUrlBadRequestError$Outbound` instead. */
  export type Outbound =
    GetTransactionAttachmentPreSignedUrlBadRequestError$Outbound;
}
