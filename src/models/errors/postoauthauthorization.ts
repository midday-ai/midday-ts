/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { MiddayError } from "./middayerror.js";

/**
 * Unauthorized
 */
export type UnauthorizedErrorData = {
  redirectUrl: string;
};

/**
 * Unauthorized
 */
export class UnauthorizedError extends MiddayError {
  redirectUrl: string;

  /** The original data that was passed to this error instance. */
  data$: UnauthorizedErrorData;

  constructor(
    err: UnauthorizedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.redirectUrl = err.redirectUrl;

    this.name = "UnauthorizedError";
  }
}

/**
 * Invalid request
 */
export type PostOAuthAuthorizationBadRequestErrorData = {
  redirectUrl: string;
};

/**
 * Invalid request
 */
export class PostOAuthAuthorizationBadRequestError extends MiddayError {
  redirectUrl: string;

  /** The original data that was passed to this error instance. */
  data$: PostOAuthAuthorizationBadRequestErrorData;

  constructor(
    err: PostOAuthAuthorizationBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.redirectUrl = err.redirectUrl;

    this.name = "PostOAuthAuthorizationBadRequestError";
  }
}

/** @internal */
export const UnauthorizedError$inboundSchema: z.ZodType<
  UnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  redirect_url: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "redirect_url": "redirectUrl",
    });

    return new UnauthorizedError(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type UnauthorizedError$Outbound = {
  redirect_url: string;
};

/** @internal */
export const UnauthorizedError$outboundSchema: z.ZodType<
  UnauthorizedError$Outbound,
  z.ZodTypeDef,
  UnauthorizedError
> = z.instanceof(UnauthorizedError)
  .transform(v => v.data$)
  .pipe(
    z.object({
      redirectUrl: z.string(),
    }).transform((v) => {
      return remap$(v, {
        redirectUrl: "redirect_url",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedError$ {
  /** @deprecated use `UnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = UnauthorizedError$inboundSchema;
  /** @deprecated use `UnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = UnauthorizedError$outboundSchema;
  /** @deprecated use `UnauthorizedError$Outbound` instead. */
  export type Outbound = UnauthorizedError$Outbound;
}

/** @internal */
export const PostOAuthAuthorizationBadRequestError$inboundSchema: z.ZodType<
  PostOAuthAuthorizationBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  redirect_url: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "redirect_url": "redirectUrl",
    });

    return new PostOAuthAuthorizationBadRequestError(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type PostOAuthAuthorizationBadRequestError$Outbound = {
  redirect_url: string;
};

/** @internal */
export const PostOAuthAuthorizationBadRequestError$outboundSchema: z.ZodType<
  PostOAuthAuthorizationBadRequestError$Outbound,
  z.ZodTypeDef,
  PostOAuthAuthorizationBadRequestError
> = z.instanceof(PostOAuthAuthorizationBadRequestError)
  .transform(v => v.data$)
  .pipe(
    z.object({
      redirectUrl: z.string(),
    }).transform((v) => {
      return remap$(v, {
        redirectUrl: "redirect_url",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOAuthAuthorizationBadRequestError$ {
  /** @deprecated use `PostOAuthAuthorizationBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    PostOAuthAuthorizationBadRequestError$inboundSchema;
  /** @deprecated use `PostOAuthAuthorizationBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    PostOAuthAuthorizationBadRequestError$outboundSchema;
  /** @deprecated use `PostOAuthAuthorizationBadRequestError$Outbound` instead. */
  export type Outbound = PostOAuthAuthorizationBadRequestError$Outbound;
}
