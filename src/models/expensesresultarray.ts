/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ExpensesResultArray = {
  /**
   * Date for the expense value
   */
  date: string;
  /**
   * Expense value for the given date
   */
  value: number;
  /**
   * Currency code (ISO 4217)
   */
  currency: string;
  /**
   * Recurring expense value for the given date
   */
  recurring: number;
  /**
   * Total expense for the given date
   */
  total: number;
};

/** @internal */
export const ExpensesResultArray$inboundSchema: z.ZodType<
  ExpensesResultArray,
  z.ZodTypeDef,
  unknown
> = z.object({
  date: z.string(),
  value: z.number(),
  currency: z.string(),
  recurring: z.number(),
  total: z.number(),
});

/** @internal */
export type ExpensesResultArray$Outbound = {
  date: string;
  value: number;
  currency: string;
  recurring: number;
  total: number;
};

/** @internal */
export const ExpensesResultArray$outboundSchema: z.ZodType<
  ExpensesResultArray$Outbound,
  z.ZodTypeDef,
  ExpensesResultArray
> = z.object({
  date: z.string(),
  value: z.number(),
  currency: z.string(),
  recurring: z.number(),
  total: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpensesResultArray$ {
  /** @deprecated use `ExpensesResultArray$inboundSchema` instead. */
  export const inboundSchema = ExpensesResultArray$inboundSchema;
  /** @deprecated use `ExpensesResultArray$outboundSchema` instead. */
  export const outboundSchema = ExpensesResultArray$outboundSchema;
  /** @deprecated use `ExpensesResultArray$Outbound` instead. */
  export type Outbound = ExpensesResultArray$Outbound;
}

export function expensesResultArrayToJSON(
  expensesResultArray: ExpensesResultArray,
): string {
  return JSON.stringify(
    ExpensesResultArray$outboundSchema.parse(expensesResultArray),
  );
}

export function expensesResultArrayFromJSON(
  jsonString: string,
): SafeParseResult<ExpensesResultArray, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExpensesResultArray$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExpensesResultArray' from JSON`,
  );
}
