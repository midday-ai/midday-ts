/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  NotificationSchema,
  NotificationSchema$inboundSchema,
  NotificationSchema$Outbound,
  NotificationSchema$outboundSchema,
} from "./notificationschema.js";

export type NotificationResponseSchema = {
  data: NotificationSchema;
};

/** @internal */
export const NotificationResponseSchema$inboundSchema: z.ZodType<
  NotificationResponseSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: NotificationSchema$inboundSchema,
});

/** @internal */
export type NotificationResponseSchema$Outbound = {
  data: NotificationSchema$Outbound;
};

/** @internal */
export const NotificationResponseSchema$outboundSchema: z.ZodType<
  NotificationResponseSchema$Outbound,
  z.ZodTypeDef,
  NotificationResponseSchema
> = z.object({
  data: NotificationSchema$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationResponseSchema$ {
  /** @deprecated use `NotificationResponseSchema$inboundSchema` instead. */
  export const inboundSchema = NotificationResponseSchema$inboundSchema;
  /** @deprecated use `NotificationResponseSchema$outboundSchema` instead. */
  export const outboundSchema = NotificationResponseSchema$outboundSchema;
  /** @deprecated use `NotificationResponseSchema$Outbound` instead. */
  export type Outbound = NotificationResponseSchema$Outbound;
}

export function notificationResponseSchemaToJSON(
  notificationResponseSchema: NotificationResponseSchema,
): string {
  return JSON.stringify(
    NotificationResponseSchema$outboundSchema.parse(notificationResponseSchema),
  );
}

export function notificationResponseSchemaFromJSON(
  jsonString: string,
): SafeParseResult<NotificationResponseSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationResponseSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationResponseSchema' from JSON`,
  );
}
