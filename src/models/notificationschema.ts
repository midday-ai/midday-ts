/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Source of the notification
 */
export const Source = {
  System: "system",
  User: "user",
} as const;
/**
 * Source of the notification
 */
export type Source = ClosedEnum<typeof Source>;

/**
 * Current status of the notification
 */
export const NotificationSchemaStatus = {
  Unread: "unread",
  Read: "read",
  Archived: "archived",
} as const;
/**
 * Current status of the notification
 */
export type NotificationSchemaStatus = ClosedEnum<
  typeof NotificationSchemaStatus
>;

export type NotificationSchema = {
  /**
   * Unique identifier of the notification
   */
  id: string;
  /**
   * ISO timestamp when the notification was created
   */
  createdAt: string;
  /**
   * Unique identifier of the team
   */
  teamId: string;
  /**
   * Unique identifier of the user (if applicable)
   */
  userId: string | null;
  /**
   * Type of notification
   */
  type: string;
  /**
   * Priority level of the notification (1-3 = user notifications, 4-10 = insights)
   */
  priority: number;
  /**
   * Source of the notification
   */
  source: Source;
  /**
   * Current status of the notification
   */
  status: NotificationSchemaStatus;
  /**
   * Additional metadata for the notification
   */
  metadata: { [k: string]: any | null };
  /**
   * ISO timestamp when the notification was last used by the system
   */
  lastUsedAt: string | null;
};

/** @internal */
export const Source$inboundSchema: z.ZodNativeEnum<typeof Source> = z
  .nativeEnum(Source);

/** @internal */
export const Source$outboundSchema: z.ZodNativeEnum<typeof Source> =
  Source$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Source$ {
  /** @deprecated use `Source$inboundSchema` instead. */
  export const inboundSchema = Source$inboundSchema;
  /** @deprecated use `Source$outboundSchema` instead. */
  export const outboundSchema = Source$outboundSchema;
}

/** @internal */
export const NotificationSchemaStatus$inboundSchema: z.ZodNativeEnum<
  typeof NotificationSchemaStatus
> = z.nativeEnum(NotificationSchemaStatus);

/** @internal */
export const NotificationSchemaStatus$outboundSchema: z.ZodNativeEnum<
  typeof NotificationSchemaStatus
> = NotificationSchemaStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationSchemaStatus$ {
  /** @deprecated use `NotificationSchemaStatus$inboundSchema` instead. */
  export const inboundSchema = NotificationSchemaStatus$inboundSchema;
  /** @deprecated use `NotificationSchemaStatus$outboundSchema` instead. */
  export const outboundSchema = NotificationSchemaStatus$outboundSchema;
}

/** @internal */
export const NotificationSchema$inboundSchema: z.ZodType<
  NotificationSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  teamId: z.string(),
  userId: z.nullable(z.string()),
  type: z.string(),
  priority: z.number().int(),
  source: Source$inboundSchema,
  status: NotificationSchemaStatus$inboundSchema,
  metadata: z.record(z.nullable(z.any())),
  lastUsedAt: z.nullable(z.string()),
});

/** @internal */
export type NotificationSchema$Outbound = {
  id: string;
  createdAt: string;
  teamId: string;
  userId: string | null;
  type: string;
  priority: number;
  source: string;
  status: string;
  metadata: { [k: string]: any | null };
  lastUsedAt: string | null;
};

/** @internal */
export const NotificationSchema$outboundSchema: z.ZodType<
  NotificationSchema$Outbound,
  z.ZodTypeDef,
  NotificationSchema
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  teamId: z.string(),
  userId: z.nullable(z.string()),
  type: z.string(),
  priority: z.number().int(),
  source: Source$outboundSchema,
  status: NotificationSchemaStatus$outboundSchema,
  metadata: z.record(z.nullable(z.any())),
  lastUsedAt: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationSchema$ {
  /** @deprecated use `NotificationSchema$inboundSchema` instead. */
  export const inboundSchema = NotificationSchema$inboundSchema;
  /** @deprecated use `NotificationSchema$outboundSchema` instead. */
  export const outboundSchema = NotificationSchema$outboundSchema;
  /** @deprecated use `NotificationSchema$Outbound` instead. */
  export type Outbound = NotificationSchema$Outbound;
}

export function notificationSchemaToJSON(
  notificationSchema: NotificationSchema,
): string {
  return JSON.stringify(
    NotificationSchema$outboundSchema.parse(notificationSchema),
  );
}

export function notificationSchemaFromJSON(
  jsonString: string,
): SafeParseResult<NotificationSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationSchema' from JSON`,
  );
}
