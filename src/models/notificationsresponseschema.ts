/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  NotificationSchema,
  NotificationSchema$inboundSchema,
  NotificationSchema$Outbound,
  NotificationSchema$outboundSchema,
} from "./notificationschema.js";

/**
 * Pagination metadata
 */
export type NotificationsResponseSchemaMeta = {
  /**
   * Cursor for pagination (null if no more pages)
   */
  cursor: string | null;
  /**
   * Whether there are previous pages available
   */
  hasPreviousPage: boolean;
  /**
   * Whether there are more pages available
   */
  hasNextPage: boolean;
};

export type NotificationsResponseSchema = {
  /**
   * Array of notifications
   */
  data: Array<NotificationSchema>;
  /**
   * Pagination metadata
   */
  meta: NotificationsResponseSchemaMeta;
};

/** @internal */
export const NotificationsResponseSchemaMeta$inboundSchema: z.ZodType<
  NotificationsResponseSchemaMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()),
  hasPreviousPage: z.boolean(),
  hasNextPage: z.boolean(),
});

/** @internal */
export type NotificationsResponseSchemaMeta$Outbound = {
  cursor: string | null;
  hasPreviousPage: boolean;
  hasNextPage: boolean;
};

/** @internal */
export const NotificationsResponseSchemaMeta$outboundSchema: z.ZodType<
  NotificationsResponseSchemaMeta$Outbound,
  z.ZodTypeDef,
  NotificationsResponseSchemaMeta
> = z.object({
  cursor: z.nullable(z.string()),
  hasPreviousPage: z.boolean(),
  hasNextPage: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationsResponseSchemaMeta$ {
  /** @deprecated use `NotificationsResponseSchemaMeta$inboundSchema` instead. */
  export const inboundSchema = NotificationsResponseSchemaMeta$inboundSchema;
  /** @deprecated use `NotificationsResponseSchemaMeta$outboundSchema` instead. */
  export const outboundSchema = NotificationsResponseSchemaMeta$outboundSchema;
  /** @deprecated use `NotificationsResponseSchemaMeta$Outbound` instead. */
  export type Outbound = NotificationsResponseSchemaMeta$Outbound;
}

export function notificationsResponseSchemaMetaToJSON(
  notificationsResponseSchemaMeta: NotificationsResponseSchemaMeta,
): string {
  return JSON.stringify(
    NotificationsResponseSchemaMeta$outboundSchema.parse(
      notificationsResponseSchemaMeta,
    ),
  );
}

export function notificationsResponseSchemaMetaFromJSON(
  jsonString: string,
): SafeParseResult<NotificationsResponseSchemaMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationsResponseSchemaMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationsResponseSchemaMeta' from JSON`,
  );
}

/** @internal */
export const NotificationsResponseSchema$inboundSchema: z.ZodType<
  NotificationsResponseSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(NotificationSchema$inboundSchema),
  meta: z.lazy(() => NotificationsResponseSchemaMeta$inboundSchema),
});

/** @internal */
export type NotificationsResponseSchema$Outbound = {
  data: Array<NotificationSchema$Outbound>;
  meta: NotificationsResponseSchemaMeta$Outbound;
};

/** @internal */
export const NotificationsResponseSchema$outboundSchema: z.ZodType<
  NotificationsResponseSchema$Outbound,
  z.ZodTypeDef,
  NotificationsResponseSchema
> = z.object({
  data: z.array(NotificationSchema$outboundSchema),
  meta: z.lazy(() => NotificationsResponseSchemaMeta$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotificationsResponseSchema$ {
  /** @deprecated use `NotificationsResponseSchema$inboundSchema` instead. */
  export const inboundSchema = NotificationsResponseSchema$inboundSchema;
  /** @deprecated use `NotificationsResponseSchema$outboundSchema` instead. */
  export const outboundSchema = NotificationsResponseSchema$outboundSchema;
  /** @deprecated use `NotificationsResponseSchema$Outbound` instead. */
  export type Outbound = NotificationsResponseSchema$Outbound;
}

export function notificationsResponseSchemaToJSON(
  notificationsResponseSchema: NotificationsResponseSchema,
): string {
  return JSON.stringify(
    NotificationsResponseSchema$outboundSchema.parse(
      notificationsResponseSchema,
    ),
  );
}

export function notificationsResponseSchemaFromJSON(
  jsonString: string,
): SafeParseResult<NotificationsResponseSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotificationsResponseSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotificationsResponseSchema' from JSON`,
  );
}
