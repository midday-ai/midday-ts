/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Schema for creating a new bank account.
 */
export type CreateBankAccountRequest = {
  /**
   * The name of the bank account.
   */
  name: string;
  /**
   * The currency code for the bank account (ISO 4217).
   */
  currency?: string | undefined;
  /**
   * Whether the bank account is a manual account.
   */
  manual?: boolean | undefined;
};

/**
 * A single bank account object response.
 */
export type CreateBankAccountResponse = {
  /**
   * Unique identifier for the bank account.
   */
  id: string;
  /**
   * Name of the bank account.
   */
  name: string | null;
  /**
   * Currency code of the bank account (e.g., USD, EUR).
   */
  currency: string | null;
  /**
   * Type of the bank account (e.g., depository, credit).
   */
  type: string | null;
  /**
   * Whether the bank account is enabled.
   */
  enabled: boolean;
  /**
   * Current balance of the bank account.
   */
  balance: number | null;
  /**
   * Whether the bank account is a manual account.
   */
  manual: boolean | null;
};

/** @internal */
export const CreateBankAccountRequest$inboundSchema: z.ZodType<
  CreateBankAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  currency: z.string().optional(),
  manual: z.boolean().optional(),
});

/** @internal */
export type CreateBankAccountRequest$Outbound = {
  name: string;
  currency?: string | undefined;
  manual?: boolean | undefined;
};

/** @internal */
export const CreateBankAccountRequest$outboundSchema: z.ZodType<
  CreateBankAccountRequest$Outbound,
  z.ZodTypeDef,
  CreateBankAccountRequest
> = z.object({
  name: z.string(),
  currency: z.string().optional(),
  manual: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBankAccountRequest$ {
  /** @deprecated use `CreateBankAccountRequest$inboundSchema` instead. */
  export const inboundSchema = CreateBankAccountRequest$inboundSchema;
  /** @deprecated use `CreateBankAccountRequest$outboundSchema` instead. */
  export const outboundSchema = CreateBankAccountRequest$outboundSchema;
  /** @deprecated use `CreateBankAccountRequest$Outbound` instead. */
  export type Outbound = CreateBankAccountRequest$Outbound;
}

export function createBankAccountRequestToJSON(
  createBankAccountRequest: CreateBankAccountRequest,
): string {
  return JSON.stringify(
    CreateBankAccountRequest$outboundSchema.parse(createBankAccountRequest),
  );
}

export function createBankAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateBankAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBankAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBankAccountRequest' from JSON`,
  );
}

/** @internal */
export const CreateBankAccountResponse$inboundSchema: z.ZodType<
  CreateBankAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()),
  currency: z.nullable(z.string()),
  type: z.nullable(z.string()),
  enabled: z.boolean(),
  balance: z.nullable(z.number()),
  manual: z.nullable(z.boolean()),
});

/** @internal */
export type CreateBankAccountResponse$Outbound = {
  id: string;
  name: string | null;
  currency: string | null;
  type: string | null;
  enabled: boolean;
  balance: number | null;
  manual: boolean | null;
};

/** @internal */
export const CreateBankAccountResponse$outboundSchema: z.ZodType<
  CreateBankAccountResponse$Outbound,
  z.ZodTypeDef,
  CreateBankAccountResponse
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()),
  currency: z.nullable(z.string()),
  type: z.nullable(z.string()),
  enabled: z.boolean(),
  balance: z.nullable(z.number()),
  manual: z.nullable(z.boolean()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBankAccountResponse$ {
  /** @deprecated use `CreateBankAccountResponse$inboundSchema` instead. */
  export const inboundSchema = CreateBankAccountResponse$inboundSchema;
  /** @deprecated use `CreateBankAccountResponse$outboundSchema` instead. */
  export const outboundSchema = CreateBankAccountResponse$outboundSchema;
  /** @deprecated use `CreateBankAccountResponse$Outbound` instead. */
  export type Outbound = CreateBankAccountResponse$Outbound;
}

export function createBankAccountResponseToJSON(
  createBankAccountResponse: CreateBankAccountResponse,
): string {
  return JSON.stringify(
    CreateBankAccountResponse$outboundSchema.parse(createBankAccountResponse),
  );
}

export function createBankAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateBankAccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBankAccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBankAccountResponse' from JSON`,
  );
}
