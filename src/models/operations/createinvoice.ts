/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Size = {
  A4: "a4",
  Letter: "letter",
} as const;
export type Size = ClosedEnum<typeof Size>;

export const TemplateDeliveryType = {
  Create: "create",
  CreateAndSend: "create_and_send",
  Scheduled: "scheduled",
} as const;
export type TemplateDeliveryType = ClosedEnum<typeof TemplateDeliveryType>;

/**
 * Payment details in TipTap JSONContent format
 */
export type TemplatePaymentDetails = {};

/**
 * Sender details in TipTap JSONContent format
 */
export type TemplateFromDetails = {};

/**
 * Invoice template details
 */
export type Template = {
  customerLabel?: string | undefined;
  title?: string | undefined;
  fromLabel?: string | undefined;
  invoiceNoLabel?: string | undefined;
  issueDateLabel?: string | undefined;
  dueDateLabel?: string | undefined;
  descriptionLabel?: string | undefined;
  priceLabel?: string | undefined;
  quantityLabel?: string | undefined;
  totalLabel?: string | undefined;
  totalSummaryLabel?: string | undefined;
  vatLabel?: string | undefined;
  subtotalLabel?: string | undefined;
  taxLabel?: string | undefined;
  discountLabel?: string | undefined;
  timezone?: string | undefined;
  paymentLabel?: string | undefined;
  noteLabel?: string | undefined;
  logoUrl?: string | null | undefined;
  currency?: string | undefined;
  dateFormat?: string | undefined;
  includeVat?: boolean | undefined;
  includeTax?: boolean | undefined;
  includeDiscount?: boolean | undefined;
  includeDecimals?: boolean | undefined;
  includePdf?: boolean | undefined;
  sendCopy?: boolean | undefined;
  includeUnits?: boolean | undefined;
  includeQr?: boolean | undefined;
  taxRate?: number | undefined;
  vatRate?: number | undefined;
  size?: Size | undefined;
  deliveryType?: TemplateDeliveryType | undefined;
  locale?: string | undefined;
  /**
   * Payment details in TipTap JSONContent format
   */
  paymentDetails?: TemplatePaymentDetails | undefined;
  /**
   * Sender details in TipTap JSONContent format
   */
  fromDetails?: TemplateFromDetails | undefined;
};

/**
 * Sender details in TipTap JSONContent format
 */
export type FromDetails = {};

/**
 * Payment details in TipTap JSONContent format
 */
export type PaymentDetails = {};

/**
 * Additional notes for the invoice in TipTap JSONContent format
 */
export type NoteDetails = {};

/**
 * Custom content block to display at the top of the invoice in TipTap JSONContent format
 */
export type TopBlock = {};

/**
 * Custom content block to display at the bottom of the invoice in TipTap JSONContent format
 */
export type BottomBlock = {};

/**
 * Line item description in TipTap JSONContent format
 */
export type Name = {};

export type LineItem = {
  quantity?: number | undefined;
  unit?: string | null | undefined;
  price?: number | undefined;
  vat?: number | null | undefined;
  tax?: number | null | undefined;
  /**
   * Line item description in TipTap JSONContent format
   */
  name?: Name | undefined;
};

/**
 * How the invoice should be processed: 'create' - finalize immediately, 'create_and_send' - finalize and send to customer, 'scheduled' - schedule for automatic processing at specified date
 */
export const DeliveryType = {
  Create: "create",
  CreateAndSend: "create_and_send",
  Scheduled: "scheduled",
} as const;
/**
 * How the invoice should be processed: 'create' - finalize immediately, 'create_and_send' - finalize and send to customer, 'scheduled' - schedule for automatic processing at specified date
 */
export type DeliveryType = ClosedEnum<typeof DeliveryType>;

/**
 * Schema for creating an invoice. The deliveryType determines if it stays as a draft, gets finalized immediately, or gets scheduled for later processing.
 */
export type CreateInvoiceRequest = {
  /**
   * Invoice template details
   */
  template: Template;
  /**
   * Sender details in TipTap JSONContent format
   */
  fromDetails?: FromDetails | undefined;
  /**
   * Unique identifier for the customer (required)
   */
  customerId: string;
  /**
   * Payment details in TipTap JSONContent format
   */
  paymentDetails?: PaymentDetails | undefined;
  /**
   * Additional notes for the invoice in TipTap JSONContent format
   */
  noteDetails?: NoteDetails | undefined;
  /**
   * Due date of the invoice in ISO 8601 format
   */
  dueDate: string;
  /**
   * Issue date of the invoice in ISO 8601 format
   */
  issueDate: string;
  /**
   * Invoice number as shown to the customer (auto-generated if not provided)
   */
  invoiceNumber?: string | undefined;
  /**
   * URL of the logo to display on the invoice
   */
  logoUrl?: string | null | undefined;
  /**
   * VAT amount for the invoice
   */
  vat?: number | null | undefined;
  /**
   * Tax amount for the invoice
   */
  tax?: number | null | undefined;
  /**
   * Discount applied to the invoice
   */
  discount?: number | null | undefined;
  /**
   * Custom content block to display at the top of the invoice in TipTap JSONContent format
   */
  topBlock?: TopBlock | undefined;
  /**
   * Custom content block to display at the bottom of the invoice in TipTap JSONContent format
   */
  bottomBlock?: BottomBlock | undefined;
  /**
   * Total amount of the invoice
   */
  amount?: number | null | undefined;
  /**
   * List of line items for the invoice
   */
  lineItems?: Array<LineItem> | undefined;
  /**
   * How the invoice should be processed: 'create' - finalize immediately, 'create_and_send' - finalize and send to customer, 'scheduled' - schedule for automatic processing at specified date
   */
  deliveryType: DeliveryType;
  /**
   * Scheduled date of the invoice in ISO 8601 format. Required when deliveryType is 'scheduled'. Must be in the future.
   */
  scheduledAt?: Date | undefined;
};

/**
 * Current status of the invoice
 */
export const CreateInvoiceStatus = {
  Draft: "draft",
  Overdue: "overdue",
  Paid: "paid",
  Unpaid: "unpaid",
  Canceled: "canceled",
  Scheduled: "scheduled",
} as const;
/**
 * Current status of the invoice
 */
export type CreateInvoiceStatus = ClosedEnum<typeof CreateInvoiceStatus>;

/**
 * Response after creating a draft invoice
 */
export type CreateInvoiceResponse = {
  /**
   * Unique identifier for the draft invoice
   */
  id: string;
  /**
   * Current status of the invoice
   */
  status: CreateInvoiceStatus;
  /**
   * Timestamp when the invoice was created (ISO 8601)
   */
  createdAt: string;
  /**
   * Timestamp when the invoice was last updated (ISO 8601)
   */
  updatedAt: string;
  /**
   * Direct URL to download the invoice PDF
   */
  pdfUrl: string | null;
  /**
   * Direct URL to preview the invoice in browser
   */
  previewUrl: string | null;
};

/** @internal */
export const Size$inboundSchema: z.ZodNativeEnum<typeof Size> = z.nativeEnum(
  Size,
);

/** @internal */
export const Size$outboundSchema: z.ZodNativeEnum<typeof Size> =
  Size$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Size$ {
  /** @deprecated use `Size$inboundSchema` instead. */
  export const inboundSchema = Size$inboundSchema;
  /** @deprecated use `Size$outboundSchema` instead. */
  export const outboundSchema = Size$outboundSchema;
}

/** @internal */
export const TemplateDeliveryType$inboundSchema: z.ZodNativeEnum<
  typeof TemplateDeliveryType
> = z.nativeEnum(TemplateDeliveryType);

/** @internal */
export const TemplateDeliveryType$outboundSchema: z.ZodNativeEnum<
  typeof TemplateDeliveryType
> = TemplateDeliveryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDeliveryType$ {
  /** @deprecated use `TemplateDeliveryType$inboundSchema` instead. */
  export const inboundSchema = TemplateDeliveryType$inboundSchema;
  /** @deprecated use `TemplateDeliveryType$outboundSchema` instead. */
  export const outboundSchema = TemplateDeliveryType$outboundSchema;
}

/** @internal */
export const TemplatePaymentDetails$inboundSchema: z.ZodType<
  TemplatePaymentDetails,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TemplatePaymentDetails$Outbound = {};

/** @internal */
export const TemplatePaymentDetails$outboundSchema: z.ZodType<
  TemplatePaymentDetails$Outbound,
  z.ZodTypeDef,
  TemplatePaymentDetails
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplatePaymentDetails$ {
  /** @deprecated use `TemplatePaymentDetails$inboundSchema` instead. */
  export const inboundSchema = TemplatePaymentDetails$inboundSchema;
  /** @deprecated use `TemplatePaymentDetails$outboundSchema` instead. */
  export const outboundSchema = TemplatePaymentDetails$outboundSchema;
  /** @deprecated use `TemplatePaymentDetails$Outbound` instead. */
  export type Outbound = TemplatePaymentDetails$Outbound;
}

export function templatePaymentDetailsToJSON(
  templatePaymentDetails: TemplatePaymentDetails,
): string {
  return JSON.stringify(
    TemplatePaymentDetails$outboundSchema.parse(templatePaymentDetails),
  );
}

export function templatePaymentDetailsFromJSON(
  jsonString: string,
): SafeParseResult<TemplatePaymentDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplatePaymentDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplatePaymentDetails' from JSON`,
  );
}

/** @internal */
export const TemplateFromDetails$inboundSchema: z.ZodType<
  TemplateFromDetails,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TemplateFromDetails$Outbound = {};

/** @internal */
export const TemplateFromDetails$outboundSchema: z.ZodType<
  TemplateFromDetails$Outbound,
  z.ZodTypeDef,
  TemplateFromDetails
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFromDetails$ {
  /** @deprecated use `TemplateFromDetails$inboundSchema` instead. */
  export const inboundSchema = TemplateFromDetails$inboundSchema;
  /** @deprecated use `TemplateFromDetails$outboundSchema` instead. */
  export const outboundSchema = TemplateFromDetails$outboundSchema;
  /** @deprecated use `TemplateFromDetails$Outbound` instead. */
  export type Outbound = TemplateFromDetails$Outbound;
}

export function templateFromDetailsToJSON(
  templateFromDetails: TemplateFromDetails,
): string {
  return JSON.stringify(
    TemplateFromDetails$outboundSchema.parse(templateFromDetails),
  );
}

export function templateFromDetailsFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFromDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFromDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFromDetails' from JSON`,
  );
}

/** @internal */
export const Template$inboundSchema: z.ZodType<
  Template,
  z.ZodTypeDef,
  unknown
> = z.object({
  customerLabel: z.string().optional(),
  title: z.string().optional(),
  fromLabel: z.string().optional(),
  invoiceNoLabel: z.string().optional(),
  issueDateLabel: z.string().optional(),
  dueDateLabel: z.string().optional(),
  descriptionLabel: z.string().optional(),
  priceLabel: z.string().optional(),
  quantityLabel: z.string().optional(),
  totalLabel: z.string().optional(),
  totalSummaryLabel: z.string().optional(),
  vatLabel: z.string().optional(),
  subtotalLabel: z.string().optional(),
  taxLabel: z.string().optional(),
  discountLabel: z.string().optional(),
  timezone: z.string().optional(),
  paymentLabel: z.string().optional(),
  noteLabel: z.string().optional(),
  logoUrl: z.nullable(z.string()).optional(),
  currency: z.string().optional(),
  dateFormat: z.string().optional(),
  includeVat: z.boolean().optional(),
  includeTax: z.boolean().optional(),
  includeDiscount: z.boolean().optional(),
  includeDecimals: z.boolean().optional(),
  includePdf: z.boolean().optional(),
  sendCopy: z.boolean().optional(),
  includeUnits: z.boolean().optional(),
  includeQr: z.boolean().optional(),
  taxRate: z.number().optional(),
  vatRate: z.number().optional(),
  size: Size$inboundSchema.optional(),
  deliveryType: TemplateDeliveryType$inboundSchema.optional(),
  locale: z.string().optional(),
  paymentDetails: z.lazy(() => TemplatePaymentDetails$inboundSchema).optional(),
  fromDetails: z.lazy(() => TemplateFromDetails$inboundSchema).optional(),
});

/** @internal */
export type Template$Outbound = {
  customerLabel?: string | undefined;
  title?: string | undefined;
  fromLabel?: string | undefined;
  invoiceNoLabel?: string | undefined;
  issueDateLabel?: string | undefined;
  dueDateLabel?: string | undefined;
  descriptionLabel?: string | undefined;
  priceLabel?: string | undefined;
  quantityLabel?: string | undefined;
  totalLabel?: string | undefined;
  totalSummaryLabel?: string | undefined;
  vatLabel?: string | undefined;
  subtotalLabel?: string | undefined;
  taxLabel?: string | undefined;
  discountLabel?: string | undefined;
  timezone?: string | undefined;
  paymentLabel?: string | undefined;
  noteLabel?: string | undefined;
  logoUrl?: string | null | undefined;
  currency?: string | undefined;
  dateFormat?: string | undefined;
  includeVat?: boolean | undefined;
  includeTax?: boolean | undefined;
  includeDiscount?: boolean | undefined;
  includeDecimals?: boolean | undefined;
  includePdf?: boolean | undefined;
  sendCopy?: boolean | undefined;
  includeUnits?: boolean | undefined;
  includeQr?: boolean | undefined;
  taxRate?: number | undefined;
  vatRate?: number | undefined;
  size?: string | undefined;
  deliveryType?: string | undefined;
  locale?: string | undefined;
  paymentDetails?: TemplatePaymentDetails$Outbound | undefined;
  fromDetails?: TemplateFromDetails$Outbound | undefined;
};

/** @internal */
export const Template$outboundSchema: z.ZodType<
  Template$Outbound,
  z.ZodTypeDef,
  Template
> = z.object({
  customerLabel: z.string().optional(),
  title: z.string().optional(),
  fromLabel: z.string().optional(),
  invoiceNoLabel: z.string().optional(),
  issueDateLabel: z.string().optional(),
  dueDateLabel: z.string().optional(),
  descriptionLabel: z.string().optional(),
  priceLabel: z.string().optional(),
  quantityLabel: z.string().optional(),
  totalLabel: z.string().optional(),
  totalSummaryLabel: z.string().optional(),
  vatLabel: z.string().optional(),
  subtotalLabel: z.string().optional(),
  taxLabel: z.string().optional(),
  discountLabel: z.string().optional(),
  timezone: z.string().optional(),
  paymentLabel: z.string().optional(),
  noteLabel: z.string().optional(),
  logoUrl: z.nullable(z.string()).optional(),
  currency: z.string().optional(),
  dateFormat: z.string().optional(),
  includeVat: z.boolean().optional(),
  includeTax: z.boolean().optional(),
  includeDiscount: z.boolean().optional(),
  includeDecimals: z.boolean().optional(),
  includePdf: z.boolean().optional(),
  sendCopy: z.boolean().optional(),
  includeUnits: z.boolean().optional(),
  includeQr: z.boolean().optional(),
  taxRate: z.number().optional(),
  vatRate: z.number().optional(),
  size: Size$outboundSchema.optional(),
  deliveryType: TemplateDeliveryType$outboundSchema.optional(),
  locale: z.string().optional(),
  paymentDetails: z.lazy(() => TemplatePaymentDetails$outboundSchema)
    .optional(),
  fromDetails: z.lazy(() => TemplateFromDetails$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Template$ {
  /** @deprecated use `Template$inboundSchema` instead. */
  export const inboundSchema = Template$inboundSchema;
  /** @deprecated use `Template$outboundSchema` instead. */
  export const outboundSchema = Template$outboundSchema;
  /** @deprecated use `Template$Outbound` instead. */
  export type Outbound = Template$Outbound;
}

export function templateToJSON(template: Template): string {
  return JSON.stringify(Template$outboundSchema.parse(template));
}

export function templateFromJSON(
  jsonString: string,
): SafeParseResult<Template, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Template$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Template' from JSON`,
  );
}

/** @internal */
export const FromDetails$inboundSchema: z.ZodType<
  FromDetails,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type FromDetails$Outbound = {};

/** @internal */
export const FromDetails$outboundSchema: z.ZodType<
  FromDetails$Outbound,
  z.ZodTypeDef,
  FromDetails
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FromDetails$ {
  /** @deprecated use `FromDetails$inboundSchema` instead. */
  export const inboundSchema = FromDetails$inboundSchema;
  /** @deprecated use `FromDetails$outboundSchema` instead. */
  export const outboundSchema = FromDetails$outboundSchema;
  /** @deprecated use `FromDetails$Outbound` instead. */
  export type Outbound = FromDetails$Outbound;
}

export function fromDetailsToJSON(fromDetails: FromDetails): string {
  return JSON.stringify(FromDetails$outboundSchema.parse(fromDetails));
}

export function fromDetailsFromJSON(
  jsonString: string,
): SafeParseResult<FromDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FromDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FromDetails' from JSON`,
  );
}

/** @internal */
export const PaymentDetails$inboundSchema: z.ZodType<
  PaymentDetails,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PaymentDetails$Outbound = {};

/** @internal */
export const PaymentDetails$outboundSchema: z.ZodType<
  PaymentDetails$Outbound,
  z.ZodTypeDef,
  PaymentDetails
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentDetails$ {
  /** @deprecated use `PaymentDetails$inboundSchema` instead. */
  export const inboundSchema = PaymentDetails$inboundSchema;
  /** @deprecated use `PaymentDetails$outboundSchema` instead. */
  export const outboundSchema = PaymentDetails$outboundSchema;
  /** @deprecated use `PaymentDetails$Outbound` instead. */
  export type Outbound = PaymentDetails$Outbound;
}

export function paymentDetailsToJSON(paymentDetails: PaymentDetails): string {
  return JSON.stringify(PaymentDetails$outboundSchema.parse(paymentDetails));
}

export function paymentDetailsFromJSON(
  jsonString: string,
): SafeParseResult<PaymentDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentDetails' from JSON`,
  );
}

/** @internal */
export const NoteDetails$inboundSchema: z.ZodType<
  NoteDetails,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type NoteDetails$Outbound = {};

/** @internal */
export const NoteDetails$outboundSchema: z.ZodType<
  NoteDetails$Outbound,
  z.ZodTypeDef,
  NoteDetails
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NoteDetails$ {
  /** @deprecated use `NoteDetails$inboundSchema` instead. */
  export const inboundSchema = NoteDetails$inboundSchema;
  /** @deprecated use `NoteDetails$outboundSchema` instead. */
  export const outboundSchema = NoteDetails$outboundSchema;
  /** @deprecated use `NoteDetails$Outbound` instead. */
  export type Outbound = NoteDetails$Outbound;
}

export function noteDetailsToJSON(noteDetails: NoteDetails): string {
  return JSON.stringify(NoteDetails$outboundSchema.parse(noteDetails));
}

export function noteDetailsFromJSON(
  jsonString: string,
): SafeParseResult<NoteDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NoteDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NoteDetails' from JSON`,
  );
}

/** @internal */
export const TopBlock$inboundSchema: z.ZodType<
  TopBlock,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TopBlock$Outbound = {};

/** @internal */
export const TopBlock$outboundSchema: z.ZodType<
  TopBlock$Outbound,
  z.ZodTypeDef,
  TopBlock
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopBlock$ {
  /** @deprecated use `TopBlock$inboundSchema` instead. */
  export const inboundSchema = TopBlock$inboundSchema;
  /** @deprecated use `TopBlock$outboundSchema` instead. */
  export const outboundSchema = TopBlock$outboundSchema;
  /** @deprecated use `TopBlock$Outbound` instead. */
  export type Outbound = TopBlock$Outbound;
}

export function topBlockToJSON(topBlock: TopBlock): string {
  return JSON.stringify(TopBlock$outboundSchema.parse(topBlock));
}

export function topBlockFromJSON(
  jsonString: string,
): SafeParseResult<TopBlock, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopBlock$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopBlock' from JSON`,
  );
}

/** @internal */
export const BottomBlock$inboundSchema: z.ZodType<
  BottomBlock,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type BottomBlock$Outbound = {};

/** @internal */
export const BottomBlock$outboundSchema: z.ZodType<
  BottomBlock$Outbound,
  z.ZodTypeDef,
  BottomBlock
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BottomBlock$ {
  /** @deprecated use `BottomBlock$inboundSchema` instead. */
  export const inboundSchema = BottomBlock$inboundSchema;
  /** @deprecated use `BottomBlock$outboundSchema` instead. */
  export const outboundSchema = BottomBlock$outboundSchema;
  /** @deprecated use `BottomBlock$Outbound` instead. */
  export type Outbound = BottomBlock$Outbound;
}

export function bottomBlockToJSON(bottomBlock: BottomBlock): string {
  return JSON.stringify(BottomBlock$outboundSchema.parse(bottomBlock));
}

export function bottomBlockFromJSON(
  jsonString: string,
): SafeParseResult<BottomBlock, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BottomBlock$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BottomBlock' from JSON`,
  );
}

/** @internal */
export const Name$inboundSchema: z.ZodType<Name, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Name$Outbound = {};

/** @internal */
export const Name$outboundSchema: z.ZodType<Name$Outbound, z.ZodTypeDef, Name> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Name$ {
  /** @deprecated use `Name$inboundSchema` instead. */
  export const inboundSchema = Name$inboundSchema;
  /** @deprecated use `Name$outboundSchema` instead. */
  export const outboundSchema = Name$outboundSchema;
  /** @deprecated use `Name$Outbound` instead. */
  export type Outbound = Name$Outbound;
}

export function nameToJSON(name: Name): string {
  return JSON.stringify(Name$outboundSchema.parse(name));
}

export function nameFromJSON(
  jsonString: string,
): SafeParseResult<Name, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Name$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Name' from JSON`,
  );
}

/** @internal */
export const LineItem$inboundSchema: z.ZodType<
  LineItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  quantity: z.number().optional(),
  unit: z.nullable(z.string()).optional(),
  price: z.number().optional(),
  vat: z.nullable(z.number()).optional(),
  tax: z.nullable(z.number()).optional(),
  name: z.lazy(() => Name$inboundSchema).optional(),
});

/** @internal */
export type LineItem$Outbound = {
  quantity?: number | undefined;
  unit?: string | null | undefined;
  price?: number | undefined;
  vat?: number | null | undefined;
  tax?: number | null | undefined;
  name?: Name$Outbound | undefined;
};

/** @internal */
export const LineItem$outboundSchema: z.ZodType<
  LineItem$Outbound,
  z.ZodTypeDef,
  LineItem
> = z.object({
  quantity: z.number().optional(),
  unit: z.nullable(z.string()).optional(),
  price: z.number().optional(),
  vat: z.nullable(z.number()).optional(),
  tax: z.nullable(z.number()).optional(),
  name: z.lazy(() => Name$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LineItem$ {
  /** @deprecated use `LineItem$inboundSchema` instead. */
  export const inboundSchema = LineItem$inboundSchema;
  /** @deprecated use `LineItem$outboundSchema` instead. */
  export const outboundSchema = LineItem$outboundSchema;
  /** @deprecated use `LineItem$Outbound` instead. */
  export type Outbound = LineItem$Outbound;
}

export function lineItemToJSON(lineItem: LineItem): string {
  return JSON.stringify(LineItem$outboundSchema.parse(lineItem));
}

export function lineItemFromJSON(
  jsonString: string,
): SafeParseResult<LineItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LineItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LineItem' from JSON`,
  );
}

/** @internal */
export const DeliveryType$inboundSchema: z.ZodNativeEnum<typeof DeliveryType> =
  z.nativeEnum(DeliveryType);

/** @internal */
export const DeliveryType$outboundSchema: z.ZodNativeEnum<typeof DeliveryType> =
  DeliveryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeliveryType$ {
  /** @deprecated use `DeliveryType$inboundSchema` instead. */
  export const inboundSchema = DeliveryType$inboundSchema;
  /** @deprecated use `DeliveryType$outboundSchema` instead. */
  export const outboundSchema = DeliveryType$outboundSchema;
}

/** @internal */
export const CreateInvoiceRequest$inboundSchema: z.ZodType<
  CreateInvoiceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  template: z.lazy(() => Template$inboundSchema),
  fromDetails: z.lazy(() => FromDetails$inboundSchema).optional(),
  customerId: z.string(),
  paymentDetails: z.lazy(() => PaymentDetails$inboundSchema).optional(),
  noteDetails: z.lazy(() => NoteDetails$inboundSchema).optional(),
  dueDate: z.string(),
  issueDate: z.string(),
  invoiceNumber: z.string().optional(),
  logoUrl: z.nullable(z.string()).optional(),
  vat: z.nullable(z.number()).optional(),
  tax: z.nullable(z.number()).optional(),
  discount: z.nullable(z.number()).optional(),
  topBlock: z.lazy(() => TopBlock$inboundSchema).optional(),
  bottomBlock: z.lazy(() => BottomBlock$inboundSchema).optional(),
  amount: z.nullable(z.number()).optional(),
  lineItems: z.array(z.lazy(() => LineItem$inboundSchema)).optional(),
  deliveryType: DeliveryType$inboundSchema,
  scheduledAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type CreateInvoiceRequest$Outbound = {
  template: Template$Outbound;
  fromDetails?: FromDetails$Outbound | undefined;
  customerId: string;
  paymentDetails?: PaymentDetails$Outbound | undefined;
  noteDetails?: NoteDetails$Outbound | undefined;
  dueDate: string;
  issueDate: string;
  invoiceNumber?: string | undefined;
  logoUrl?: string | null | undefined;
  vat?: number | null | undefined;
  tax?: number | null | undefined;
  discount?: number | null | undefined;
  topBlock?: TopBlock$Outbound | undefined;
  bottomBlock?: BottomBlock$Outbound | undefined;
  amount?: number | null | undefined;
  lineItems?: Array<LineItem$Outbound> | undefined;
  deliveryType: string;
  scheduledAt?: string | undefined;
};

/** @internal */
export const CreateInvoiceRequest$outboundSchema: z.ZodType<
  CreateInvoiceRequest$Outbound,
  z.ZodTypeDef,
  CreateInvoiceRequest
> = z.object({
  template: z.lazy(() => Template$outboundSchema),
  fromDetails: z.lazy(() => FromDetails$outboundSchema).optional(),
  customerId: z.string(),
  paymentDetails: z.lazy(() => PaymentDetails$outboundSchema).optional(),
  noteDetails: z.lazy(() => NoteDetails$outboundSchema).optional(),
  dueDate: z.string(),
  issueDate: z.string(),
  invoiceNumber: z.string().optional(),
  logoUrl: z.nullable(z.string()).optional(),
  vat: z.nullable(z.number()).optional(),
  tax: z.nullable(z.number()).optional(),
  discount: z.nullable(z.number()).optional(),
  topBlock: z.lazy(() => TopBlock$outboundSchema).optional(),
  bottomBlock: z.lazy(() => BottomBlock$outboundSchema).optional(),
  amount: z.nullable(z.number()).optional(),
  lineItems: z.array(z.lazy(() => LineItem$outboundSchema)).optional(),
  deliveryType: DeliveryType$outboundSchema,
  scheduledAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInvoiceRequest$ {
  /** @deprecated use `CreateInvoiceRequest$inboundSchema` instead. */
  export const inboundSchema = CreateInvoiceRequest$inboundSchema;
  /** @deprecated use `CreateInvoiceRequest$outboundSchema` instead. */
  export const outboundSchema = CreateInvoiceRequest$outboundSchema;
  /** @deprecated use `CreateInvoiceRequest$Outbound` instead. */
  export type Outbound = CreateInvoiceRequest$Outbound;
}

export function createInvoiceRequestToJSON(
  createInvoiceRequest: CreateInvoiceRequest,
): string {
  return JSON.stringify(
    CreateInvoiceRequest$outboundSchema.parse(createInvoiceRequest),
  );
}

export function createInvoiceRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateInvoiceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInvoiceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInvoiceRequest' from JSON`,
  );
}

/** @internal */
export const CreateInvoiceStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreateInvoiceStatus
> = z.nativeEnum(CreateInvoiceStatus);

/** @internal */
export const CreateInvoiceStatus$outboundSchema: z.ZodNativeEnum<
  typeof CreateInvoiceStatus
> = CreateInvoiceStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInvoiceStatus$ {
  /** @deprecated use `CreateInvoiceStatus$inboundSchema` instead. */
  export const inboundSchema = CreateInvoiceStatus$inboundSchema;
  /** @deprecated use `CreateInvoiceStatus$outboundSchema` instead. */
  export const outboundSchema = CreateInvoiceStatus$outboundSchema;
}

/** @internal */
export const CreateInvoiceResponse$inboundSchema: z.ZodType<
  CreateInvoiceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: CreateInvoiceStatus$inboundSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
  pdfUrl: z.nullable(z.string()),
  previewUrl: z.nullable(z.string()),
});

/** @internal */
export type CreateInvoiceResponse$Outbound = {
  id: string;
  status: string;
  createdAt: string;
  updatedAt: string;
  pdfUrl: string | null;
  previewUrl: string | null;
};

/** @internal */
export const CreateInvoiceResponse$outboundSchema: z.ZodType<
  CreateInvoiceResponse$Outbound,
  z.ZodTypeDef,
  CreateInvoiceResponse
> = z.object({
  id: z.string(),
  status: CreateInvoiceStatus$outboundSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
  pdfUrl: z.nullable(z.string()),
  previewUrl: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateInvoiceResponse$ {
  /** @deprecated use `CreateInvoiceResponse$inboundSchema` instead. */
  export const inboundSchema = CreateInvoiceResponse$inboundSchema;
  /** @deprecated use `CreateInvoiceResponse$outboundSchema` instead. */
  export const outboundSchema = CreateInvoiceResponse$outboundSchema;
  /** @deprecated use `CreateInvoiceResponse$Outbound` instead. */
  export type Outbound = CreateInvoiceResponse$Outbound;
}

export function createInvoiceResponseToJSON(
  createInvoiceResponse: CreateInvoiceResponse,
): string {
  return JSON.stringify(
    CreateInvoiceResponse$outboundSchema.parse(createInvoiceResponse),
  );
}

export function createInvoiceResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateInvoiceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateInvoiceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateInvoiceResponse' from JSON`,
  );
}
