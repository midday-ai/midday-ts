/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Entry = {
  /**
   * Start time of the tracker entry in ISO 8601 format
   */
  start: Date;
  /**
   * Stop time of the tracker entry in ISO 8601 format
   */
  stop: Date;
  /**
   * Array of dates for which to create tracker entries
   */
  dates: Array<string>;
  /**
   * Unique identifier of the user assigned to this tracker entry
   */
  assignedId: string | null;
  /**
   * Unique identifier of the project associated with this tracker entry
   */
  projectId: string;
  /**
   * Optional description or notes for the tracker entry
   */
  description?: string | null | undefined;
  /**
   * Duration of the tracker entry in seconds
   */
  duration: number;
};

export type CreateTrackerEntriesBulkRequest = {
  /**
   * Array of tracker entries to create (maximum 100 entries per request)
   */
  entries: Array<Entry>;
};

/**
 * User information for the person who created this tracker entry
 */
export type CreateTrackerEntriesBulkUser = {
  /**
   * Unique identifier of the user
   */
  id: string;
  /**
   * Full name of the user
   */
  fullName: string;
  /**
   * URL to the user's avatar image
   */
  avatarUrl: string;
};

/**
 * Customer information associated with the project
 */
export type CreateTrackerEntriesBulkCustomer = {
  /**
   * Unique identifier of the customer
   */
  id: string;
  /**
   * Name of the customer or organization
   */
  name: string;
};

/**
 * Project information associated with this tracker entry
 */
export type CreateTrackerEntriesBulkProject = {
  /**
   * Unique identifier of the project
   */
  id: string;
  /**
   * Date and time when the project was created in ISO 8601 format
   */
  createdAt: string;
  /**
   * Default hourly rate for the project
   */
  rate: number | null;
  /**
   * Currency code for the project rate in ISO 4217 format
   */
  currency: string | null;
  /**
   * Current status of the project
   */
  status: string;
  /**
   * Description of the project
   */
  description: string | null;
  /**
   * Name of the project
   */
  name: string;
  /**
   * Whether the project is billable to the customer
   */
  billable: boolean | null;
  /**
   * Estimated total hours for the project
   */
  estimate: number | null;
  /**
   * Customer information associated with the project
   */
  customer: CreateTrackerEntriesBulkCustomer | null;
};

export type CreateTrackerEntriesBulkData = {
  /**
   * Unique identifier of the tracker entry
   */
  id: string;
  /**
   * Date and time when the tracker entry was created in ISO 8601 format
   */
  createdAt: string;
  /**
   * Duration of the tracker entry in seconds
   */
  duration: number;
  /**
   * Start time of the tracker entry in ISO 8601 format
   */
  start: string;
  /**
   * Stop time of the tracker entry in ISO 8601 format
   */
  stop: string;
  /**
   * Unique identifier of the team that owns this tracker entry
   */
  teamId: string;
  /**
   * Description or notes for the tracker entry
   */
  description: string | null;
  /**
   * Hourly rate applied to this tracker entry
   */
  rate: number | null;
  /**
   * Currency code for the rate in ISO 4217 format
   */
  currency: string | null;
  /**
   * Whether this tracker entry has been billed to the customer
   */
  billed: boolean;
  /**
   * Date of the tracker entry in YYYY-MM-DD format
   */
  date: string;
  /**
   * User information for the person who created this tracker entry
   */
  user: CreateTrackerEntriesBulkUser;
  /**
   * Project information associated with this tracker entry
   */
  project: CreateTrackerEntriesBulkProject;
};

/**
 * Response schema for created tracker entries
 */
export type CreateTrackerEntriesBulkResponse = {
  /**
   * Array of created tracker entries
   */
  data: Array<CreateTrackerEntriesBulkData>;
};

/** @internal */
export const Entry$inboundSchema: z.ZodType<Entry, z.ZodTypeDef, unknown> = z
  .object({
    start: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    stop: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    dates: z.array(z.string()),
    assignedId: z.nullable(z.string()),
    projectId: z.string(),
    description: z.nullable(z.string()).optional(),
    duration: z.number(),
  });

/** @internal */
export type Entry$Outbound = {
  start: string;
  stop: string;
  dates: Array<string>;
  assignedId: string | null;
  projectId: string;
  description?: string | null | undefined;
  duration: number;
};

/** @internal */
export const Entry$outboundSchema: z.ZodType<
  Entry$Outbound,
  z.ZodTypeDef,
  Entry
> = z.object({
  start: z.date().transform(v => v.toISOString()),
  stop: z.date().transform(v => v.toISOString()),
  dates: z.array(z.string()),
  assignedId: z.nullable(z.string()),
  projectId: z.string(),
  description: z.nullable(z.string()).optional(),
  duration: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Entry$ {
  /** @deprecated use `Entry$inboundSchema` instead. */
  export const inboundSchema = Entry$inboundSchema;
  /** @deprecated use `Entry$outboundSchema` instead. */
  export const outboundSchema = Entry$outboundSchema;
  /** @deprecated use `Entry$Outbound` instead. */
  export type Outbound = Entry$Outbound;
}

export function entryToJSON(entry: Entry): string {
  return JSON.stringify(Entry$outboundSchema.parse(entry));
}

export function entryFromJSON(
  jsonString: string,
): SafeParseResult<Entry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Entry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Entry' from JSON`,
  );
}

/** @internal */
export const CreateTrackerEntriesBulkRequest$inboundSchema: z.ZodType<
  CreateTrackerEntriesBulkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  entries: z.array(z.lazy(() => Entry$inboundSchema)),
});

/** @internal */
export type CreateTrackerEntriesBulkRequest$Outbound = {
  entries: Array<Entry$Outbound>;
};

/** @internal */
export const CreateTrackerEntriesBulkRequest$outboundSchema: z.ZodType<
  CreateTrackerEntriesBulkRequest$Outbound,
  z.ZodTypeDef,
  CreateTrackerEntriesBulkRequest
> = z.object({
  entries: z.array(z.lazy(() => Entry$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTrackerEntriesBulkRequest$ {
  /** @deprecated use `CreateTrackerEntriesBulkRequest$inboundSchema` instead. */
  export const inboundSchema = CreateTrackerEntriesBulkRequest$inboundSchema;
  /** @deprecated use `CreateTrackerEntriesBulkRequest$outboundSchema` instead. */
  export const outboundSchema = CreateTrackerEntriesBulkRequest$outboundSchema;
  /** @deprecated use `CreateTrackerEntriesBulkRequest$Outbound` instead. */
  export type Outbound = CreateTrackerEntriesBulkRequest$Outbound;
}

export function createTrackerEntriesBulkRequestToJSON(
  createTrackerEntriesBulkRequest: CreateTrackerEntriesBulkRequest,
): string {
  return JSON.stringify(
    CreateTrackerEntriesBulkRequest$outboundSchema.parse(
      createTrackerEntriesBulkRequest,
    ),
  );
}

export function createTrackerEntriesBulkRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateTrackerEntriesBulkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTrackerEntriesBulkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTrackerEntriesBulkRequest' from JSON`,
  );
}

/** @internal */
export const CreateTrackerEntriesBulkUser$inboundSchema: z.ZodType<
  CreateTrackerEntriesBulkUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  fullName: z.string(),
  avatarUrl: z.string(),
});

/** @internal */
export type CreateTrackerEntriesBulkUser$Outbound = {
  id: string;
  fullName: string;
  avatarUrl: string;
};

/** @internal */
export const CreateTrackerEntriesBulkUser$outboundSchema: z.ZodType<
  CreateTrackerEntriesBulkUser$Outbound,
  z.ZodTypeDef,
  CreateTrackerEntriesBulkUser
> = z.object({
  id: z.string(),
  fullName: z.string(),
  avatarUrl: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTrackerEntriesBulkUser$ {
  /** @deprecated use `CreateTrackerEntriesBulkUser$inboundSchema` instead. */
  export const inboundSchema = CreateTrackerEntriesBulkUser$inboundSchema;
  /** @deprecated use `CreateTrackerEntriesBulkUser$outboundSchema` instead. */
  export const outboundSchema = CreateTrackerEntriesBulkUser$outboundSchema;
  /** @deprecated use `CreateTrackerEntriesBulkUser$Outbound` instead. */
  export type Outbound = CreateTrackerEntriesBulkUser$Outbound;
}

export function createTrackerEntriesBulkUserToJSON(
  createTrackerEntriesBulkUser: CreateTrackerEntriesBulkUser,
): string {
  return JSON.stringify(
    CreateTrackerEntriesBulkUser$outboundSchema.parse(
      createTrackerEntriesBulkUser,
    ),
  );
}

export function createTrackerEntriesBulkUserFromJSON(
  jsonString: string,
): SafeParseResult<CreateTrackerEntriesBulkUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTrackerEntriesBulkUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTrackerEntriesBulkUser' from JSON`,
  );
}

/** @internal */
export const CreateTrackerEntriesBulkCustomer$inboundSchema: z.ZodType<
  CreateTrackerEntriesBulkCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
});

/** @internal */
export type CreateTrackerEntriesBulkCustomer$Outbound = {
  id: string;
  name: string;
};

/** @internal */
export const CreateTrackerEntriesBulkCustomer$outboundSchema: z.ZodType<
  CreateTrackerEntriesBulkCustomer$Outbound,
  z.ZodTypeDef,
  CreateTrackerEntriesBulkCustomer
> = z.object({
  id: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTrackerEntriesBulkCustomer$ {
  /** @deprecated use `CreateTrackerEntriesBulkCustomer$inboundSchema` instead. */
  export const inboundSchema = CreateTrackerEntriesBulkCustomer$inboundSchema;
  /** @deprecated use `CreateTrackerEntriesBulkCustomer$outboundSchema` instead. */
  export const outboundSchema = CreateTrackerEntriesBulkCustomer$outboundSchema;
  /** @deprecated use `CreateTrackerEntriesBulkCustomer$Outbound` instead. */
  export type Outbound = CreateTrackerEntriesBulkCustomer$Outbound;
}

export function createTrackerEntriesBulkCustomerToJSON(
  createTrackerEntriesBulkCustomer: CreateTrackerEntriesBulkCustomer,
): string {
  return JSON.stringify(
    CreateTrackerEntriesBulkCustomer$outboundSchema.parse(
      createTrackerEntriesBulkCustomer,
    ),
  );
}

export function createTrackerEntriesBulkCustomerFromJSON(
  jsonString: string,
): SafeParseResult<CreateTrackerEntriesBulkCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTrackerEntriesBulkCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTrackerEntriesBulkCustomer' from JSON`,
  );
}

/** @internal */
export const CreateTrackerEntriesBulkProject$inboundSchema: z.ZodType<
  CreateTrackerEntriesBulkProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  rate: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  status: z.string(),
  description: z.nullable(z.string()),
  name: z.string(),
  billable: z.nullable(z.boolean()),
  estimate: z.nullable(z.number()),
  customer: z.nullable(
    z.lazy(() => CreateTrackerEntriesBulkCustomer$inboundSchema),
  ),
});

/** @internal */
export type CreateTrackerEntriesBulkProject$Outbound = {
  id: string;
  createdAt: string;
  rate: number | null;
  currency: string | null;
  status: string;
  description: string | null;
  name: string;
  billable: boolean | null;
  estimate: number | null;
  customer: CreateTrackerEntriesBulkCustomer$Outbound | null;
};

/** @internal */
export const CreateTrackerEntriesBulkProject$outboundSchema: z.ZodType<
  CreateTrackerEntriesBulkProject$Outbound,
  z.ZodTypeDef,
  CreateTrackerEntriesBulkProject
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  rate: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  status: z.string(),
  description: z.nullable(z.string()),
  name: z.string(),
  billable: z.nullable(z.boolean()),
  estimate: z.nullable(z.number()),
  customer: z.nullable(
    z.lazy(() => CreateTrackerEntriesBulkCustomer$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTrackerEntriesBulkProject$ {
  /** @deprecated use `CreateTrackerEntriesBulkProject$inboundSchema` instead. */
  export const inboundSchema = CreateTrackerEntriesBulkProject$inboundSchema;
  /** @deprecated use `CreateTrackerEntriesBulkProject$outboundSchema` instead. */
  export const outboundSchema = CreateTrackerEntriesBulkProject$outboundSchema;
  /** @deprecated use `CreateTrackerEntriesBulkProject$Outbound` instead. */
  export type Outbound = CreateTrackerEntriesBulkProject$Outbound;
}

export function createTrackerEntriesBulkProjectToJSON(
  createTrackerEntriesBulkProject: CreateTrackerEntriesBulkProject,
): string {
  return JSON.stringify(
    CreateTrackerEntriesBulkProject$outboundSchema.parse(
      createTrackerEntriesBulkProject,
    ),
  );
}

export function createTrackerEntriesBulkProjectFromJSON(
  jsonString: string,
): SafeParseResult<CreateTrackerEntriesBulkProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTrackerEntriesBulkProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTrackerEntriesBulkProject' from JSON`,
  );
}

/** @internal */
export const CreateTrackerEntriesBulkData$inboundSchema: z.ZodType<
  CreateTrackerEntriesBulkData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  duration: z.number(),
  start: z.string(),
  stop: z.string(),
  teamId: z.string(),
  description: z.nullable(z.string()),
  rate: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  billed: z.boolean(),
  date: z.string(),
  user: z.lazy(() => CreateTrackerEntriesBulkUser$inboundSchema),
  project: z.lazy(() => CreateTrackerEntriesBulkProject$inboundSchema),
});

/** @internal */
export type CreateTrackerEntriesBulkData$Outbound = {
  id: string;
  createdAt: string;
  duration: number;
  start: string;
  stop: string;
  teamId: string;
  description: string | null;
  rate: number | null;
  currency: string | null;
  billed: boolean;
  date: string;
  user: CreateTrackerEntriesBulkUser$Outbound;
  project: CreateTrackerEntriesBulkProject$Outbound;
};

/** @internal */
export const CreateTrackerEntriesBulkData$outboundSchema: z.ZodType<
  CreateTrackerEntriesBulkData$Outbound,
  z.ZodTypeDef,
  CreateTrackerEntriesBulkData
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  duration: z.number(),
  start: z.string(),
  stop: z.string(),
  teamId: z.string(),
  description: z.nullable(z.string()),
  rate: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  billed: z.boolean(),
  date: z.string(),
  user: z.lazy(() => CreateTrackerEntriesBulkUser$outboundSchema),
  project: z.lazy(() => CreateTrackerEntriesBulkProject$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTrackerEntriesBulkData$ {
  /** @deprecated use `CreateTrackerEntriesBulkData$inboundSchema` instead. */
  export const inboundSchema = CreateTrackerEntriesBulkData$inboundSchema;
  /** @deprecated use `CreateTrackerEntriesBulkData$outboundSchema` instead. */
  export const outboundSchema = CreateTrackerEntriesBulkData$outboundSchema;
  /** @deprecated use `CreateTrackerEntriesBulkData$Outbound` instead. */
  export type Outbound = CreateTrackerEntriesBulkData$Outbound;
}

export function createTrackerEntriesBulkDataToJSON(
  createTrackerEntriesBulkData: CreateTrackerEntriesBulkData,
): string {
  return JSON.stringify(
    CreateTrackerEntriesBulkData$outboundSchema.parse(
      createTrackerEntriesBulkData,
    ),
  );
}

export function createTrackerEntriesBulkDataFromJSON(
  jsonString: string,
): SafeParseResult<CreateTrackerEntriesBulkData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTrackerEntriesBulkData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTrackerEntriesBulkData' from JSON`,
  );
}

/** @internal */
export const CreateTrackerEntriesBulkResponse$inboundSchema: z.ZodType<
  CreateTrackerEntriesBulkResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => CreateTrackerEntriesBulkData$inboundSchema)),
});

/** @internal */
export type CreateTrackerEntriesBulkResponse$Outbound = {
  data: Array<CreateTrackerEntriesBulkData$Outbound>;
};

/** @internal */
export const CreateTrackerEntriesBulkResponse$outboundSchema: z.ZodType<
  CreateTrackerEntriesBulkResponse$Outbound,
  z.ZodTypeDef,
  CreateTrackerEntriesBulkResponse
> = z.object({
  data: z.array(z.lazy(() => CreateTrackerEntriesBulkData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTrackerEntriesBulkResponse$ {
  /** @deprecated use `CreateTrackerEntriesBulkResponse$inboundSchema` instead. */
  export const inboundSchema = CreateTrackerEntriesBulkResponse$inboundSchema;
  /** @deprecated use `CreateTrackerEntriesBulkResponse$outboundSchema` instead. */
  export const outboundSchema = CreateTrackerEntriesBulkResponse$outboundSchema;
  /** @deprecated use `CreateTrackerEntriesBulkResponse$Outbound` instead. */
  export type Outbound = CreateTrackerEntriesBulkResponse$Outbound;
}

export function createTrackerEntriesBulkResponseToJSON(
  createTrackerEntriesBulkResponse: CreateTrackerEntriesBulkResponse,
): string {
  return JSON.stringify(
    CreateTrackerEntriesBulkResponse$outboundSchema.parse(
      createTrackerEntriesBulkResponse,
    ),
  );
}

export function createTrackerEntriesBulkResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateTrackerEntriesBulkResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTrackerEntriesBulkResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTrackerEntriesBulkResponse' from JSON`,
  );
}
