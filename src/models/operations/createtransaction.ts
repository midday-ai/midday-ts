/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateTransactionAttachment = {
  /**
   * Path(s) of the attachment file(s).
   */
  path: Array<string>;
  /**
   * Name of the attachment file.
   */
  name: string;
  /**
   * Size of the attachment file in bytes.
   */
  size: number;
  /**
   * MIME type of the attachment file.
   */
  type: string;
};

export type CreateTransactionRequest = {
  /**
   * Name of the transaction.
   */
  name: string;
  /**
   * Amount of the transaction.
   */
  amount: number;
  /**
   * Currency of the transaction.
   */
  currency: string;
  /**
   * Date of the transaction (ISO 8601).
   */
  date: string;
  /**
   * Bank account ID associated with the transaction.
   */
  bankAccountId: string;
  /**
   * Assigned user ID for the transaction.
   */
  assignedId?: string | undefined;
  /**
   * Category slug for the transaction.
   */
  categorySlug?: string | undefined;
  /**
   * Note for the transaction.
   */
  note?: string | undefined;
  /**
   * Whether the transaction is internal.
   */
  internal?: boolean | undefined;
  /**
   * Array of attachments for the transaction.
   */
  attachments?: Array<CreateTransactionAttachment> | undefined;
};

/** @internal */
export const CreateTransactionAttachment$inboundSchema: z.ZodType<
  CreateTransactionAttachment,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.array(z.string()),
  name: z.string(),
  size: z.number(),
  type: z.string(),
});

/** @internal */
export type CreateTransactionAttachment$Outbound = {
  path: Array<string>;
  name: string;
  size: number;
  type: string;
};

/** @internal */
export const CreateTransactionAttachment$outboundSchema: z.ZodType<
  CreateTransactionAttachment$Outbound,
  z.ZodTypeDef,
  CreateTransactionAttachment
> = z.object({
  path: z.array(z.string()),
  name: z.string(),
  size: z.number(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransactionAttachment$ {
  /** @deprecated use `CreateTransactionAttachment$inboundSchema` instead. */
  export const inboundSchema = CreateTransactionAttachment$inboundSchema;
  /** @deprecated use `CreateTransactionAttachment$outboundSchema` instead. */
  export const outboundSchema = CreateTransactionAttachment$outboundSchema;
  /** @deprecated use `CreateTransactionAttachment$Outbound` instead. */
  export type Outbound = CreateTransactionAttachment$Outbound;
}

export function createTransactionAttachmentToJSON(
  createTransactionAttachment: CreateTransactionAttachment,
): string {
  return JSON.stringify(
    CreateTransactionAttachment$outboundSchema.parse(
      createTransactionAttachment,
    ),
  );
}

export function createTransactionAttachmentFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransactionAttachment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTransactionAttachment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransactionAttachment' from JSON`,
  );
}

/** @internal */
export const CreateTransactionRequest$inboundSchema: z.ZodType<
  CreateTransactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  amount: z.number(),
  currency: z.string(),
  date: z.string(),
  bankAccountId: z.string(),
  assignedId: z.string().optional(),
  categorySlug: z.string().optional(),
  note: z.string().optional(),
  internal: z.boolean().optional(),
  attachments: z.array(z.lazy(() => CreateTransactionAttachment$inboundSchema))
    .optional(),
});

/** @internal */
export type CreateTransactionRequest$Outbound = {
  name: string;
  amount: number;
  currency: string;
  date: string;
  bankAccountId: string;
  assignedId?: string | undefined;
  categorySlug?: string | undefined;
  note?: string | undefined;
  internal?: boolean | undefined;
  attachments?: Array<CreateTransactionAttachment$Outbound> | undefined;
};

/** @internal */
export const CreateTransactionRequest$outboundSchema: z.ZodType<
  CreateTransactionRequest$Outbound,
  z.ZodTypeDef,
  CreateTransactionRequest
> = z.object({
  name: z.string(),
  amount: z.number(),
  currency: z.string(),
  date: z.string(),
  bankAccountId: z.string(),
  assignedId: z.string().optional(),
  categorySlug: z.string().optional(),
  note: z.string().optional(),
  internal: z.boolean().optional(),
  attachments: z.array(z.lazy(() => CreateTransactionAttachment$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransactionRequest$ {
  /** @deprecated use `CreateTransactionRequest$inboundSchema` instead. */
  export const inboundSchema = CreateTransactionRequest$inboundSchema;
  /** @deprecated use `CreateTransactionRequest$outboundSchema` instead. */
  export const outboundSchema = CreateTransactionRequest$outboundSchema;
  /** @deprecated use `CreateTransactionRequest$Outbound` instead. */
  export type Outbound = CreateTransactionRequest$Outbound;
}

export function createTransactionRequestToJSON(
  createTransactionRequest: CreateTransactionRequest,
): string {
  return JSON.stringify(
    CreateTransactionRequest$outboundSchema.parse(createTransactionRequest),
  );
}

export function createTransactionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransactionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTransactionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransactionRequest' from JSON`,
  );
}
