/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteBankAccountRequest = {
  id: string;
};

/**
 * A single bank account object response.
 */
export type DeleteBankAccountResponse = {
  /**
   * Unique identifier for the bank account.
   */
  id: string;
  /**
   * Name of the bank account.
   */
  name: string | null;
  /**
   * Currency code of the bank account (e.g., USD, EUR).
   */
  currency: string | null;
  /**
   * Type of the bank account (e.g., depository, credit).
   */
  type: string | null;
  /**
   * Whether the bank account is enabled.
   */
  enabled: boolean;
  /**
   * Current balance of the bank account.
   */
  balance: number | null;
  /**
   * Whether the bank account is a manual account.
   */
  manual: boolean | null;
};

/** @internal */
export const DeleteBankAccountRequest$inboundSchema: z.ZodType<
  DeleteBankAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteBankAccountRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteBankAccountRequest$outboundSchema: z.ZodType<
  DeleteBankAccountRequest$Outbound,
  z.ZodTypeDef,
  DeleteBankAccountRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteBankAccountRequest$ {
  /** @deprecated use `DeleteBankAccountRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteBankAccountRequest$inboundSchema;
  /** @deprecated use `DeleteBankAccountRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteBankAccountRequest$outboundSchema;
  /** @deprecated use `DeleteBankAccountRequest$Outbound` instead. */
  export type Outbound = DeleteBankAccountRequest$Outbound;
}

export function deleteBankAccountRequestToJSON(
  deleteBankAccountRequest: DeleteBankAccountRequest,
): string {
  return JSON.stringify(
    DeleteBankAccountRequest$outboundSchema.parse(deleteBankAccountRequest),
  );
}

export function deleteBankAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteBankAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteBankAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteBankAccountRequest' from JSON`,
  );
}

/** @internal */
export const DeleteBankAccountResponse$inboundSchema: z.ZodType<
  DeleteBankAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()),
  currency: z.nullable(z.string()),
  type: z.nullable(z.string()),
  enabled: z.boolean(),
  balance: z.nullable(z.number()),
  manual: z.nullable(z.boolean()),
});

/** @internal */
export type DeleteBankAccountResponse$Outbound = {
  id: string;
  name: string | null;
  currency: string | null;
  type: string | null;
  enabled: boolean;
  balance: number | null;
  manual: boolean | null;
};

/** @internal */
export const DeleteBankAccountResponse$outboundSchema: z.ZodType<
  DeleteBankAccountResponse$Outbound,
  z.ZodTypeDef,
  DeleteBankAccountResponse
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()),
  currency: z.nullable(z.string()),
  type: z.nullable(z.string()),
  enabled: z.boolean(),
  balance: z.nullable(z.number()),
  manual: z.nullable(z.boolean()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteBankAccountResponse$ {
  /** @deprecated use `DeleteBankAccountResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteBankAccountResponse$inboundSchema;
  /** @deprecated use `DeleteBankAccountResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteBankAccountResponse$outboundSchema;
  /** @deprecated use `DeleteBankAccountResponse$Outbound` instead. */
  export type Outbound = DeleteBankAccountResponse$Outbound;
}

export function deleteBankAccountResponseToJSON(
  deleteBankAccountResponse: DeleteBankAccountResponse,
): string {
  return JSON.stringify(
    DeleteBankAccountResponse$outboundSchema.parse(deleteBankAccountResponse),
  );
}

export function deleteBankAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteBankAccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteBankAccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteBankAccountResponse' from JSON`,
  );
}
