/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteTrackerEntryRequest = {
  id: string;
};

/**
 * Tracker entry deleted successfully.
 */
export type DeleteTrackerEntryResponse = {
  /**
   * Unique identifier of the tracker entry to delete
   */
  id: string;
};

/** @internal */
export const DeleteTrackerEntryRequest$inboundSchema: z.ZodType<
  DeleteTrackerEntryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteTrackerEntryRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteTrackerEntryRequest$outboundSchema: z.ZodType<
  DeleteTrackerEntryRequest$Outbound,
  z.ZodTypeDef,
  DeleteTrackerEntryRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTrackerEntryRequest$ {
  /** @deprecated use `DeleteTrackerEntryRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteTrackerEntryRequest$inboundSchema;
  /** @deprecated use `DeleteTrackerEntryRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteTrackerEntryRequest$outboundSchema;
  /** @deprecated use `DeleteTrackerEntryRequest$Outbound` instead. */
  export type Outbound = DeleteTrackerEntryRequest$Outbound;
}

export function deleteTrackerEntryRequestToJSON(
  deleteTrackerEntryRequest: DeleteTrackerEntryRequest,
): string {
  return JSON.stringify(
    DeleteTrackerEntryRequest$outboundSchema.parse(deleteTrackerEntryRequest),
  );
}

export function deleteTrackerEntryRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTrackerEntryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTrackerEntryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTrackerEntryRequest' from JSON`,
  );
}

/** @internal */
export const DeleteTrackerEntryResponse$inboundSchema: z.ZodType<
  DeleteTrackerEntryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteTrackerEntryResponse$Outbound = {
  id: string;
};

/** @internal */
export const DeleteTrackerEntryResponse$outboundSchema: z.ZodType<
  DeleteTrackerEntryResponse$Outbound,
  z.ZodTypeDef,
  DeleteTrackerEntryResponse
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTrackerEntryResponse$ {
  /** @deprecated use `DeleteTrackerEntryResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteTrackerEntryResponse$inboundSchema;
  /** @deprecated use `DeleteTrackerEntryResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteTrackerEntryResponse$outboundSchema;
  /** @deprecated use `DeleteTrackerEntryResponse$Outbound` instead. */
  export type Outbound = DeleteTrackerEntryResponse$Outbound;
}

export function deleteTrackerEntryResponseToJSON(
  deleteTrackerEntryResponse: DeleteTrackerEntryResponse,
): string {
  return JSON.stringify(
    DeleteTrackerEntryResponse$outboundSchema.parse(deleteTrackerEntryResponse),
  );
}

export function deleteTrackerEntryResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTrackerEntryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTrackerEntryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTrackerEntryResponse' from JSON`,
  );
}
