/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteTrackerProjectRequest = {
  id: string;
};

/**
 * Tracker project deleted successfully.
 */
export type DeleteTrackerProjectResponse = {
  /**
   * Unique identifier of the project to delete
   */
  id: string;
};

/** @internal */
export const DeleteTrackerProjectRequest$inboundSchema: z.ZodType<
  DeleteTrackerProjectRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteTrackerProjectRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteTrackerProjectRequest$outboundSchema: z.ZodType<
  DeleteTrackerProjectRequest$Outbound,
  z.ZodTypeDef,
  DeleteTrackerProjectRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTrackerProjectRequest$ {
  /** @deprecated use `DeleteTrackerProjectRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteTrackerProjectRequest$inboundSchema;
  /** @deprecated use `DeleteTrackerProjectRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteTrackerProjectRequest$outboundSchema;
  /** @deprecated use `DeleteTrackerProjectRequest$Outbound` instead. */
  export type Outbound = DeleteTrackerProjectRequest$Outbound;
}

export function deleteTrackerProjectRequestToJSON(
  deleteTrackerProjectRequest: DeleteTrackerProjectRequest,
): string {
  return JSON.stringify(
    DeleteTrackerProjectRequest$outboundSchema.parse(
      deleteTrackerProjectRequest,
    ),
  );
}

export function deleteTrackerProjectRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTrackerProjectRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTrackerProjectRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTrackerProjectRequest' from JSON`,
  );
}

/** @internal */
export const DeleteTrackerProjectResponse$inboundSchema: z.ZodType<
  DeleteTrackerProjectResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteTrackerProjectResponse$Outbound = {
  id: string;
};

/** @internal */
export const DeleteTrackerProjectResponse$outboundSchema: z.ZodType<
  DeleteTrackerProjectResponse$Outbound,
  z.ZodTypeDef,
  DeleteTrackerProjectResponse
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteTrackerProjectResponse$ {
  /** @deprecated use `DeleteTrackerProjectResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteTrackerProjectResponse$inboundSchema;
  /** @deprecated use `DeleteTrackerProjectResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteTrackerProjectResponse$outboundSchema;
  /** @deprecated use `DeleteTrackerProjectResponse$Outbound` instead. */
  export type Outbound = DeleteTrackerProjectResponse$Outbound;
}

export function deleteTrackerProjectResponseToJSON(
  deleteTrackerProjectResponse: DeleteTrackerProjectResponse,
): string {
  return JSON.stringify(
    DeleteTrackerProjectResponse$outboundSchema.parse(
      deleteTrackerProjectResponse,
    ),
  );
}

export function deleteTrackerProjectResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteTrackerProjectResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteTrackerProjectResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteTrackerProjectResponse' from JSON`,
  );
}
