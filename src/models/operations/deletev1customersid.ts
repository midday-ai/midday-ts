/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteV1CustomersIdRequest = {
  id: string;
};

export type DeleteV1CustomersIdTag = {
  /**
   * Unique identifier of the tag
   */
  id: string;
  /**
   * Display name of the tag
   */
  name: string;
};

/**
 * Customer deleted
 */
export type DeleteV1CustomersIdResponse = {
  /**
   * Unique identifier of the customer
   */
  id: string;
  /**
   * Name of the customer or organization
   */
  name: string;
  /**
   * Primary email address of the customer
   */
  email: string;
  /**
   * Primary phone number of the customer
   */
  phone: string | null;
  /**
   * Website URL of the customer
   */
  website: string | null;
  /**
   * Date and time when the customer was created in ISO 8601 format
   */
  createdAt: string;
  /**
   * Country name where the customer is located
   */
  country: string | null;
  /**
   * First line of the customer's address
   */
  addressLine1: string | null;
  /**
   * Second line of the customer's address (suite, apartment, etc.)
   */
  addressLine2: string | null;
  /**
   * City where the customer is located
   */
  city: string | null;
  /**
   * State or province where the customer is located
   */
  state: string | null;
  /**
   * ZIP or postal code of the customer's address
   */
  zip: string | null;
  /**
   * Internal notes about the customer for team reference
   */
  note: string | null;
  /**
   * VAT (Value Added Tax) number of the customer
   */
  vatNumber: string | null;
  /**
   * Country code in ISO 3166-1 alpha-2 format
   */
  countryCode: string | null;
  /**
   * Unique token for the customer (used for internal identification)
   */
  token: string;
  /**
   * Primary contact person's name at the customer organization
   */
  contact: string | null;
  /**
   * Total number of invoices created for this customer
   */
  invoiceCount: number;
  /**
   * Total number of projects associated with this customer
   */
  projectCount: number;
  /**
   * Array of tags associated with the customer for categorization
   */
  tags: Array<DeleteV1CustomersIdTag>;
};

/** @internal */
export const DeleteV1CustomersIdRequest$inboundSchema: z.ZodType<
  DeleteV1CustomersIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteV1CustomersIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteV1CustomersIdRequest$outboundSchema: z.ZodType<
  DeleteV1CustomersIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteV1CustomersIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV1CustomersIdRequest$ {
  /** @deprecated use `DeleteV1CustomersIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteV1CustomersIdRequest$inboundSchema;
  /** @deprecated use `DeleteV1CustomersIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteV1CustomersIdRequest$outboundSchema;
  /** @deprecated use `DeleteV1CustomersIdRequest$Outbound` instead. */
  export type Outbound = DeleteV1CustomersIdRequest$Outbound;
}

export function deleteV1CustomersIdRequestToJSON(
  deleteV1CustomersIdRequest: DeleteV1CustomersIdRequest,
): string {
  return JSON.stringify(
    DeleteV1CustomersIdRequest$outboundSchema.parse(deleteV1CustomersIdRequest),
  );
}

export function deleteV1CustomersIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteV1CustomersIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteV1CustomersIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteV1CustomersIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteV1CustomersIdTag$inboundSchema: z.ZodType<
  DeleteV1CustomersIdTag,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
});

/** @internal */
export type DeleteV1CustomersIdTag$Outbound = {
  id: string;
  name: string;
};

/** @internal */
export const DeleteV1CustomersIdTag$outboundSchema: z.ZodType<
  DeleteV1CustomersIdTag$Outbound,
  z.ZodTypeDef,
  DeleteV1CustomersIdTag
> = z.object({
  id: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV1CustomersIdTag$ {
  /** @deprecated use `DeleteV1CustomersIdTag$inboundSchema` instead. */
  export const inboundSchema = DeleteV1CustomersIdTag$inboundSchema;
  /** @deprecated use `DeleteV1CustomersIdTag$outboundSchema` instead. */
  export const outboundSchema = DeleteV1CustomersIdTag$outboundSchema;
  /** @deprecated use `DeleteV1CustomersIdTag$Outbound` instead. */
  export type Outbound = DeleteV1CustomersIdTag$Outbound;
}

export function deleteV1CustomersIdTagToJSON(
  deleteV1CustomersIdTag: DeleteV1CustomersIdTag,
): string {
  return JSON.stringify(
    DeleteV1CustomersIdTag$outboundSchema.parse(deleteV1CustomersIdTag),
  );
}

export function deleteV1CustomersIdTagFromJSON(
  jsonString: string,
): SafeParseResult<DeleteV1CustomersIdTag, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteV1CustomersIdTag$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteV1CustomersIdTag' from JSON`,
  );
}

/** @internal */
export const DeleteV1CustomersIdResponse$inboundSchema: z.ZodType<
  DeleteV1CustomersIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  phone: z.nullable(z.string()),
  website: z.nullable(z.string()),
  createdAt: z.string(),
  country: z.nullable(z.string()),
  addressLine1: z.nullable(z.string()),
  addressLine2: z.nullable(z.string()),
  city: z.nullable(z.string()),
  state: z.nullable(z.string()),
  zip: z.nullable(z.string()),
  note: z.nullable(z.string()),
  vatNumber: z.nullable(z.string()),
  countryCode: z.nullable(z.string()),
  token: z.string(),
  contact: z.nullable(z.string()),
  invoiceCount: z.number(),
  projectCount: z.number(),
  tags: z.array(z.lazy(() => DeleteV1CustomersIdTag$inboundSchema)),
});

/** @internal */
export type DeleteV1CustomersIdResponse$Outbound = {
  id: string;
  name: string;
  email: string;
  phone: string | null;
  website: string | null;
  createdAt: string;
  country: string | null;
  addressLine1: string | null;
  addressLine2: string | null;
  city: string | null;
  state: string | null;
  zip: string | null;
  note: string | null;
  vatNumber: string | null;
  countryCode: string | null;
  token: string;
  contact: string | null;
  invoiceCount: number;
  projectCount: number;
  tags: Array<DeleteV1CustomersIdTag$Outbound>;
};

/** @internal */
export const DeleteV1CustomersIdResponse$outboundSchema: z.ZodType<
  DeleteV1CustomersIdResponse$Outbound,
  z.ZodTypeDef,
  DeleteV1CustomersIdResponse
> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  phone: z.nullable(z.string()),
  website: z.nullable(z.string()),
  createdAt: z.string(),
  country: z.nullable(z.string()),
  addressLine1: z.nullable(z.string()),
  addressLine2: z.nullable(z.string()),
  city: z.nullable(z.string()),
  state: z.nullable(z.string()),
  zip: z.nullable(z.string()),
  note: z.nullable(z.string()),
  vatNumber: z.nullable(z.string()),
  countryCode: z.nullable(z.string()),
  token: z.string(),
  contact: z.nullable(z.string()),
  invoiceCount: z.number(),
  projectCount: z.number(),
  tags: z.array(z.lazy(() => DeleteV1CustomersIdTag$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV1CustomersIdResponse$ {
  /** @deprecated use `DeleteV1CustomersIdResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteV1CustomersIdResponse$inboundSchema;
  /** @deprecated use `DeleteV1CustomersIdResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteV1CustomersIdResponse$outboundSchema;
  /** @deprecated use `DeleteV1CustomersIdResponse$Outbound` instead. */
  export type Outbound = DeleteV1CustomersIdResponse$Outbound;
}

export function deleteV1CustomersIdResponseToJSON(
  deleteV1CustomersIdResponse: DeleteV1CustomersIdResponse,
): string {
  return JSON.stringify(
    DeleteV1CustomersIdResponse$outboundSchema.parse(
      deleteV1CustomersIdResponse,
    ),
  );
}

export function deleteV1CustomersIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteV1CustomersIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteV1CustomersIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteV1CustomersIdResponse' from JSON`,
  );
}
