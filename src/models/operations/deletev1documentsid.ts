/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteV1DocumentsIdRequest = {
  id: string;
};

/**
 * Document deleted successfully
 */
export type DeleteV1DocumentsIdResponse = {
  id: string;
};

/** @internal */
export const DeleteV1DocumentsIdRequest$inboundSchema: z.ZodType<
  DeleteV1DocumentsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteV1DocumentsIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteV1DocumentsIdRequest$outboundSchema: z.ZodType<
  DeleteV1DocumentsIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteV1DocumentsIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV1DocumentsIdRequest$ {
  /** @deprecated use `DeleteV1DocumentsIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteV1DocumentsIdRequest$inboundSchema;
  /** @deprecated use `DeleteV1DocumentsIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteV1DocumentsIdRequest$outboundSchema;
  /** @deprecated use `DeleteV1DocumentsIdRequest$Outbound` instead. */
  export type Outbound = DeleteV1DocumentsIdRequest$Outbound;
}

export function deleteV1DocumentsIdRequestToJSON(
  deleteV1DocumentsIdRequest: DeleteV1DocumentsIdRequest,
): string {
  return JSON.stringify(
    DeleteV1DocumentsIdRequest$outboundSchema.parse(deleteV1DocumentsIdRequest),
  );
}

export function deleteV1DocumentsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteV1DocumentsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteV1DocumentsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteV1DocumentsIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteV1DocumentsIdResponse$inboundSchema: z.ZodType<
  DeleteV1DocumentsIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteV1DocumentsIdResponse$Outbound = {
  id: string;
};

/** @internal */
export const DeleteV1DocumentsIdResponse$outboundSchema: z.ZodType<
  DeleteV1DocumentsIdResponse$Outbound,
  z.ZodTypeDef,
  DeleteV1DocumentsIdResponse
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV1DocumentsIdResponse$ {
  /** @deprecated use `DeleteV1DocumentsIdResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteV1DocumentsIdResponse$inboundSchema;
  /** @deprecated use `DeleteV1DocumentsIdResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteV1DocumentsIdResponse$outboundSchema;
  /** @deprecated use `DeleteV1DocumentsIdResponse$Outbound` instead. */
  export type Outbound = DeleteV1DocumentsIdResponse$Outbound;
}

export function deleteV1DocumentsIdResponseToJSON(
  deleteV1DocumentsIdResponse: DeleteV1DocumentsIdResponse,
): string {
  return JSON.stringify(
    DeleteV1DocumentsIdResponse$outboundSchema.parse(
      deleteV1DocumentsIdResponse,
    ),
  );
}

export function deleteV1DocumentsIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteV1DocumentsIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteV1DocumentsIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteV1DocumentsIdResponse' from JSON`,
  );
}
