/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteV1InvoicesIdRequest = {
  id: string;
};

/**
 * Delete a invoice by its unique identifier for the authenticated team.
 */
export type DeleteV1InvoicesIdResponse = {
  /**
   * Unique identifier for the deleted invoice
   */
  id: string;
};

/** @internal */
export const DeleteV1InvoicesIdRequest$inboundSchema: z.ZodType<
  DeleteV1InvoicesIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteV1InvoicesIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteV1InvoicesIdRequest$outboundSchema: z.ZodType<
  DeleteV1InvoicesIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteV1InvoicesIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV1InvoicesIdRequest$ {
  /** @deprecated use `DeleteV1InvoicesIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteV1InvoicesIdRequest$inboundSchema;
  /** @deprecated use `DeleteV1InvoicesIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteV1InvoicesIdRequest$outboundSchema;
  /** @deprecated use `DeleteV1InvoicesIdRequest$Outbound` instead. */
  export type Outbound = DeleteV1InvoicesIdRequest$Outbound;
}

export function deleteV1InvoicesIdRequestToJSON(
  deleteV1InvoicesIdRequest: DeleteV1InvoicesIdRequest,
): string {
  return JSON.stringify(
    DeleteV1InvoicesIdRequest$outboundSchema.parse(deleteV1InvoicesIdRequest),
  );
}

export function deleteV1InvoicesIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteV1InvoicesIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteV1InvoicesIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteV1InvoicesIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteV1InvoicesIdResponse$inboundSchema: z.ZodType<
  DeleteV1InvoicesIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteV1InvoicesIdResponse$Outbound = {
  id: string;
};

/** @internal */
export const DeleteV1InvoicesIdResponse$outboundSchema: z.ZodType<
  DeleteV1InvoicesIdResponse$Outbound,
  z.ZodTypeDef,
  DeleteV1InvoicesIdResponse
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV1InvoicesIdResponse$ {
  /** @deprecated use `DeleteV1InvoicesIdResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteV1InvoicesIdResponse$inboundSchema;
  /** @deprecated use `DeleteV1InvoicesIdResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteV1InvoicesIdResponse$outboundSchema;
  /** @deprecated use `DeleteV1InvoicesIdResponse$Outbound` instead. */
  export type Outbound = DeleteV1InvoicesIdResponse$Outbound;
}

export function deleteV1InvoicesIdResponseToJSON(
  deleteV1InvoicesIdResponse: DeleteV1InvoicesIdResponse,
): string {
  return JSON.stringify(
    DeleteV1InvoicesIdResponse$outboundSchema.parse(deleteV1InvoicesIdResponse),
  );
}

export function deleteV1InvoicesIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteV1InvoicesIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteV1InvoicesIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteV1InvoicesIdResponse' from JSON`,
  );
}
