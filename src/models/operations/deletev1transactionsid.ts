/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteV1TransactionsIdRequest = {
  id: string;
};

/**
 * Transaction deleted
 */
export type DeleteV1TransactionsIdResponse = {
  /**
   * Transaction ID (UUID).
   */
  id: string;
};

/** @internal */
export const DeleteV1TransactionsIdRequest$inboundSchema: z.ZodType<
  DeleteV1TransactionsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteV1TransactionsIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteV1TransactionsIdRequest$outboundSchema: z.ZodType<
  DeleteV1TransactionsIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteV1TransactionsIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV1TransactionsIdRequest$ {
  /** @deprecated use `DeleteV1TransactionsIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteV1TransactionsIdRequest$inboundSchema;
  /** @deprecated use `DeleteV1TransactionsIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteV1TransactionsIdRequest$outboundSchema;
  /** @deprecated use `DeleteV1TransactionsIdRequest$Outbound` instead. */
  export type Outbound = DeleteV1TransactionsIdRequest$Outbound;
}

export function deleteV1TransactionsIdRequestToJSON(
  deleteV1TransactionsIdRequest: DeleteV1TransactionsIdRequest,
): string {
  return JSON.stringify(
    DeleteV1TransactionsIdRequest$outboundSchema.parse(
      deleteV1TransactionsIdRequest,
    ),
  );
}

export function deleteV1TransactionsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteV1TransactionsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteV1TransactionsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteV1TransactionsIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteV1TransactionsIdResponse$inboundSchema: z.ZodType<
  DeleteV1TransactionsIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteV1TransactionsIdResponse$Outbound = {
  id: string;
};

/** @internal */
export const DeleteV1TransactionsIdResponse$outboundSchema: z.ZodType<
  DeleteV1TransactionsIdResponse$Outbound,
  z.ZodTypeDef,
  DeleteV1TransactionsIdResponse
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV1TransactionsIdResponse$ {
  /** @deprecated use `DeleteV1TransactionsIdResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteV1TransactionsIdResponse$inboundSchema;
  /** @deprecated use `DeleteV1TransactionsIdResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteV1TransactionsIdResponse$outboundSchema;
  /** @deprecated use `DeleteV1TransactionsIdResponse$Outbound` instead. */
  export type Outbound = DeleteV1TransactionsIdResponse$Outbound;
}

export function deleteV1TransactionsIdResponseToJSON(
  deleteV1TransactionsIdResponse: DeleteV1TransactionsIdResponse,
): string {
  return JSON.stringify(
    DeleteV1TransactionsIdResponse$outboundSchema.parse(
      deleteV1TransactionsIdResponse,
    ),
  );
}

export function deleteV1TransactionsIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteV1TransactionsIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteV1TransactionsIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteV1TransactionsIdResponse' from JSON`,
  );
}
