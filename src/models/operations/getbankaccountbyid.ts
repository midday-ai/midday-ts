/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetBankAccountByIdRequest = {
  id: string;
};

/**
 * A single bank account object response.
 */
export type GetBankAccountByIdResponse = {
  /**
   * Unique identifier for the bank account.
   */
  id: string;
  /**
   * Name of the bank account.
   */
  name: string | null;
  /**
   * Currency code of the bank account (e.g., USD, EUR).
   */
  currency: string | null;
  /**
   * Type of the bank account (e.g., depository, credit).
   */
  type: string | null;
  /**
   * Whether the bank account is enabled.
   */
  enabled: boolean;
  /**
   * Current balance of the bank account.
   */
  balance: number | null;
  /**
   * Whether the bank account is a manual account.
   */
  manual: boolean | null;
};

/** @internal */
export const GetBankAccountByIdRequest$inboundSchema: z.ZodType<
  GetBankAccountByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetBankAccountByIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetBankAccountByIdRequest$outboundSchema: z.ZodType<
  GetBankAccountByIdRequest$Outbound,
  z.ZodTypeDef,
  GetBankAccountByIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBankAccountByIdRequest$ {
  /** @deprecated use `GetBankAccountByIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetBankAccountByIdRequest$inboundSchema;
  /** @deprecated use `GetBankAccountByIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetBankAccountByIdRequest$outboundSchema;
  /** @deprecated use `GetBankAccountByIdRequest$Outbound` instead. */
  export type Outbound = GetBankAccountByIdRequest$Outbound;
}

export function getBankAccountByIdRequestToJSON(
  getBankAccountByIdRequest: GetBankAccountByIdRequest,
): string {
  return JSON.stringify(
    GetBankAccountByIdRequest$outboundSchema.parse(getBankAccountByIdRequest),
  );
}

export function getBankAccountByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBankAccountByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBankAccountByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBankAccountByIdRequest' from JSON`,
  );
}

/** @internal */
export const GetBankAccountByIdResponse$inboundSchema: z.ZodType<
  GetBankAccountByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()),
  currency: z.nullable(z.string()),
  type: z.nullable(z.string()),
  enabled: z.boolean(),
  balance: z.nullable(z.number()),
  manual: z.nullable(z.boolean()),
});

/** @internal */
export type GetBankAccountByIdResponse$Outbound = {
  id: string;
  name: string | null;
  currency: string | null;
  type: string | null;
  enabled: boolean;
  balance: number | null;
  manual: boolean | null;
};

/** @internal */
export const GetBankAccountByIdResponse$outboundSchema: z.ZodType<
  GetBankAccountByIdResponse$Outbound,
  z.ZodTypeDef,
  GetBankAccountByIdResponse
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()),
  currency: z.nullable(z.string()),
  type: z.nullable(z.string()),
  enabled: z.boolean(),
  balance: z.nullable(z.number()),
  manual: z.nullable(z.boolean()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBankAccountByIdResponse$ {
  /** @deprecated use `GetBankAccountByIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetBankAccountByIdResponse$inboundSchema;
  /** @deprecated use `GetBankAccountByIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetBankAccountByIdResponse$outboundSchema;
  /** @deprecated use `GetBankAccountByIdResponse$Outbound` instead. */
  export type Outbound = GetBankAccountByIdResponse$Outbound;
}

export function getBankAccountByIdResponseToJSON(
  getBankAccountByIdResponse: GetBankAccountByIdResponse,
): string {
  return JSON.stringify(
    GetBankAccountByIdResponse$outboundSchema.parse(getBankAccountByIdResponse),
  );
}

export function getBankAccountByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetBankAccountByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBankAccountByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBankAccountByIdResponse' from JSON`,
  );
}
