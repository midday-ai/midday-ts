/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCurrentTimerRequest = {
  assignedId?: string | null | undefined;
};

/**
 * User information for the person who created this tracker entry
 */
export type GetCurrentTimerUser = {
  /**
   * Unique identifier of the user
   */
  id: string;
  /**
   * Full name of the user
   */
  fullName: string;
  /**
   * URL to the user's avatar image
   */
  avatarUrl: string;
};

/**
 * Customer information associated with the project
 */
export type GetCurrentTimerCustomer = {
  /**
   * Unique identifier of the customer
   */
  id: string;
  /**
   * Name of the customer or organization
   */
  name: string;
};

/**
 * Project information associated with this tracker entry
 */
export type GetCurrentTimerProject = {
  /**
   * Unique identifier of the project
   */
  id: string;
  /**
   * Date and time when the project was created in ISO 8601 format
   */
  createdAt: string;
  /**
   * Default hourly rate for the project
   */
  rate: number | null;
  /**
   * Currency code for the project rate in ISO 4217 format
   */
  currency: string | null;
  /**
   * Current status of the project
   */
  status: string;
  /**
   * Description of the project
   */
  description: string | null;
  /**
   * Name of the project
   */
  name: string;
  /**
   * Whether the project is billable to the customer
   */
  billable: boolean | null;
  /**
   * Estimated total hours for the project
   */
  estimate: number | null;
  /**
   * Customer information associated with the project
   */
  customer: GetCurrentTimerCustomer | null;
};

export type GetCurrentTimerData = {
  /**
   * Unique identifier of the tracker entry
   */
  id: string;
  /**
   * Date and time when the tracker entry was created in ISO 8601 format
   */
  createdAt: string;
  /**
   * Duration of the timer entry in seconds. -1 indicates running, null for paused, positive number for completed
   */
  duration: number | null;
  /**
   * Start time of the tracker entry in ISO 8601 format
   */
  start: string;
  /**
   * Stop time of the tracker entry in ISO 8601 format
   */
  stop: string;
  /**
   * Unique identifier of the team that owns this tracker entry
   */
  teamId: string;
  /**
   * Description or notes for the tracker entry
   */
  description: string | null;
  /**
   * Hourly rate applied to this tracker entry
   */
  rate: number | null;
  /**
   * Currency code for the rate in ISO 4217 format
   */
  currency: string | null;
  /**
   * Whether this tracker entry has been billed to the customer
   */
  billed: boolean;
  /**
   * Date of the tracker entry in YYYY-MM-DD format
   */
  date: string;
  /**
   * User information for the person who created this tracker entry
   */
  user: GetCurrentTimerUser;
  /**
   * Project information associated with this tracker entry
   */
  project: GetCurrentTimerProject;
};

/**
 * Current timer retrieved successfully.
 */
export type GetCurrentTimerResponse = {
  data: GetCurrentTimerData | null;
};

/** @internal */
export const GetCurrentTimerRequest$inboundSchema: z.ZodType<
  GetCurrentTimerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  assignedId: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetCurrentTimerRequest$Outbound = {
  assignedId?: string | null | undefined;
};

/** @internal */
export const GetCurrentTimerRequest$outboundSchema: z.ZodType<
  GetCurrentTimerRequest$Outbound,
  z.ZodTypeDef,
  GetCurrentTimerRequest
> = z.object({
  assignedId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCurrentTimerRequest$ {
  /** @deprecated use `GetCurrentTimerRequest$inboundSchema` instead. */
  export const inboundSchema = GetCurrentTimerRequest$inboundSchema;
  /** @deprecated use `GetCurrentTimerRequest$outboundSchema` instead. */
  export const outboundSchema = GetCurrentTimerRequest$outboundSchema;
  /** @deprecated use `GetCurrentTimerRequest$Outbound` instead. */
  export type Outbound = GetCurrentTimerRequest$Outbound;
}

export function getCurrentTimerRequestToJSON(
  getCurrentTimerRequest: GetCurrentTimerRequest,
): string {
  return JSON.stringify(
    GetCurrentTimerRequest$outboundSchema.parse(getCurrentTimerRequest),
  );
}

export function getCurrentTimerRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCurrentTimerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCurrentTimerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCurrentTimerRequest' from JSON`,
  );
}

/** @internal */
export const GetCurrentTimerUser$inboundSchema: z.ZodType<
  GetCurrentTimerUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  fullName: z.string(),
  avatarUrl: z.string(),
});

/** @internal */
export type GetCurrentTimerUser$Outbound = {
  id: string;
  fullName: string;
  avatarUrl: string;
};

/** @internal */
export const GetCurrentTimerUser$outboundSchema: z.ZodType<
  GetCurrentTimerUser$Outbound,
  z.ZodTypeDef,
  GetCurrentTimerUser
> = z.object({
  id: z.string(),
  fullName: z.string(),
  avatarUrl: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCurrentTimerUser$ {
  /** @deprecated use `GetCurrentTimerUser$inboundSchema` instead. */
  export const inboundSchema = GetCurrentTimerUser$inboundSchema;
  /** @deprecated use `GetCurrentTimerUser$outboundSchema` instead. */
  export const outboundSchema = GetCurrentTimerUser$outboundSchema;
  /** @deprecated use `GetCurrentTimerUser$Outbound` instead. */
  export type Outbound = GetCurrentTimerUser$Outbound;
}

export function getCurrentTimerUserToJSON(
  getCurrentTimerUser: GetCurrentTimerUser,
): string {
  return JSON.stringify(
    GetCurrentTimerUser$outboundSchema.parse(getCurrentTimerUser),
  );
}

export function getCurrentTimerUserFromJSON(
  jsonString: string,
): SafeParseResult<GetCurrentTimerUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCurrentTimerUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCurrentTimerUser' from JSON`,
  );
}

/** @internal */
export const GetCurrentTimerCustomer$inboundSchema: z.ZodType<
  GetCurrentTimerCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
});

/** @internal */
export type GetCurrentTimerCustomer$Outbound = {
  id: string;
  name: string;
};

/** @internal */
export const GetCurrentTimerCustomer$outboundSchema: z.ZodType<
  GetCurrentTimerCustomer$Outbound,
  z.ZodTypeDef,
  GetCurrentTimerCustomer
> = z.object({
  id: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCurrentTimerCustomer$ {
  /** @deprecated use `GetCurrentTimerCustomer$inboundSchema` instead. */
  export const inboundSchema = GetCurrentTimerCustomer$inboundSchema;
  /** @deprecated use `GetCurrentTimerCustomer$outboundSchema` instead. */
  export const outboundSchema = GetCurrentTimerCustomer$outboundSchema;
  /** @deprecated use `GetCurrentTimerCustomer$Outbound` instead. */
  export type Outbound = GetCurrentTimerCustomer$Outbound;
}

export function getCurrentTimerCustomerToJSON(
  getCurrentTimerCustomer: GetCurrentTimerCustomer,
): string {
  return JSON.stringify(
    GetCurrentTimerCustomer$outboundSchema.parse(getCurrentTimerCustomer),
  );
}

export function getCurrentTimerCustomerFromJSON(
  jsonString: string,
): SafeParseResult<GetCurrentTimerCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCurrentTimerCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCurrentTimerCustomer' from JSON`,
  );
}

/** @internal */
export const GetCurrentTimerProject$inboundSchema: z.ZodType<
  GetCurrentTimerProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  rate: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  status: z.string(),
  description: z.nullable(z.string()),
  name: z.string(),
  billable: z.nullable(z.boolean()),
  estimate: z.nullable(z.number()),
  customer: z.nullable(z.lazy(() => GetCurrentTimerCustomer$inboundSchema)),
});

/** @internal */
export type GetCurrentTimerProject$Outbound = {
  id: string;
  createdAt: string;
  rate: number | null;
  currency: string | null;
  status: string;
  description: string | null;
  name: string;
  billable: boolean | null;
  estimate: number | null;
  customer: GetCurrentTimerCustomer$Outbound | null;
};

/** @internal */
export const GetCurrentTimerProject$outboundSchema: z.ZodType<
  GetCurrentTimerProject$Outbound,
  z.ZodTypeDef,
  GetCurrentTimerProject
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  rate: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  status: z.string(),
  description: z.nullable(z.string()),
  name: z.string(),
  billable: z.nullable(z.boolean()),
  estimate: z.nullable(z.number()),
  customer: z.nullable(z.lazy(() => GetCurrentTimerCustomer$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCurrentTimerProject$ {
  /** @deprecated use `GetCurrentTimerProject$inboundSchema` instead. */
  export const inboundSchema = GetCurrentTimerProject$inboundSchema;
  /** @deprecated use `GetCurrentTimerProject$outboundSchema` instead. */
  export const outboundSchema = GetCurrentTimerProject$outboundSchema;
  /** @deprecated use `GetCurrentTimerProject$Outbound` instead. */
  export type Outbound = GetCurrentTimerProject$Outbound;
}

export function getCurrentTimerProjectToJSON(
  getCurrentTimerProject: GetCurrentTimerProject,
): string {
  return JSON.stringify(
    GetCurrentTimerProject$outboundSchema.parse(getCurrentTimerProject),
  );
}

export function getCurrentTimerProjectFromJSON(
  jsonString: string,
): SafeParseResult<GetCurrentTimerProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCurrentTimerProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCurrentTimerProject' from JSON`,
  );
}

/** @internal */
export const GetCurrentTimerData$inboundSchema: z.ZodType<
  GetCurrentTimerData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  duration: z.nullable(z.number()),
  start: z.string(),
  stop: z.string(),
  teamId: z.string(),
  description: z.nullable(z.string()),
  rate: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  billed: z.boolean(),
  date: z.string(),
  user: z.lazy(() => GetCurrentTimerUser$inboundSchema),
  project: z.lazy(() => GetCurrentTimerProject$inboundSchema),
});

/** @internal */
export type GetCurrentTimerData$Outbound = {
  id: string;
  createdAt: string;
  duration: number | null;
  start: string;
  stop: string;
  teamId: string;
  description: string | null;
  rate: number | null;
  currency: string | null;
  billed: boolean;
  date: string;
  user: GetCurrentTimerUser$Outbound;
  project: GetCurrentTimerProject$Outbound;
};

/** @internal */
export const GetCurrentTimerData$outboundSchema: z.ZodType<
  GetCurrentTimerData$Outbound,
  z.ZodTypeDef,
  GetCurrentTimerData
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  duration: z.nullable(z.number()),
  start: z.string(),
  stop: z.string(),
  teamId: z.string(),
  description: z.nullable(z.string()),
  rate: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  billed: z.boolean(),
  date: z.string(),
  user: z.lazy(() => GetCurrentTimerUser$outboundSchema),
  project: z.lazy(() => GetCurrentTimerProject$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCurrentTimerData$ {
  /** @deprecated use `GetCurrentTimerData$inboundSchema` instead. */
  export const inboundSchema = GetCurrentTimerData$inboundSchema;
  /** @deprecated use `GetCurrentTimerData$outboundSchema` instead. */
  export const outboundSchema = GetCurrentTimerData$outboundSchema;
  /** @deprecated use `GetCurrentTimerData$Outbound` instead. */
  export type Outbound = GetCurrentTimerData$Outbound;
}

export function getCurrentTimerDataToJSON(
  getCurrentTimerData: GetCurrentTimerData,
): string {
  return JSON.stringify(
    GetCurrentTimerData$outboundSchema.parse(getCurrentTimerData),
  );
}

export function getCurrentTimerDataFromJSON(
  jsonString: string,
): SafeParseResult<GetCurrentTimerData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCurrentTimerData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCurrentTimerData' from JSON`,
  );
}

/** @internal */
export const GetCurrentTimerResponse$inboundSchema: z.ZodType<
  GetCurrentTimerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.lazy(() => GetCurrentTimerData$inboundSchema)),
});

/** @internal */
export type GetCurrentTimerResponse$Outbound = {
  data: GetCurrentTimerData$Outbound | null;
};

/** @internal */
export const GetCurrentTimerResponse$outboundSchema: z.ZodType<
  GetCurrentTimerResponse$Outbound,
  z.ZodTypeDef,
  GetCurrentTimerResponse
> = z.object({
  data: z.nullable(z.lazy(() => GetCurrentTimerData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCurrentTimerResponse$ {
  /** @deprecated use `GetCurrentTimerResponse$inboundSchema` instead. */
  export const inboundSchema = GetCurrentTimerResponse$inboundSchema;
  /** @deprecated use `GetCurrentTimerResponse$outboundSchema` instead. */
  export const outboundSchema = GetCurrentTimerResponse$outboundSchema;
  /** @deprecated use `GetCurrentTimerResponse$Outbound` instead. */
  export type Outbound = GetCurrentTimerResponse$Outbound;
}

export function getCurrentTimerResponseToJSON(
  getCurrentTimerResponse: GetCurrentTimerResponse,
): string {
  return JSON.stringify(
    GetCurrentTimerResponse$outboundSchema.parse(getCurrentTimerResponse),
  );
}

export function getCurrentTimerResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCurrentTimerResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCurrentTimerResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCurrentTimerResponse' from JSON`,
  );
}
