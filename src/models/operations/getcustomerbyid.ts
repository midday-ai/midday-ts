/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCustomerByIdRequest = {
  id: string;
};

export type GetCustomerByIdTag = {
  /**
   * Unique identifier of the tag
   */
  id: string;
  /**
   * Display name of the tag
   */
  name: string;
};

/**
 * Retrieve a customer by ID for the authenticated team.
 */
export type GetCustomerByIdResponse = {
  /**
   * Unique identifier of the customer
   */
  id: string;
  /**
   * Name of the customer or organization
   */
  name: string;
  /**
   * Primary email address of the customer
   */
  email: string;
  /**
   * Billing email address of the customer
   */
  billingEmail: string | null;
  /**
   * Primary phone number of the customer
   */
  phone: string | null;
  /**
   * Website URL of the customer
   */
  website: string | null;
  /**
   * Date and time when the customer was created in ISO 8601 format
   */
  createdAt: string;
  /**
   * Country name where the customer is located
   */
  country: string | null;
  /**
   * First line of the customer's address
   */
  addressLine1: string | null;
  /**
   * Second line of the customer's address (suite, apartment, etc.)
   */
  addressLine2: string | null;
  /**
   * City where the customer is located
   */
  city: string | null;
  /**
   * State or province where the customer is located
   */
  state: string | null;
  /**
   * ZIP or postal code of the customer's address
   */
  zip: string | null;
  /**
   * Internal notes about the customer for team reference
   */
  note: string | null;
  /**
   * VAT (Value Added Tax) number of the customer
   */
  vatNumber: string | null;
  /**
   * Country code in ISO 3166-1 alpha-2 format
   */
  countryCode: string | null;
  /**
   * Unique token for the customer (used for internal identification)
   */
  token: string;
  /**
   * Primary contact person's name at the customer organization
   */
  contact: string | null;
  /**
   * Total number of invoices created for this customer
   */
  invoiceCount: number;
  /**
   * Total number of projects associated with this customer
   */
  projectCount: number;
  /**
   * Array of tags associated with the customer for categorization
   */
  tags: Array<GetCustomerByIdTag>;
};

/** @internal */
export const GetCustomerByIdRequest$inboundSchema: z.ZodType<
  GetCustomerByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetCustomerByIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetCustomerByIdRequest$outboundSchema: z.ZodType<
  GetCustomerByIdRequest$Outbound,
  z.ZodTypeDef,
  GetCustomerByIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomerByIdRequest$ {
  /** @deprecated use `GetCustomerByIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetCustomerByIdRequest$inboundSchema;
  /** @deprecated use `GetCustomerByIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetCustomerByIdRequest$outboundSchema;
  /** @deprecated use `GetCustomerByIdRequest$Outbound` instead. */
  export type Outbound = GetCustomerByIdRequest$Outbound;
}

export function getCustomerByIdRequestToJSON(
  getCustomerByIdRequest: GetCustomerByIdRequest,
): string {
  return JSON.stringify(
    GetCustomerByIdRequest$outboundSchema.parse(getCustomerByIdRequest),
  );
}

export function getCustomerByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomerByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCustomerByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomerByIdRequest' from JSON`,
  );
}

/** @internal */
export const GetCustomerByIdTag$inboundSchema: z.ZodType<
  GetCustomerByIdTag,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
});

/** @internal */
export type GetCustomerByIdTag$Outbound = {
  id: string;
  name: string;
};

/** @internal */
export const GetCustomerByIdTag$outboundSchema: z.ZodType<
  GetCustomerByIdTag$Outbound,
  z.ZodTypeDef,
  GetCustomerByIdTag
> = z.object({
  id: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomerByIdTag$ {
  /** @deprecated use `GetCustomerByIdTag$inboundSchema` instead. */
  export const inboundSchema = GetCustomerByIdTag$inboundSchema;
  /** @deprecated use `GetCustomerByIdTag$outboundSchema` instead. */
  export const outboundSchema = GetCustomerByIdTag$outboundSchema;
  /** @deprecated use `GetCustomerByIdTag$Outbound` instead. */
  export type Outbound = GetCustomerByIdTag$Outbound;
}

export function getCustomerByIdTagToJSON(
  getCustomerByIdTag: GetCustomerByIdTag,
): string {
  return JSON.stringify(
    GetCustomerByIdTag$outboundSchema.parse(getCustomerByIdTag),
  );
}

export function getCustomerByIdTagFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomerByIdTag, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCustomerByIdTag$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomerByIdTag' from JSON`,
  );
}

/** @internal */
export const GetCustomerByIdResponse$inboundSchema: z.ZodType<
  GetCustomerByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  billingEmail: z.nullable(z.string()),
  phone: z.nullable(z.string()),
  website: z.nullable(z.string()),
  createdAt: z.string(),
  country: z.nullable(z.string()),
  addressLine1: z.nullable(z.string()),
  addressLine2: z.nullable(z.string()),
  city: z.nullable(z.string()),
  state: z.nullable(z.string()),
  zip: z.nullable(z.string()),
  note: z.nullable(z.string()),
  vatNumber: z.nullable(z.string()),
  countryCode: z.nullable(z.string()),
  token: z.string(),
  contact: z.nullable(z.string()),
  invoiceCount: z.number(),
  projectCount: z.number(),
  tags: z.array(z.lazy(() => GetCustomerByIdTag$inboundSchema)),
});

/** @internal */
export type GetCustomerByIdResponse$Outbound = {
  id: string;
  name: string;
  email: string;
  billingEmail: string | null;
  phone: string | null;
  website: string | null;
  createdAt: string;
  country: string | null;
  addressLine1: string | null;
  addressLine2: string | null;
  city: string | null;
  state: string | null;
  zip: string | null;
  note: string | null;
  vatNumber: string | null;
  countryCode: string | null;
  token: string;
  contact: string | null;
  invoiceCount: number;
  projectCount: number;
  tags: Array<GetCustomerByIdTag$Outbound>;
};

/** @internal */
export const GetCustomerByIdResponse$outboundSchema: z.ZodType<
  GetCustomerByIdResponse$Outbound,
  z.ZodTypeDef,
  GetCustomerByIdResponse
> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  billingEmail: z.nullable(z.string()),
  phone: z.nullable(z.string()),
  website: z.nullable(z.string()),
  createdAt: z.string(),
  country: z.nullable(z.string()),
  addressLine1: z.nullable(z.string()),
  addressLine2: z.nullable(z.string()),
  city: z.nullable(z.string()),
  state: z.nullable(z.string()),
  zip: z.nullable(z.string()),
  note: z.nullable(z.string()),
  vatNumber: z.nullable(z.string()),
  countryCode: z.nullable(z.string()),
  token: z.string(),
  contact: z.nullable(z.string()),
  invoiceCount: z.number(),
  projectCount: z.number(),
  tags: z.array(z.lazy(() => GetCustomerByIdTag$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCustomerByIdResponse$ {
  /** @deprecated use `GetCustomerByIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetCustomerByIdResponse$inboundSchema;
  /** @deprecated use `GetCustomerByIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetCustomerByIdResponse$outboundSchema;
  /** @deprecated use `GetCustomerByIdResponse$Outbound` instead. */
  export type Outbound = GetCustomerByIdResponse$Outbound;
}

export function getCustomerByIdResponseToJSON(
  getCustomerByIdResponse: GetCustomerByIdResponse,
): string {
  return JSON.stringify(
    GetCustomerByIdResponse$outboundSchema.parse(getCustomerByIdResponse),
  );
}

export function getCustomerByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCustomerByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCustomerByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCustomerByIdResponse' from JSON`,
  );
}
