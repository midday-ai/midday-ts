/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetDocumentPreSignedUrlRequest = {
  id: string;
  download?: boolean | null | undefined;
};

/**
 * Pre-signed URL generated successfully
 */
export type GetDocumentPreSignedUrlResponse = {
  /**
   * Pre-signed URL for accessing the document, valid for 60 seconds
   */
  url: string;
  /**
   * ISO 8601 timestamp when the URL expires
   */
  expiresAt: Date;
  /**
   * Original filename of the document
   */
  fileName: string | null;
};

/** @internal */
export const GetDocumentPreSignedUrlRequest$inboundSchema: z.ZodType<
  GetDocumentPreSignedUrlRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  download: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetDocumentPreSignedUrlRequest$Outbound = {
  id: string;
  download?: boolean | null | undefined;
};

/** @internal */
export const GetDocumentPreSignedUrlRequest$outboundSchema: z.ZodType<
  GetDocumentPreSignedUrlRequest$Outbound,
  z.ZodTypeDef,
  GetDocumentPreSignedUrlRequest
> = z.object({
  id: z.string(),
  download: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDocumentPreSignedUrlRequest$ {
  /** @deprecated use `GetDocumentPreSignedUrlRequest$inboundSchema` instead. */
  export const inboundSchema = GetDocumentPreSignedUrlRequest$inboundSchema;
  /** @deprecated use `GetDocumentPreSignedUrlRequest$outboundSchema` instead. */
  export const outboundSchema = GetDocumentPreSignedUrlRequest$outboundSchema;
  /** @deprecated use `GetDocumentPreSignedUrlRequest$Outbound` instead. */
  export type Outbound = GetDocumentPreSignedUrlRequest$Outbound;
}

export function getDocumentPreSignedUrlRequestToJSON(
  getDocumentPreSignedUrlRequest: GetDocumentPreSignedUrlRequest,
): string {
  return JSON.stringify(
    GetDocumentPreSignedUrlRequest$outboundSchema.parse(
      getDocumentPreSignedUrlRequest,
    ),
  );
}

export function getDocumentPreSignedUrlRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDocumentPreSignedUrlRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDocumentPreSignedUrlRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDocumentPreSignedUrlRequest' from JSON`,
  );
}

/** @internal */
export const GetDocumentPreSignedUrlResponse$inboundSchema: z.ZodType<
  GetDocumentPreSignedUrlResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  fileName: z.nullable(z.string()),
});

/** @internal */
export type GetDocumentPreSignedUrlResponse$Outbound = {
  url: string;
  expiresAt: string;
  fileName: string | null;
};

/** @internal */
export const GetDocumentPreSignedUrlResponse$outboundSchema: z.ZodType<
  GetDocumentPreSignedUrlResponse$Outbound,
  z.ZodTypeDef,
  GetDocumentPreSignedUrlResponse
> = z.object({
  url: z.string(),
  expiresAt: z.date().transform(v => v.toISOString()),
  fileName: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDocumentPreSignedUrlResponse$ {
  /** @deprecated use `GetDocumentPreSignedUrlResponse$inboundSchema` instead. */
  export const inboundSchema = GetDocumentPreSignedUrlResponse$inboundSchema;
  /** @deprecated use `GetDocumentPreSignedUrlResponse$outboundSchema` instead. */
  export const outboundSchema = GetDocumentPreSignedUrlResponse$outboundSchema;
  /** @deprecated use `GetDocumentPreSignedUrlResponse$Outbound` instead. */
  export type Outbound = GetDocumentPreSignedUrlResponse$Outbound;
}

export function getDocumentPreSignedUrlResponseToJSON(
  getDocumentPreSignedUrlResponse: GetDocumentPreSignedUrlResponse,
): string {
  return JSON.stringify(
    GetDocumentPreSignedUrlResponse$outboundSchema.parse(
      getDocumentPreSignedUrlResponse,
    ),
  );
}

export function getDocumentPreSignedUrlResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetDocumentPreSignedUrlResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDocumentPreSignedUrlResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDocumentPreSignedUrlResponse' from JSON`,
  );
}
