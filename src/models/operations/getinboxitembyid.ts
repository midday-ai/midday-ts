/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetInboxItemByIdRequest = {
  id: string;
};

/**
 * Matched transaction for this inbox item, if any
 */
export type GetInboxItemByIdTransaction = {
  /**
   * Transaction ID (UUID)
   */
  id: string;
  /**
   * Transaction amount
   */
  amount: number;
  /**
   * Transaction currency (ISO 4217)
   */
  currency: string;
  /**
   * Transaction name or payee
   */
  name: string;
  /**
   * Transaction date (ISO 8601)
   */
  date: string;
};

/**
 * Inbox item object
 */
export type GetInboxItemByIdResponse = {
  /**
   * Inbox item ID (UUID)
   */
  id: string;
  /**
   * Original file name of the uploaded document
   */
  fileName: string;
  /**
   * Path segments to the file in storage
   */
  filePath: Array<string>;
  /**
   * Display name for the inbox item
   */
  displayName: string;
  /**
   * Amount detected or entered for the inbox item
   */
  amount: number | null;
  /**
   * Currency code (ISO 4217) for the amount
   */
  currency: string | null;
  /**
   * MIME type of the uploaded file
   */
  contentType: string | null;
  /**
   * Date associated with the inbox item (ISO 8601)
   */
  date: string | null;
  /**
   * Status of the inbox item
   */
  status: string;
  /**
   * Date and time when the inbox item was created (ISO 8601)
   */
  createdAt: string;
  /**
   * Website associated with the inbox item, if any
   */
  website: string | null;
  /**
   * Description or notes for the inbox item
   */
  description: string | null;
  /**
   * Matched transaction for this inbox item, if any
   */
  transaction: GetInboxItemByIdTransaction | null;
};

/** @internal */
export const GetInboxItemByIdRequest$inboundSchema: z.ZodType<
  GetInboxItemByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetInboxItemByIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetInboxItemByIdRequest$outboundSchema: z.ZodType<
  GetInboxItemByIdRequest$Outbound,
  z.ZodTypeDef,
  GetInboxItemByIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInboxItemByIdRequest$ {
  /** @deprecated use `GetInboxItemByIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetInboxItemByIdRequest$inboundSchema;
  /** @deprecated use `GetInboxItemByIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetInboxItemByIdRequest$outboundSchema;
  /** @deprecated use `GetInboxItemByIdRequest$Outbound` instead. */
  export type Outbound = GetInboxItemByIdRequest$Outbound;
}

export function getInboxItemByIdRequestToJSON(
  getInboxItemByIdRequest: GetInboxItemByIdRequest,
): string {
  return JSON.stringify(
    GetInboxItemByIdRequest$outboundSchema.parse(getInboxItemByIdRequest),
  );
}

export function getInboxItemByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetInboxItemByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInboxItemByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInboxItemByIdRequest' from JSON`,
  );
}

/** @internal */
export const GetInboxItemByIdTransaction$inboundSchema: z.ZodType<
  GetInboxItemByIdTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  amount: z.number(),
  currency: z.string(),
  name: z.string(),
  date: z.string(),
});

/** @internal */
export type GetInboxItemByIdTransaction$Outbound = {
  id: string;
  amount: number;
  currency: string;
  name: string;
  date: string;
};

/** @internal */
export const GetInboxItemByIdTransaction$outboundSchema: z.ZodType<
  GetInboxItemByIdTransaction$Outbound,
  z.ZodTypeDef,
  GetInboxItemByIdTransaction
> = z.object({
  id: z.string(),
  amount: z.number(),
  currency: z.string(),
  name: z.string(),
  date: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInboxItemByIdTransaction$ {
  /** @deprecated use `GetInboxItemByIdTransaction$inboundSchema` instead. */
  export const inboundSchema = GetInboxItemByIdTransaction$inboundSchema;
  /** @deprecated use `GetInboxItemByIdTransaction$outboundSchema` instead. */
  export const outboundSchema = GetInboxItemByIdTransaction$outboundSchema;
  /** @deprecated use `GetInboxItemByIdTransaction$Outbound` instead. */
  export type Outbound = GetInboxItemByIdTransaction$Outbound;
}

export function getInboxItemByIdTransactionToJSON(
  getInboxItemByIdTransaction: GetInboxItemByIdTransaction,
): string {
  return JSON.stringify(
    GetInboxItemByIdTransaction$outboundSchema.parse(
      getInboxItemByIdTransaction,
    ),
  );
}

export function getInboxItemByIdTransactionFromJSON(
  jsonString: string,
): SafeParseResult<GetInboxItemByIdTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInboxItemByIdTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInboxItemByIdTransaction' from JSON`,
  );
}

/** @internal */
export const GetInboxItemByIdResponse$inboundSchema: z.ZodType<
  GetInboxItemByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  fileName: z.string(),
  filePath: z.array(z.string()),
  displayName: z.string(),
  amount: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  contentType: z.nullable(z.string()),
  date: z.nullable(z.string()),
  status: z.string(),
  createdAt: z.string(),
  website: z.nullable(z.string()),
  description: z.nullable(z.string()),
  transaction: z.nullable(
    z.lazy(() => GetInboxItemByIdTransaction$inboundSchema),
  ),
});

/** @internal */
export type GetInboxItemByIdResponse$Outbound = {
  id: string;
  fileName: string;
  filePath: Array<string>;
  displayName: string;
  amount: number | null;
  currency: string | null;
  contentType: string | null;
  date: string | null;
  status: string;
  createdAt: string;
  website: string | null;
  description: string | null;
  transaction: GetInboxItemByIdTransaction$Outbound | null;
};

/** @internal */
export const GetInboxItemByIdResponse$outboundSchema: z.ZodType<
  GetInboxItemByIdResponse$Outbound,
  z.ZodTypeDef,
  GetInboxItemByIdResponse
> = z.object({
  id: z.string(),
  fileName: z.string(),
  filePath: z.array(z.string()),
  displayName: z.string(),
  amount: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  contentType: z.nullable(z.string()),
  date: z.nullable(z.string()),
  status: z.string(),
  createdAt: z.string(),
  website: z.nullable(z.string()),
  description: z.nullable(z.string()),
  transaction: z.nullable(
    z.lazy(() => GetInboxItemByIdTransaction$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInboxItemByIdResponse$ {
  /** @deprecated use `GetInboxItemByIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetInboxItemByIdResponse$inboundSchema;
  /** @deprecated use `GetInboxItemByIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetInboxItemByIdResponse$outboundSchema;
  /** @deprecated use `GetInboxItemByIdResponse$Outbound` instead. */
  export type Outbound = GetInboxItemByIdResponse$Outbound;
}

export function getInboxItemByIdResponseToJSON(
  getInboxItemByIdResponse: GetInboxItemByIdResponse,
): string {
  return JSON.stringify(
    GetInboxItemByIdResponse$outboundSchema.parse(getInboxItemByIdResponse),
  );
}

export function getInboxItemByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetInboxItemByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInboxItemByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInboxItemByIdResponse' from JSON`,
  );
}
