/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetInboxPreSignedUrlRequest = {
  id: string;
  download?: boolean | null | undefined;
};

/**
 * Pre-signed URL generated successfully
 */
export type GetInboxPreSignedUrlResponse = {
  /**
   * Pre-signed URL for accessing the inbox attachment, valid for 60 seconds
   */
  url: string;
  /**
   * ISO 8601 timestamp when the URL expires
   */
  expiresAt: Date;
  /**
   * Original filename of the inbox attachment
   */
  fileName: string | null;
};

/** @internal */
export const GetInboxPreSignedUrlRequest$inboundSchema: z.ZodType<
  GetInboxPreSignedUrlRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  download: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type GetInboxPreSignedUrlRequest$Outbound = {
  id: string;
  download?: boolean | null | undefined;
};

/** @internal */
export const GetInboxPreSignedUrlRequest$outboundSchema: z.ZodType<
  GetInboxPreSignedUrlRequest$Outbound,
  z.ZodTypeDef,
  GetInboxPreSignedUrlRequest
> = z.object({
  id: z.string(),
  download: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInboxPreSignedUrlRequest$ {
  /** @deprecated use `GetInboxPreSignedUrlRequest$inboundSchema` instead. */
  export const inboundSchema = GetInboxPreSignedUrlRequest$inboundSchema;
  /** @deprecated use `GetInboxPreSignedUrlRequest$outboundSchema` instead. */
  export const outboundSchema = GetInboxPreSignedUrlRequest$outboundSchema;
  /** @deprecated use `GetInboxPreSignedUrlRequest$Outbound` instead. */
  export type Outbound = GetInboxPreSignedUrlRequest$Outbound;
}

export function getInboxPreSignedUrlRequestToJSON(
  getInboxPreSignedUrlRequest: GetInboxPreSignedUrlRequest,
): string {
  return JSON.stringify(
    GetInboxPreSignedUrlRequest$outboundSchema.parse(
      getInboxPreSignedUrlRequest,
    ),
  );
}

export function getInboxPreSignedUrlRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetInboxPreSignedUrlRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInboxPreSignedUrlRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInboxPreSignedUrlRequest' from JSON`,
  );
}

/** @internal */
export const GetInboxPreSignedUrlResponse$inboundSchema: z.ZodType<
  GetInboxPreSignedUrlResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  expiresAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  fileName: z.nullable(z.string()),
});

/** @internal */
export type GetInboxPreSignedUrlResponse$Outbound = {
  url: string;
  expiresAt: string;
  fileName: string | null;
};

/** @internal */
export const GetInboxPreSignedUrlResponse$outboundSchema: z.ZodType<
  GetInboxPreSignedUrlResponse$Outbound,
  z.ZodTypeDef,
  GetInboxPreSignedUrlResponse
> = z.object({
  url: z.string(),
  expiresAt: z.date().transform(v => v.toISOString()),
  fileName: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInboxPreSignedUrlResponse$ {
  /** @deprecated use `GetInboxPreSignedUrlResponse$inboundSchema` instead. */
  export const inboundSchema = GetInboxPreSignedUrlResponse$inboundSchema;
  /** @deprecated use `GetInboxPreSignedUrlResponse$outboundSchema` instead. */
  export const outboundSchema = GetInboxPreSignedUrlResponse$outboundSchema;
  /** @deprecated use `GetInboxPreSignedUrlResponse$Outbound` instead. */
  export type Outbound = GetInboxPreSignedUrlResponse$Outbound;
}

export function getInboxPreSignedUrlResponseToJSON(
  getInboxPreSignedUrlResponse: GetInboxPreSignedUrlResponse,
): string {
  return JSON.stringify(
    GetInboxPreSignedUrlResponse$outboundSchema.parse(
      getInboxPreSignedUrlResponse,
    ),
  );
}

export function getInboxPreSignedUrlResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetInboxPreSignedUrlResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInboxPreSignedUrlResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInboxPreSignedUrlResponse' from JSON`,
  );
}
