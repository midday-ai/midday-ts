/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetInvoiceByIdRequest = {
  id: string;
};

/**
 * Current status of the invoice
 */
export const GetInvoiceByIdStatus = {
  Draft: "draft",
  Overdue: "overdue",
  Paid: "paid",
  Unpaid: "unpaid",
  Canceled: "canceled",
  Scheduled: "scheduled",
} as const;
/**
 * Current status of the invoice
 */
export type GetInvoiceByIdStatus = ClosedEnum<typeof GetInvoiceByIdStatus>;

/**
 * Customer details
 */
export type GetInvoiceByIdCustomer = {
  /**
   * Unique identifier for the customer
   */
  id: string;
  /**
   * Name of the customer
   */
  name: string;
  /**
   * Website URL of the customer
   */
  website: string | null;
  /**
   * Email address of the customer
   */
  email: string | null;
};

/**
 * Invoice object
 */
export type GetInvoiceByIdResponse = {
  /**
   * Unique identifier for the invoice
   */
  id: string;
  /**
   * Current status of the invoice
   */
  status: GetInvoiceByIdStatus;
  /**
   * Due date of the invoice in ISO 8601 format
   */
  dueDate: string;
  /**
   * Issue date of the invoice in ISO 8601 format
   */
  issueDate: string;
  /**
   * Invoice number as shown to the customer
   */
  invoiceNumber: string;
  /**
   * Total amount of the invoice
   */
  amount: number;
  /**
   * Currency code (ISO 4217) for the invoice amount
   */
  currency: string;
  /**
   * Customer details
   */
  customer: GetInvoiceByIdCustomer;
  /**
   * Timestamp when the invoice was paid (ISO 8601), or null if unpaid
   */
  paidAt: string | null;
  /**
   * Timestamp when a payment reminder was sent (ISO 8601), or null if never sent
   */
  reminderSentAt: string | null;
  /**
   * Optional note attached to the invoice
   */
  note: string | null;
  /**
   * Value-added tax amount, or null if not applicable
   */
  vat: number | null;
  /**
   * Tax amount, or null if not applicable
   */
  tax: number | null;
  /**
   * Discount amount applied to the invoice, or null if none
   */
  discount: number | null;
  /**
   * Subtotal before taxes and discounts, or null if not calculated
   */
  subtotal: number | null;
  /**
   * Timestamp when the invoice was viewed by the customer (ISO 8601), or null if never viewed
   */
  viewedAt: string | null;
  /**
   * Name of the customer as shown on the invoice, or null if not set
   */
  customerName: string | null;
  /**
   * Email address to which the invoice was sent, or null if not sent
   */
  sentTo: string | null;
  /**
   * Timestamp when the invoice was sent (ISO 8601), or null if not sent
   */
  sentAt: string | null;
  /**
   * Timestamp when the invoice was created (ISO 8601)
   */
  createdAt: string;
  /**
   * Timestamp when the invoice was last updated (ISO 8601)
   */
  updatedAt: string;
};

/** @internal */
export const GetInvoiceByIdRequest$inboundSchema: z.ZodType<
  GetInvoiceByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetInvoiceByIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetInvoiceByIdRequest$outboundSchema: z.ZodType<
  GetInvoiceByIdRequest$Outbound,
  z.ZodTypeDef,
  GetInvoiceByIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceByIdRequest$ {
  /** @deprecated use `GetInvoiceByIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceByIdRequest$inboundSchema;
  /** @deprecated use `GetInvoiceByIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceByIdRequest$outboundSchema;
  /** @deprecated use `GetInvoiceByIdRequest$Outbound` instead. */
  export type Outbound = GetInvoiceByIdRequest$Outbound;
}

export function getInvoiceByIdRequestToJSON(
  getInvoiceByIdRequest: GetInvoiceByIdRequest,
): string {
  return JSON.stringify(
    GetInvoiceByIdRequest$outboundSchema.parse(getInvoiceByIdRequest),
  );
}

export function getInvoiceByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceByIdRequest' from JSON`,
  );
}

/** @internal */
export const GetInvoiceByIdStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetInvoiceByIdStatus
> = z.nativeEnum(GetInvoiceByIdStatus);

/** @internal */
export const GetInvoiceByIdStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetInvoiceByIdStatus
> = GetInvoiceByIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceByIdStatus$ {
  /** @deprecated use `GetInvoiceByIdStatus$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceByIdStatus$inboundSchema;
  /** @deprecated use `GetInvoiceByIdStatus$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceByIdStatus$outboundSchema;
}

/** @internal */
export const GetInvoiceByIdCustomer$inboundSchema: z.ZodType<
  GetInvoiceByIdCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  website: z.nullable(z.string()),
  email: z.nullable(z.string()),
});

/** @internal */
export type GetInvoiceByIdCustomer$Outbound = {
  id: string;
  name: string;
  website: string | null;
  email: string | null;
};

/** @internal */
export const GetInvoiceByIdCustomer$outboundSchema: z.ZodType<
  GetInvoiceByIdCustomer$Outbound,
  z.ZodTypeDef,
  GetInvoiceByIdCustomer
> = z.object({
  id: z.string(),
  name: z.string(),
  website: z.nullable(z.string()),
  email: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceByIdCustomer$ {
  /** @deprecated use `GetInvoiceByIdCustomer$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceByIdCustomer$inboundSchema;
  /** @deprecated use `GetInvoiceByIdCustomer$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceByIdCustomer$outboundSchema;
  /** @deprecated use `GetInvoiceByIdCustomer$Outbound` instead. */
  export type Outbound = GetInvoiceByIdCustomer$Outbound;
}

export function getInvoiceByIdCustomerToJSON(
  getInvoiceByIdCustomer: GetInvoiceByIdCustomer,
): string {
  return JSON.stringify(
    GetInvoiceByIdCustomer$outboundSchema.parse(getInvoiceByIdCustomer),
  );
}

export function getInvoiceByIdCustomerFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceByIdCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceByIdCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceByIdCustomer' from JSON`,
  );
}

/** @internal */
export const GetInvoiceByIdResponse$inboundSchema: z.ZodType<
  GetInvoiceByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: GetInvoiceByIdStatus$inboundSchema,
  dueDate: z.string(),
  issueDate: z.string(),
  invoiceNumber: z.string(),
  amount: z.number(),
  currency: z.string(),
  customer: z.lazy(() => GetInvoiceByIdCustomer$inboundSchema),
  paidAt: z.nullable(z.string()),
  reminderSentAt: z.nullable(z.string()),
  note: z.nullable(z.string()),
  vat: z.nullable(z.number()),
  tax: z.nullable(z.number()),
  discount: z.nullable(z.number()),
  subtotal: z.nullable(z.number()),
  viewedAt: z.nullable(z.string()),
  customerName: z.nullable(z.string()),
  sentTo: z.nullable(z.string()),
  sentAt: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/** @internal */
export type GetInvoiceByIdResponse$Outbound = {
  id: string;
  status: string;
  dueDate: string;
  issueDate: string;
  invoiceNumber: string;
  amount: number;
  currency: string;
  customer: GetInvoiceByIdCustomer$Outbound;
  paidAt: string | null;
  reminderSentAt: string | null;
  note: string | null;
  vat: number | null;
  tax: number | null;
  discount: number | null;
  subtotal: number | null;
  viewedAt: string | null;
  customerName: string | null;
  sentTo: string | null;
  sentAt: string | null;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const GetInvoiceByIdResponse$outboundSchema: z.ZodType<
  GetInvoiceByIdResponse$Outbound,
  z.ZodTypeDef,
  GetInvoiceByIdResponse
> = z.object({
  id: z.string(),
  status: GetInvoiceByIdStatus$outboundSchema,
  dueDate: z.string(),
  issueDate: z.string(),
  invoiceNumber: z.string(),
  amount: z.number(),
  currency: z.string(),
  customer: z.lazy(() => GetInvoiceByIdCustomer$outboundSchema),
  paidAt: z.nullable(z.string()),
  reminderSentAt: z.nullable(z.string()),
  note: z.nullable(z.string()),
  vat: z.nullable(z.number()),
  tax: z.nullable(z.number()),
  discount: z.nullable(z.number()),
  subtotal: z.nullable(z.number()),
  viewedAt: z.nullable(z.string()),
  customerName: z.nullable(z.string()),
  sentTo: z.nullable(z.string()),
  sentAt: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInvoiceByIdResponse$ {
  /** @deprecated use `GetInvoiceByIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetInvoiceByIdResponse$inboundSchema;
  /** @deprecated use `GetInvoiceByIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetInvoiceByIdResponse$outboundSchema;
  /** @deprecated use `GetInvoiceByIdResponse$Outbound` instead. */
  export type Outbound = GetInvoiceByIdResponse$Outbound;
}

export function getInvoiceByIdResponseToJSON(
  getInvoiceByIdResponse: GetInvoiceByIdResponse,
): string {
  return JSON.stringify(
    GetInvoiceByIdResponse$outboundSchema.parse(getInvoiceByIdResponse),
  );
}

export function getInvoiceByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetInvoiceByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInvoiceByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInvoiceByIdResponse' from JSON`,
  );
}
