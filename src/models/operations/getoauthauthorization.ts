/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * OAuth response type, must be 'code'
 */
export const ResponseType = {
  Code: "code",
} as const;
/**
 * OAuth response type, must be 'code'
 */
export type ResponseType = ClosedEnum<typeof ResponseType>;

export type GetOAuthAuthorizationRequest = {
  /**
   * OAuth response type, must be 'code'
   */
  responseType: ResponseType;
  clientId: string;
  redirectUri: string;
  scope: string;
  state: string;
  codeChallenge?: string | undefined;
};

/**
 * Application verification status
 */
export const GetOAuthAuthorizationStatus = {
  Draft: "draft",
  Pending: "pending",
  Approved: "approved",
  Rejected: "rejected",
} as const;
/**
 * Application verification status
 */
export type GetOAuthAuthorizationStatus = ClosedEnum<
  typeof GetOAuthAuthorizationStatus
>;

/**
 * Application information for consent screen
 */
export type GetOAuthAuthorizationResponse = {
  /**
   * Application ID
   */
  id: string;
  /**
   * Application name
   */
  name: string;
  /**
   * Application description
   */
  description: string | null;
  /**
   * Application overview
   */
  overview: string | null;
  /**
   * The person or company developing this application
   */
  developerName: string | null;
  /**
   * Application logo URL
   */
  logoUrl: string | null;
  /**
   * Application website
   */
  website: string | null;
  /**
   * An optional URL for installing the application
   */
  installUrl: string | null;
  /**
   * Up to 4 screenshots that will be displayed on the apps page
   */
  screenshots: Array<string>;
  /**
   * Client ID
   */
  clientId: string;
  /**
   * Requested scopes
   */
  scopes: Array<string>;
  /**
   * Redirect URI
   */
  redirectUri: string;
  /**
   * State parameter (min 32 chars, alphanumeric + _.-)
   */
  state?: string | undefined;
  /**
   * Application verification status
   */
  status: GetOAuthAuthorizationStatus;
};

/** @internal */
export const ResponseType$inboundSchema: z.ZodNativeEnum<typeof ResponseType> =
  z.nativeEnum(ResponseType);

/** @internal */
export const ResponseType$outboundSchema: z.ZodNativeEnum<typeof ResponseType> =
  ResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseType$ {
  /** @deprecated use `ResponseType$inboundSchema` instead. */
  export const inboundSchema = ResponseType$inboundSchema;
  /** @deprecated use `ResponseType$outboundSchema` instead. */
  export const outboundSchema = ResponseType$outboundSchema;
}

/** @internal */
export const GetOAuthAuthorizationRequest$inboundSchema: z.ZodType<
  GetOAuthAuthorizationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  response_type: ResponseType$inboundSchema,
  client_id: z.string(),
  redirect_uri: z.string(),
  scope: z.string(),
  state: z.string(),
  code_challenge: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "response_type": "responseType",
    "client_id": "clientId",
    "redirect_uri": "redirectUri",
    "code_challenge": "codeChallenge",
  });
});

/** @internal */
export type GetOAuthAuthorizationRequest$Outbound = {
  response_type: string;
  client_id: string;
  redirect_uri: string;
  scope: string;
  state: string;
  code_challenge?: string | undefined;
};

/** @internal */
export const GetOAuthAuthorizationRequest$outboundSchema: z.ZodType<
  GetOAuthAuthorizationRequest$Outbound,
  z.ZodTypeDef,
  GetOAuthAuthorizationRequest
> = z.object({
  responseType: ResponseType$outboundSchema,
  clientId: z.string(),
  redirectUri: z.string(),
  scope: z.string(),
  state: z.string(),
  codeChallenge: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    responseType: "response_type",
    clientId: "client_id",
    redirectUri: "redirect_uri",
    codeChallenge: "code_challenge",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOAuthAuthorizationRequest$ {
  /** @deprecated use `GetOAuthAuthorizationRequest$inboundSchema` instead. */
  export const inboundSchema = GetOAuthAuthorizationRequest$inboundSchema;
  /** @deprecated use `GetOAuthAuthorizationRequest$outboundSchema` instead. */
  export const outboundSchema = GetOAuthAuthorizationRequest$outboundSchema;
  /** @deprecated use `GetOAuthAuthorizationRequest$Outbound` instead. */
  export type Outbound = GetOAuthAuthorizationRequest$Outbound;
}

export function getOAuthAuthorizationRequestToJSON(
  getOAuthAuthorizationRequest: GetOAuthAuthorizationRequest,
): string {
  return JSON.stringify(
    GetOAuthAuthorizationRequest$outboundSchema.parse(
      getOAuthAuthorizationRequest,
    ),
  );
}

export function getOAuthAuthorizationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetOAuthAuthorizationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOAuthAuthorizationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOAuthAuthorizationRequest' from JSON`,
  );
}

/** @internal */
export const GetOAuthAuthorizationStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetOAuthAuthorizationStatus
> = z.nativeEnum(GetOAuthAuthorizationStatus);

/** @internal */
export const GetOAuthAuthorizationStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetOAuthAuthorizationStatus
> = GetOAuthAuthorizationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOAuthAuthorizationStatus$ {
  /** @deprecated use `GetOAuthAuthorizationStatus$inboundSchema` instead. */
  export const inboundSchema = GetOAuthAuthorizationStatus$inboundSchema;
  /** @deprecated use `GetOAuthAuthorizationStatus$outboundSchema` instead. */
  export const outboundSchema = GetOAuthAuthorizationStatus$outboundSchema;
}

/** @internal */
export const GetOAuthAuthorizationResponse$inboundSchema: z.ZodType<
  GetOAuthAuthorizationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  overview: z.nullable(z.string()),
  developerName: z.nullable(z.string()),
  logoUrl: z.nullable(z.string()),
  website: z.nullable(z.string()),
  installUrl: z.nullable(z.string()),
  screenshots: z.array(z.string()),
  clientId: z.string(),
  scopes: z.array(z.string()),
  redirectUri: z.string(),
  state: z.string().optional(),
  status: GetOAuthAuthorizationStatus$inboundSchema,
});

/** @internal */
export type GetOAuthAuthorizationResponse$Outbound = {
  id: string;
  name: string;
  description: string | null;
  overview: string | null;
  developerName: string | null;
  logoUrl: string | null;
  website: string | null;
  installUrl: string | null;
  screenshots: Array<string>;
  clientId: string;
  scopes: Array<string>;
  redirectUri: string;
  state?: string | undefined;
  status: string;
};

/** @internal */
export const GetOAuthAuthorizationResponse$outboundSchema: z.ZodType<
  GetOAuthAuthorizationResponse$Outbound,
  z.ZodTypeDef,
  GetOAuthAuthorizationResponse
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  overview: z.nullable(z.string()),
  developerName: z.nullable(z.string()),
  logoUrl: z.nullable(z.string()),
  website: z.nullable(z.string()),
  installUrl: z.nullable(z.string()),
  screenshots: z.array(z.string()),
  clientId: z.string(),
  scopes: z.array(z.string()),
  redirectUri: z.string(),
  state: z.string().optional(),
  status: GetOAuthAuthorizationStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOAuthAuthorizationResponse$ {
  /** @deprecated use `GetOAuthAuthorizationResponse$inboundSchema` instead. */
  export const inboundSchema = GetOAuthAuthorizationResponse$inboundSchema;
  /** @deprecated use `GetOAuthAuthorizationResponse$outboundSchema` instead. */
  export const outboundSchema = GetOAuthAuthorizationResponse$outboundSchema;
  /** @deprecated use `GetOAuthAuthorizationResponse$Outbound` instead. */
  export type Outbound = GetOAuthAuthorizationResponse$Outbound;
}

export function getOAuthAuthorizationResponseToJSON(
  getOAuthAuthorizationResponse: GetOAuthAuthorizationResponse,
): string {
  return JSON.stringify(
    GetOAuthAuthorizationResponse$outboundSchema.parse(
      getOAuthAuthorizationResponse,
    ),
  );
}

export function getOAuthAuthorizationResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetOAuthAuthorizationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOAuthAuthorizationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOAuthAuthorizationResponse' from JSON`,
  );
}
