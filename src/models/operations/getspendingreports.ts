/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSpendingReportsRequest = {
  from: string;
  to: string;
  currency?: string | undefined;
};

/** @internal */
export const GetSpendingReportsRequest$inboundSchema: z.ZodType<
  GetSpendingReportsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.string(),
  to: z.string(),
  currency: z.string().optional(),
});

/** @internal */
export type GetSpendingReportsRequest$Outbound = {
  from: string;
  to: string;
  currency?: string | undefined;
};

/** @internal */
export const GetSpendingReportsRequest$outboundSchema: z.ZodType<
  GetSpendingReportsRequest$Outbound,
  z.ZodTypeDef,
  GetSpendingReportsRequest
> = z.object({
  from: z.string(),
  to: z.string(),
  currency: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSpendingReportsRequest$ {
  /** @deprecated use `GetSpendingReportsRequest$inboundSchema` instead. */
  export const inboundSchema = GetSpendingReportsRequest$inboundSchema;
  /** @deprecated use `GetSpendingReportsRequest$outboundSchema` instead. */
  export const outboundSchema = GetSpendingReportsRequest$outboundSchema;
  /** @deprecated use `GetSpendingReportsRequest$Outbound` instead. */
  export type Outbound = GetSpendingReportsRequest$Outbound;
}

export function getSpendingReportsRequestToJSON(
  getSpendingReportsRequest: GetSpendingReportsRequest,
): string {
  return JSON.stringify(
    GetSpendingReportsRequest$outboundSchema.parse(getSpendingReportsRequest),
  );
}

export function getSpendingReportsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSpendingReportsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSpendingReportsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSpendingReportsRequest' from JSON`,
  );
}
