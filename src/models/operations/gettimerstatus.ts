/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTimerStatusRequest = {
  assignedId?: string | null | undefined;
};

export type TrackerProject = {
  id: string;
  name: string;
};

/**
 * Current running timer details, null if not running
 */
export type CurrentEntry = {
  id: string;
  start: string | null;
  description: string | null;
  projectId: string;
  trackerProject: TrackerProject;
};

export type GetTimerStatusData = {
  /**
   * Whether there is currently a running timer
   */
  isRunning: boolean;
  /**
   * Current running timer details, null if not running
   */
  currentEntry: CurrentEntry | null;
  /**
   * Elapsed time in seconds for the current running timer
   */
  elapsedTime: number;
};

/**
 * Timer status retrieved successfully.
 */
export type GetTimerStatusResponse = {
  data: GetTimerStatusData;
};

/** @internal */
export const GetTimerStatusRequest$inboundSchema: z.ZodType<
  GetTimerStatusRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  assignedId: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetTimerStatusRequest$Outbound = {
  assignedId?: string | null | undefined;
};

/** @internal */
export const GetTimerStatusRequest$outboundSchema: z.ZodType<
  GetTimerStatusRequest$Outbound,
  z.ZodTypeDef,
  GetTimerStatusRequest
> = z.object({
  assignedId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTimerStatusRequest$ {
  /** @deprecated use `GetTimerStatusRequest$inboundSchema` instead. */
  export const inboundSchema = GetTimerStatusRequest$inboundSchema;
  /** @deprecated use `GetTimerStatusRequest$outboundSchema` instead. */
  export const outboundSchema = GetTimerStatusRequest$outboundSchema;
  /** @deprecated use `GetTimerStatusRequest$Outbound` instead. */
  export type Outbound = GetTimerStatusRequest$Outbound;
}

export function getTimerStatusRequestToJSON(
  getTimerStatusRequest: GetTimerStatusRequest,
): string {
  return JSON.stringify(
    GetTimerStatusRequest$outboundSchema.parse(getTimerStatusRequest),
  );
}

export function getTimerStatusRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTimerStatusRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTimerStatusRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTimerStatusRequest' from JSON`,
  );
}

/** @internal */
export const TrackerProject$inboundSchema: z.ZodType<
  TrackerProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
});

/** @internal */
export type TrackerProject$Outbound = {
  id: string;
  name: string;
};

/** @internal */
export const TrackerProject$outboundSchema: z.ZodType<
  TrackerProject$Outbound,
  z.ZodTypeDef,
  TrackerProject
> = z.object({
  id: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrackerProject$ {
  /** @deprecated use `TrackerProject$inboundSchema` instead. */
  export const inboundSchema = TrackerProject$inboundSchema;
  /** @deprecated use `TrackerProject$outboundSchema` instead. */
  export const outboundSchema = TrackerProject$outboundSchema;
  /** @deprecated use `TrackerProject$Outbound` instead. */
  export type Outbound = TrackerProject$Outbound;
}

export function trackerProjectToJSON(trackerProject: TrackerProject): string {
  return JSON.stringify(TrackerProject$outboundSchema.parse(trackerProject));
}

export function trackerProjectFromJSON(
  jsonString: string,
): SafeParseResult<TrackerProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TrackerProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TrackerProject' from JSON`,
  );
}

/** @internal */
export const CurrentEntry$inboundSchema: z.ZodType<
  CurrentEntry,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  start: z.nullable(z.string()),
  description: z.nullable(z.string()),
  projectId: z.string(),
  trackerProject: z.lazy(() => TrackerProject$inboundSchema),
});

/** @internal */
export type CurrentEntry$Outbound = {
  id: string;
  start: string | null;
  description: string | null;
  projectId: string;
  trackerProject: TrackerProject$Outbound;
};

/** @internal */
export const CurrentEntry$outboundSchema: z.ZodType<
  CurrentEntry$Outbound,
  z.ZodTypeDef,
  CurrentEntry
> = z.object({
  id: z.string(),
  start: z.nullable(z.string()),
  description: z.nullable(z.string()),
  projectId: z.string(),
  trackerProject: z.lazy(() => TrackerProject$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurrentEntry$ {
  /** @deprecated use `CurrentEntry$inboundSchema` instead. */
  export const inboundSchema = CurrentEntry$inboundSchema;
  /** @deprecated use `CurrentEntry$outboundSchema` instead. */
  export const outboundSchema = CurrentEntry$outboundSchema;
  /** @deprecated use `CurrentEntry$Outbound` instead. */
  export type Outbound = CurrentEntry$Outbound;
}

export function currentEntryToJSON(currentEntry: CurrentEntry): string {
  return JSON.stringify(CurrentEntry$outboundSchema.parse(currentEntry));
}

export function currentEntryFromJSON(
  jsonString: string,
): SafeParseResult<CurrentEntry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CurrentEntry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CurrentEntry' from JSON`,
  );
}

/** @internal */
export const GetTimerStatusData$inboundSchema: z.ZodType<
  GetTimerStatusData,
  z.ZodTypeDef,
  unknown
> = z.object({
  isRunning: z.boolean(),
  currentEntry: z.nullable(z.lazy(() => CurrentEntry$inboundSchema)),
  elapsedTime: z.number(),
});

/** @internal */
export type GetTimerStatusData$Outbound = {
  isRunning: boolean;
  currentEntry: CurrentEntry$Outbound | null;
  elapsedTime: number;
};

/** @internal */
export const GetTimerStatusData$outboundSchema: z.ZodType<
  GetTimerStatusData$Outbound,
  z.ZodTypeDef,
  GetTimerStatusData
> = z.object({
  isRunning: z.boolean(),
  currentEntry: z.nullable(z.lazy(() => CurrentEntry$outboundSchema)),
  elapsedTime: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTimerStatusData$ {
  /** @deprecated use `GetTimerStatusData$inboundSchema` instead. */
  export const inboundSchema = GetTimerStatusData$inboundSchema;
  /** @deprecated use `GetTimerStatusData$outboundSchema` instead. */
  export const outboundSchema = GetTimerStatusData$outboundSchema;
  /** @deprecated use `GetTimerStatusData$Outbound` instead. */
  export type Outbound = GetTimerStatusData$Outbound;
}

export function getTimerStatusDataToJSON(
  getTimerStatusData: GetTimerStatusData,
): string {
  return JSON.stringify(
    GetTimerStatusData$outboundSchema.parse(getTimerStatusData),
  );
}

export function getTimerStatusDataFromJSON(
  jsonString: string,
): SafeParseResult<GetTimerStatusData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTimerStatusData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTimerStatusData' from JSON`,
  );
}

/** @internal */
export const GetTimerStatusResponse$inboundSchema: z.ZodType<
  GetTimerStatusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => GetTimerStatusData$inboundSchema),
});

/** @internal */
export type GetTimerStatusResponse$Outbound = {
  data: GetTimerStatusData$Outbound;
};

/** @internal */
export const GetTimerStatusResponse$outboundSchema: z.ZodType<
  GetTimerStatusResponse$Outbound,
  z.ZodTypeDef,
  GetTimerStatusResponse
> = z.object({
  data: z.lazy(() => GetTimerStatusData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTimerStatusResponse$ {
  /** @deprecated use `GetTimerStatusResponse$inboundSchema` instead. */
  export const inboundSchema = GetTimerStatusResponse$inboundSchema;
  /** @deprecated use `GetTimerStatusResponse$outboundSchema` instead. */
  export const outboundSchema = GetTimerStatusResponse$outboundSchema;
  /** @deprecated use `GetTimerStatusResponse$Outbound` instead. */
  export type Outbound = GetTimerStatusResponse$Outbound;
}

export function getTimerStatusResponseToJSON(
  getTimerStatusResponse: GetTimerStatusResponse,
): string {
  return JSON.stringify(
    GetTimerStatusResponse$outboundSchema.parse(getTimerStatusResponse),
  );
}

export function getTimerStatusResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetTimerStatusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTimerStatusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTimerStatusResponse' from JSON`,
  );
}
