/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTransactionAttachmentPreSignedUrlRequest = {
  transactionId: string;
  attachmentId: string;
  download?: boolean | null | undefined;
};

/**
 * Pre-signed URL generated successfully
 */
export type GetTransactionAttachmentPreSignedUrlResponse = {
  /**
   * Pre-signed URL for accessing the attachment, valid for 60 seconds
   */
  url: string;
  /**
   * ISO 8601 timestamp when the URL expires
   */
  expiresAt: Date;
  /**
   * Original filename of the attachment
   */
  fileName: string | null;
};

/** @internal */
export const GetTransactionAttachmentPreSignedUrlRequest$inboundSchema:
  z.ZodType<
    GetTransactionAttachmentPreSignedUrlRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    transactionId: z.string(),
    attachmentId: z.string(),
    download: z.nullable(z.boolean()).optional(),
  });

/** @internal */
export type GetTransactionAttachmentPreSignedUrlRequest$Outbound = {
  transactionId: string;
  attachmentId: string;
  download?: boolean | null | undefined;
};

/** @internal */
export const GetTransactionAttachmentPreSignedUrlRequest$outboundSchema:
  z.ZodType<
    GetTransactionAttachmentPreSignedUrlRequest$Outbound,
    z.ZodTypeDef,
    GetTransactionAttachmentPreSignedUrlRequest
  > = z.object({
    transactionId: z.string(),
    attachmentId: z.string(),
    download: z.nullable(z.boolean()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionAttachmentPreSignedUrlRequest$ {
  /** @deprecated use `GetTransactionAttachmentPreSignedUrlRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionAttachmentPreSignedUrlRequest$inboundSchema;
  /** @deprecated use `GetTransactionAttachmentPreSignedUrlRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionAttachmentPreSignedUrlRequest$outboundSchema;
  /** @deprecated use `GetTransactionAttachmentPreSignedUrlRequest$Outbound` instead. */
  export type Outbound = GetTransactionAttachmentPreSignedUrlRequest$Outbound;
}

export function getTransactionAttachmentPreSignedUrlRequestToJSON(
  getTransactionAttachmentPreSignedUrlRequest:
    GetTransactionAttachmentPreSignedUrlRequest,
): string {
  return JSON.stringify(
    GetTransactionAttachmentPreSignedUrlRequest$outboundSchema.parse(
      getTransactionAttachmentPreSignedUrlRequest,
    ),
  );
}

export function getTransactionAttachmentPreSignedUrlRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionAttachmentPreSignedUrlRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionAttachmentPreSignedUrlRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetTransactionAttachmentPreSignedUrlRequest' from JSON`,
  );
}

/** @internal */
export const GetTransactionAttachmentPreSignedUrlResponse$inboundSchema:
  z.ZodType<
    GetTransactionAttachmentPreSignedUrlResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    url: z.string(),
    expiresAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    fileName: z.nullable(z.string()),
  });

/** @internal */
export type GetTransactionAttachmentPreSignedUrlResponse$Outbound = {
  url: string;
  expiresAt: string;
  fileName: string | null;
};

/** @internal */
export const GetTransactionAttachmentPreSignedUrlResponse$outboundSchema:
  z.ZodType<
    GetTransactionAttachmentPreSignedUrlResponse$Outbound,
    z.ZodTypeDef,
    GetTransactionAttachmentPreSignedUrlResponse
  > = z.object({
    url: z.string(),
    expiresAt: z.date().transform(v => v.toISOString()),
    fileName: z.nullable(z.string()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionAttachmentPreSignedUrlResponse$ {
  /** @deprecated use `GetTransactionAttachmentPreSignedUrlResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetTransactionAttachmentPreSignedUrlResponse$inboundSchema;
  /** @deprecated use `GetTransactionAttachmentPreSignedUrlResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionAttachmentPreSignedUrlResponse$outboundSchema;
  /** @deprecated use `GetTransactionAttachmentPreSignedUrlResponse$Outbound` instead. */
  export type Outbound = GetTransactionAttachmentPreSignedUrlResponse$Outbound;
}

export function getTransactionAttachmentPreSignedUrlResponseToJSON(
  getTransactionAttachmentPreSignedUrlResponse:
    GetTransactionAttachmentPreSignedUrlResponse,
): string {
  return JSON.stringify(
    GetTransactionAttachmentPreSignedUrlResponse$outboundSchema.parse(
      getTransactionAttachmentPreSignedUrlResponse,
    ),
  );
}

export function getTransactionAttachmentPreSignedUrlResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTransactionAttachmentPreSignedUrlResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTransactionAttachmentPreSignedUrlResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetTransactionAttachmentPreSignedUrlResponse' from JSON`,
  );
}
