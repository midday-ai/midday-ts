/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1BankAccountsRequest = {
  enabled?: boolean | undefined;
  manual?: boolean | undefined;
};

/**
 * A single bank account object response.
 */
export type GetV1BankAccountsData = {
  /**
   * Unique identifier for the bank account.
   */
  id: string;
  /**
   * Name of the bank account.
   */
  name: string | null;
  /**
   * Currency code of the bank account (e.g., USD, EUR).
   */
  currency: string | null;
  /**
   * Type of the bank account (e.g., depository, credit).
   */
  type: string | null;
  /**
   * Whether the bank account is enabled.
   */
  enabled: boolean;
  /**
   * Current balance of the bank account.
   */
  balance: number | null;
  /**
   * Whether the bank account is a manual account.
   */
  manual: boolean | null;
};

/**
 * Response containing a list of bank accounts.
 */
export type GetV1BankAccountsResponse = {
  /**
   * Array of bank account objects.
   */
  data: Array<GetV1BankAccountsData>;
};

/** @internal */
export const GetV1BankAccountsRequest$inboundSchema: z.ZodType<
  GetV1BankAccountsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
  manual: z.boolean().optional(),
});

/** @internal */
export type GetV1BankAccountsRequest$Outbound = {
  enabled?: boolean | undefined;
  manual?: boolean | undefined;
};

/** @internal */
export const GetV1BankAccountsRequest$outboundSchema: z.ZodType<
  GetV1BankAccountsRequest$Outbound,
  z.ZodTypeDef,
  GetV1BankAccountsRequest
> = z.object({
  enabled: z.boolean().optional(),
  manual: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1BankAccountsRequest$ {
  /** @deprecated use `GetV1BankAccountsRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1BankAccountsRequest$inboundSchema;
  /** @deprecated use `GetV1BankAccountsRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1BankAccountsRequest$outboundSchema;
  /** @deprecated use `GetV1BankAccountsRequest$Outbound` instead. */
  export type Outbound = GetV1BankAccountsRequest$Outbound;
}

export function getV1BankAccountsRequestToJSON(
  getV1BankAccountsRequest: GetV1BankAccountsRequest,
): string {
  return JSON.stringify(
    GetV1BankAccountsRequest$outboundSchema.parse(getV1BankAccountsRequest),
  );
}

export function getV1BankAccountsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1BankAccountsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1BankAccountsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1BankAccountsRequest' from JSON`,
  );
}

/** @internal */
export const GetV1BankAccountsData$inboundSchema: z.ZodType<
  GetV1BankAccountsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()),
  currency: z.nullable(z.string()),
  type: z.nullable(z.string()),
  enabled: z.boolean(),
  balance: z.nullable(z.number()),
  manual: z.nullable(z.boolean()),
});

/** @internal */
export type GetV1BankAccountsData$Outbound = {
  id: string;
  name: string | null;
  currency: string | null;
  type: string | null;
  enabled: boolean;
  balance: number | null;
  manual: boolean | null;
};

/** @internal */
export const GetV1BankAccountsData$outboundSchema: z.ZodType<
  GetV1BankAccountsData$Outbound,
  z.ZodTypeDef,
  GetV1BankAccountsData
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()),
  currency: z.nullable(z.string()),
  type: z.nullable(z.string()),
  enabled: z.boolean(),
  balance: z.nullable(z.number()),
  manual: z.nullable(z.boolean()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1BankAccountsData$ {
  /** @deprecated use `GetV1BankAccountsData$inboundSchema` instead. */
  export const inboundSchema = GetV1BankAccountsData$inboundSchema;
  /** @deprecated use `GetV1BankAccountsData$outboundSchema` instead. */
  export const outboundSchema = GetV1BankAccountsData$outboundSchema;
  /** @deprecated use `GetV1BankAccountsData$Outbound` instead. */
  export type Outbound = GetV1BankAccountsData$Outbound;
}

export function getV1BankAccountsDataToJSON(
  getV1BankAccountsData: GetV1BankAccountsData,
): string {
  return JSON.stringify(
    GetV1BankAccountsData$outboundSchema.parse(getV1BankAccountsData),
  );
}

export function getV1BankAccountsDataFromJSON(
  jsonString: string,
): SafeParseResult<GetV1BankAccountsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1BankAccountsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1BankAccountsData' from JSON`,
  );
}

/** @internal */
export const GetV1BankAccountsResponse$inboundSchema: z.ZodType<
  GetV1BankAccountsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => GetV1BankAccountsData$inboundSchema)),
});

/** @internal */
export type GetV1BankAccountsResponse$Outbound = {
  data: Array<GetV1BankAccountsData$Outbound>;
};

/** @internal */
export const GetV1BankAccountsResponse$outboundSchema: z.ZodType<
  GetV1BankAccountsResponse$Outbound,
  z.ZodTypeDef,
  GetV1BankAccountsResponse
> = z.object({
  data: z.array(z.lazy(() => GetV1BankAccountsData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1BankAccountsResponse$ {
  /** @deprecated use `GetV1BankAccountsResponse$inboundSchema` instead. */
  export const inboundSchema = GetV1BankAccountsResponse$inboundSchema;
  /** @deprecated use `GetV1BankAccountsResponse$outboundSchema` instead. */
  export const outboundSchema = GetV1BankAccountsResponse$outboundSchema;
  /** @deprecated use `GetV1BankAccountsResponse$Outbound` instead. */
  export type Outbound = GetV1BankAccountsResponse$Outbound;
}

export function getV1BankAccountsResponseToJSON(
  getV1BankAccountsResponse: GetV1BankAccountsResponse,
): string {
  return JSON.stringify(
    GetV1BankAccountsResponse$outboundSchema.parse(getV1BankAccountsResponse),
  );
}

export function getV1BankAccountsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1BankAccountsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1BankAccountsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1BankAccountsResponse' from JSON`,
  );
}
