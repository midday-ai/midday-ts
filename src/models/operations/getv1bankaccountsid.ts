/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1BankAccountsIdRequest = {
  id: string;
};

/**
 * A single bank account object response.
 */
export type GetV1BankAccountsIdResponse = {
  /**
   * Unique identifier for the bank account.
   */
  id: string;
  /**
   * Name of the bank account.
   */
  name: string | null;
  /**
   * Currency code of the bank account (e.g., USD, EUR).
   */
  currency: string | null;
  /**
   * Type of the bank account (e.g., depository, credit).
   */
  type: string | null;
  /**
   * Whether the bank account is enabled.
   */
  enabled: boolean;
  /**
   * Current balance of the bank account.
   */
  balance: number | null;
  /**
   * Whether the bank account is a manual account.
   */
  manual: boolean | null;
};

/** @internal */
export const GetV1BankAccountsIdRequest$inboundSchema: z.ZodType<
  GetV1BankAccountsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetV1BankAccountsIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetV1BankAccountsIdRequest$outboundSchema: z.ZodType<
  GetV1BankAccountsIdRequest$Outbound,
  z.ZodTypeDef,
  GetV1BankAccountsIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1BankAccountsIdRequest$ {
  /** @deprecated use `GetV1BankAccountsIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1BankAccountsIdRequest$inboundSchema;
  /** @deprecated use `GetV1BankAccountsIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1BankAccountsIdRequest$outboundSchema;
  /** @deprecated use `GetV1BankAccountsIdRequest$Outbound` instead. */
  export type Outbound = GetV1BankAccountsIdRequest$Outbound;
}

export function getV1BankAccountsIdRequestToJSON(
  getV1BankAccountsIdRequest: GetV1BankAccountsIdRequest,
): string {
  return JSON.stringify(
    GetV1BankAccountsIdRequest$outboundSchema.parse(getV1BankAccountsIdRequest),
  );
}

export function getV1BankAccountsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1BankAccountsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1BankAccountsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1BankAccountsIdRequest' from JSON`,
  );
}

/** @internal */
export const GetV1BankAccountsIdResponse$inboundSchema: z.ZodType<
  GetV1BankAccountsIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()),
  currency: z.nullable(z.string()),
  type: z.nullable(z.string()),
  enabled: z.boolean(),
  balance: z.nullable(z.number()),
  manual: z.nullable(z.boolean()),
});

/** @internal */
export type GetV1BankAccountsIdResponse$Outbound = {
  id: string;
  name: string | null;
  currency: string | null;
  type: string | null;
  enabled: boolean;
  balance: number | null;
  manual: boolean | null;
};

/** @internal */
export const GetV1BankAccountsIdResponse$outboundSchema: z.ZodType<
  GetV1BankAccountsIdResponse$Outbound,
  z.ZodTypeDef,
  GetV1BankAccountsIdResponse
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()),
  currency: z.nullable(z.string()),
  type: z.nullable(z.string()),
  enabled: z.boolean(),
  balance: z.nullable(z.number()),
  manual: z.nullable(z.boolean()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1BankAccountsIdResponse$ {
  /** @deprecated use `GetV1BankAccountsIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetV1BankAccountsIdResponse$inboundSchema;
  /** @deprecated use `GetV1BankAccountsIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetV1BankAccountsIdResponse$outboundSchema;
  /** @deprecated use `GetV1BankAccountsIdResponse$Outbound` instead. */
  export type Outbound = GetV1BankAccountsIdResponse$Outbound;
}

export function getV1BankAccountsIdResponseToJSON(
  getV1BankAccountsIdResponse: GetV1BankAccountsIdResponse,
): string {
  return JSON.stringify(
    GetV1BankAccountsIdResponse$outboundSchema.parse(
      getV1BankAccountsIdResponse,
    ),
  );
}

export function getV1BankAccountsIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1BankAccountsIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1BankAccountsIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1BankAccountsIdResponse' from JSON`,
  );
}
