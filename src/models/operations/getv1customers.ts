/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1CustomersRequest = {
  q?: string | null | undefined;
  sort?: Array<string> | null | undefined;
  cursor?: string | undefined;
  pageSize?: number | undefined;
};

/**
 * Pagination metadata for the customers response
 */
export type GetV1CustomersMeta = {
  /**
   * Cursor for the next page of results, null if no more pages
   */
  cursor: string | null;
  /**
   * Whether there are more customers available on the previous page
   */
  hasPreviousPage: boolean;
  /**
   * Whether there are more customers available on the next page
   */
  hasNextPage: boolean;
};

export type GetV1CustomersTag = {
  /**
   * Unique identifier of the tag
   */
  id: string;
  /**
   * Display name of the tag
   */
  name: string;
};

export type GetV1CustomersData = {
  /**
   * Unique identifier of the customer
   */
  id: string;
  /**
   * Name of the customer or organization
   */
  name: string;
  /**
   * Primary email address of the customer
   */
  email: string;
  /**
   * Primary phone number of the customer
   */
  phone: string | null;
  /**
   * Website URL of the customer
   */
  website: string | null;
  /**
   * Date and time when the customer was created in ISO 8601 format
   */
  createdAt: string;
  /**
   * Country name where the customer is located
   */
  country: string | null;
  /**
   * First line of the customer's address
   */
  addressLine1: string | null;
  /**
   * Second line of the customer's address (suite, apartment, etc.)
   */
  addressLine2: string | null;
  /**
   * City where the customer is located
   */
  city: string | null;
  /**
   * State or province where the customer is located
   */
  state: string | null;
  /**
   * ZIP or postal code of the customer's address
   */
  zip: string | null;
  /**
   * Internal notes about the customer for team reference
   */
  note: string | null;
  /**
   * VAT (Value Added Tax) number of the customer
   */
  vatNumber: string | null;
  /**
   * Country code in ISO 3166-1 alpha-2 format
   */
  countryCode: string | null;
  /**
   * Unique token for the customer (used for internal identification)
   */
  token: string;
  /**
   * Primary contact person's name at the customer organization
   */
  contact: string | null;
  /**
   * Total number of invoices created for this customer
   */
  invoiceCount: number;
  /**
   * Total number of projects associated with this customer
   */
  projectCount: number;
  /**
   * Array of tags associated with the customer for categorization
   */
  tags: Array<GetV1CustomersTag>;
};

/**
 * Retrieve a list of customers for the authenticated team.
 */
export type GetV1CustomersResponse = {
  /**
   * Pagination metadata for the customers response
   */
  meta: GetV1CustomersMeta;
  /**
   * Array of customers matching the query criteria
   */
  data: Array<GetV1CustomersData>;
};

/** @internal */
export const GetV1CustomersRequest$inboundSchema: z.ZodType<
  GetV1CustomersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  q: z.nullable(z.string()).optional(),
  sort: z.nullable(z.array(z.string())).optional(),
  cursor: z.string().optional(),
  pageSize: z.number().optional(),
});

/** @internal */
export type GetV1CustomersRequest$Outbound = {
  q?: string | null | undefined;
  sort?: Array<string> | null | undefined;
  cursor?: string | undefined;
  pageSize?: number | undefined;
};

/** @internal */
export const GetV1CustomersRequest$outboundSchema: z.ZodType<
  GetV1CustomersRequest$Outbound,
  z.ZodTypeDef,
  GetV1CustomersRequest
> = z.object({
  q: z.nullable(z.string()).optional(),
  sort: z.nullable(z.array(z.string())).optional(),
  cursor: z.string().optional(),
  pageSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CustomersRequest$ {
  /** @deprecated use `GetV1CustomersRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1CustomersRequest$inboundSchema;
  /** @deprecated use `GetV1CustomersRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1CustomersRequest$outboundSchema;
  /** @deprecated use `GetV1CustomersRequest$Outbound` instead. */
  export type Outbound = GetV1CustomersRequest$Outbound;
}

export function getV1CustomersRequestToJSON(
  getV1CustomersRequest: GetV1CustomersRequest,
): string {
  return JSON.stringify(
    GetV1CustomersRequest$outboundSchema.parse(getV1CustomersRequest),
  );
}

export function getV1CustomersRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1CustomersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1CustomersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1CustomersRequest' from JSON`,
  );
}

/** @internal */
export const GetV1CustomersMeta$inboundSchema: z.ZodType<
  GetV1CustomersMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()),
  hasPreviousPage: z.boolean(),
  hasNextPage: z.boolean(),
});

/** @internal */
export type GetV1CustomersMeta$Outbound = {
  cursor: string | null;
  hasPreviousPage: boolean;
  hasNextPage: boolean;
};

/** @internal */
export const GetV1CustomersMeta$outboundSchema: z.ZodType<
  GetV1CustomersMeta$Outbound,
  z.ZodTypeDef,
  GetV1CustomersMeta
> = z.object({
  cursor: z.nullable(z.string()),
  hasPreviousPage: z.boolean(),
  hasNextPage: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CustomersMeta$ {
  /** @deprecated use `GetV1CustomersMeta$inboundSchema` instead. */
  export const inboundSchema = GetV1CustomersMeta$inboundSchema;
  /** @deprecated use `GetV1CustomersMeta$outboundSchema` instead. */
  export const outboundSchema = GetV1CustomersMeta$outboundSchema;
  /** @deprecated use `GetV1CustomersMeta$Outbound` instead. */
  export type Outbound = GetV1CustomersMeta$Outbound;
}

export function getV1CustomersMetaToJSON(
  getV1CustomersMeta: GetV1CustomersMeta,
): string {
  return JSON.stringify(
    GetV1CustomersMeta$outboundSchema.parse(getV1CustomersMeta),
  );
}

export function getV1CustomersMetaFromJSON(
  jsonString: string,
): SafeParseResult<GetV1CustomersMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1CustomersMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1CustomersMeta' from JSON`,
  );
}

/** @internal */
export const GetV1CustomersTag$inboundSchema: z.ZodType<
  GetV1CustomersTag,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
});

/** @internal */
export type GetV1CustomersTag$Outbound = {
  id: string;
  name: string;
};

/** @internal */
export const GetV1CustomersTag$outboundSchema: z.ZodType<
  GetV1CustomersTag$Outbound,
  z.ZodTypeDef,
  GetV1CustomersTag
> = z.object({
  id: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CustomersTag$ {
  /** @deprecated use `GetV1CustomersTag$inboundSchema` instead. */
  export const inboundSchema = GetV1CustomersTag$inboundSchema;
  /** @deprecated use `GetV1CustomersTag$outboundSchema` instead. */
  export const outboundSchema = GetV1CustomersTag$outboundSchema;
  /** @deprecated use `GetV1CustomersTag$Outbound` instead. */
  export type Outbound = GetV1CustomersTag$Outbound;
}

export function getV1CustomersTagToJSON(
  getV1CustomersTag: GetV1CustomersTag,
): string {
  return JSON.stringify(
    GetV1CustomersTag$outboundSchema.parse(getV1CustomersTag),
  );
}

export function getV1CustomersTagFromJSON(
  jsonString: string,
): SafeParseResult<GetV1CustomersTag, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1CustomersTag$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1CustomersTag' from JSON`,
  );
}

/** @internal */
export const GetV1CustomersData$inboundSchema: z.ZodType<
  GetV1CustomersData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  phone: z.nullable(z.string()),
  website: z.nullable(z.string()),
  createdAt: z.string(),
  country: z.nullable(z.string()),
  addressLine1: z.nullable(z.string()),
  addressLine2: z.nullable(z.string()),
  city: z.nullable(z.string()),
  state: z.nullable(z.string()),
  zip: z.nullable(z.string()),
  note: z.nullable(z.string()),
  vatNumber: z.nullable(z.string()),
  countryCode: z.nullable(z.string()),
  token: z.string(),
  contact: z.nullable(z.string()),
  invoiceCount: z.number(),
  projectCount: z.number(),
  tags: z.array(z.lazy(() => GetV1CustomersTag$inboundSchema)),
});

/** @internal */
export type GetV1CustomersData$Outbound = {
  id: string;
  name: string;
  email: string;
  phone: string | null;
  website: string | null;
  createdAt: string;
  country: string | null;
  addressLine1: string | null;
  addressLine2: string | null;
  city: string | null;
  state: string | null;
  zip: string | null;
  note: string | null;
  vatNumber: string | null;
  countryCode: string | null;
  token: string;
  contact: string | null;
  invoiceCount: number;
  projectCount: number;
  tags: Array<GetV1CustomersTag$Outbound>;
};

/** @internal */
export const GetV1CustomersData$outboundSchema: z.ZodType<
  GetV1CustomersData$Outbound,
  z.ZodTypeDef,
  GetV1CustomersData
> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  phone: z.nullable(z.string()),
  website: z.nullable(z.string()),
  createdAt: z.string(),
  country: z.nullable(z.string()),
  addressLine1: z.nullable(z.string()),
  addressLine2: z.nullable(z.string()),
  city: z.nullable(z.string()),
  state: z.nullable(z.string()),
  zip: z.nullable(z.string()),
  note: z.nullable(z.string()),
  vatNumber: z.nullable(z.string()),
  countryCode: z.nullable(z.string()),
  token: z.string(),
  contact: z.nullable(z.string()),
  invoiceCount: z.number(),
  projectCount: z.number(),
  tags: z.array(z.lazy(() => GetV1CustomersTag$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CustomersData$ {
  /** @deprecated use `GetV1CustomersData$inboundSchema` instead. */
  export const inboundSchema = GetV1CustomersData$inboundSchema;
  /** @deprecated use `GetV1CustomersData$outboundSchema` instead. */
  export const outboundSchema = GetV1CustomersData$outboundSchema;
  /** @deprecated use `GetV1CustomersData$Outbound` instead. */
  export type Outbound = GetV1CustomersData$Outbound;
}

export function getV1CustomersDataToJSON(
  getV1CustomersData: GetV1CustomersData,
): string {
  return JSON.stringify(
    GetV1CustomersData$outboundSchema.parse(getV1CustomersData),
  );
}

export function getV1CustomersDataFromJSON(
  jsonString: string,
): SafeParseResult<GetV1CustomersData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1CustomersData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1CustomersData' from JSON`,
  );
}

/** @internal */
export const GetV1CustomersResponse$inboundSchema: z.ZodType<
  GetV1CustomersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  meta: z.lazy(() => GetV1CustomersMeta$inboundSchema),
  data: z.array(z.lazy(() => GetV1CustomersData$inboundSchema)),
});

/** @internal */
export type GetV1CustomersResponse$Outbound = {
  meta: GetV1CustomersMeta$Outbound;
  data: Array<GetV1CustomersData$Outbound>;
};

/** @internal */
export const GetV1CustomersResponse$outboundSchema: z.ZodType<
  GetV1CustomersResponse$Outbound,
  z.ZodTypeDef,
  GetV1CustomersResponse
> = z.object({
  meta: z.lazy(() => GetV1CustomersMeta$outboundSchema),
  data: z.array(z.lazy(() => GetV1CustomersData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CustomersResponse$ {
  /** @deprecated use `GetV1CustomersResponse$inboundSchema` instead. */
  export const inboundSchema = GetV1CustomersResponse$inboundSchema;
  /** @deprecated use `GetV1CustomersResponse$outboundSchema` instead. */
  export const outboundSchema = GetV1CustomersResponse$outboundSchema;
  /** @deprecated use `GetV1CustomersResponse$Outbound` instead. */
  export type Outbound = GetV1CustomersResponse$Outbound;
}

export function getV1CustomersResponseToJSON(
  getV1CustomersResponse: GetV1CustomersResponse,
): string {
  return JSON.stringify(
    GetV1CustomersResponse$outboundSchema.parse(getV1CustomersResponse),
  );
}

export function getV1CustomersResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1CustomersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1CustomersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1CustomersResponse' from JSON`,
  );
}
