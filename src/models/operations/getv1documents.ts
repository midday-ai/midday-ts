/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1DocumentsRequest = {
  cursor?: string | null | undefined;
  sort?: Array<string> | null | undefined;
  pageSize?: number | undefined;
  q?: string | null | undefined;
  tags?: Array<string> | null | undefined;
};

/**
 * Pagination metadata for the documents list.
 */
export type GetV1DocumentsMeta = {
  /**
   * Cursor for pagination.
   */
  cursor?: string | null | undefined;
  /**
   * Whether there is a previous page.
   */
  hasPreviousPage: boolean;
  /**
   * Whether there is a next page.
   */
  hasNextPage: boolean;
};

/**
 * Metadata about the document.
 */
export type GetV1DocumentsMetadata = {
  /**
   * Size of the document in bytes.
   */
  size: number | null;
  /**
   * MIME type of the document.
   */
  mimetype: string | null;
};

/**
 * A single document object response.
 */
export type GetV1DocumentsData = {
  /**
   * Unique identifier for the document.
   */
  id: string;
  /**
   * Title of the document.
   */
  title: string | null;
  /**
   * Array of path tokens representing the document's location.
   */
  pathTokens: Array<string>;
  /**
   * Metadata about the document.
   */
  metadata: GetV1DocumentsMetadata | null;
  /**
   * Processing status of the document.
   */
  processingStatus: string;
  /**
   * Summary or extracted content from the document.
   */
  summary: string | null;
  /**
   * Date associated with the document (ISO 8601).
   */
  date: string | null;
};

/**
 * Response containing a list of documents and pagination metadata.
 */
export type GetV1DocumentsResponse = {
  /**
   * Pagination metadata for the documents list.
   */
  meta: GetV1DocumentsMeta;
  /**
   * Array of document objects.
   */
  data: Array<GetV1DocumentsData>;
};

/** @internal */
export const GetV1DocumentsRequest$inboundSchema: z.ZodType<
  GetV1DocumentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  sort: z.nullable(z.array(z.string())).optional(),
  pageSize: z.number().optional(),
  q: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type GetV1DocumentsRequest$Outbound = {
  cursor?: string | null | undefined;
  sort?: Array<string> | null | undefined;
  pageSize?: number | undefined;
  q?: string | null | undefined;
  tags?: Array<string> | null | undefined;
};

/** @internal */
export const GetV1DocumentsRequest$outboundSchema: z.ZodType<
  GetV1DocumentsRequest$Outbound,
  z.ZodTypeDef,
  GetV1DocumentsRequest
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  sort: z.nullable(z.array(z.string())).optional(),
  pageSize: z.number().optional(),
  q: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1DocumentsRequest$ {
  /** @deprecated use `GetV1DocumentsRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1DocumentsRequest$inboundSchema;
  /** @deprecated use `GetV1DocumentsRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1DocumentsRequest$outboundSchema;
  /** @deprecated use `GetV1DocumentsRequest$Outbound` instead. */
  export type Outbound = GetV1DocumentsRequest$Outbound;
}

export function getV1DocumentsRequestToJSON(
  getV1DocumentsRequest: GetV1DocumentsRequest,
): string {
  return JSON.stringify(
    GetV1DocumentsRequest$outboundSchema.parse(getV1DocumentsRequest),
  );
}

export function getV1DocumentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1DocumentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1DocumentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1DocumentsRequest' from JSON`,
  );
}

/** @internal */
export const GetV1DocumentsMeta$inboundSchema: z.ZodType<
  GetV1DocumentsMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  hasPreviousPage: z.boolean(),
  hasNextPage: z.boolean(),
});

/** @internal */
export type GetV1DocumentsMeta$Outbound = {
  cursor?: string | null | undefined;
  hasPreviousPage: boolean;
  hasNextPage: boolean;
};

/** @internal */
export const GetV1DocumentsMeta$outboundSchema: z.ZodType<
  GetV1DocumentsMeta$Outbound,
  z.ZodTypeDef,
  GetV1DocumentsMeta
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  hasPreviousPage: z.boolean(),
  hasNextPage: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1DocumentsMeta$ {
  /** @deprecated use `GetV1DocumentsMeta$inboundSchema` instead. */
  export const inboundSchema = GetV1DocumentsMeta$inboundSchema;
  /** @deprecated use `GetV1DocumentsMeta$outboundSchema` instead. */
  export const outboundSchema = GetV1DocumentsMeta$outboundSchema;
  /** @deprecated use `GetV1DocumentsMeta$Outbound` instead. */
  export type Outbound = GetV1DocumentsMeta$Outbound;
}

export function getV1DocumentsMetaToJSON(
  getV1DocumentsMeta: GetV1DocumentsMeta,
): string {
  return JSON.stringify(
    GetV1DocumentsMeta$outboundSchema.parse(getV1DocumentsMeta),
  );
}

export function getV1DocumentsMetaFromJSON(
  jsonString: string,
): SafeParseResult<GetV1DocumentsMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1DocumentsMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1DocumentsMeta' from JSON`,
  );
}

/** @internal */
export const GetV1DocumentsMetadata$inboundSchema: z.ZodType<
  GetV1DocumentsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  size: z.nullable(z.number()),
  mimetype: z.nullable(z.string()),
});

/** @internal */
export type GetV1DocumentsMetadata$Outbound = {
  size: number | null;
  mimetype: string | null;
};

/** @internal */
export const GetV1DocumentsMetadata$outboundSchema: z.ZodType<
  GetV1DocumentsMetadata$Outbound,
  z.ZodTypeDef,
  GetV1DocumentsMetadata
> = z.object({
  size: z.nullable(z.number()),
  mimetype: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1DocumentsMetadata$ {
  /** @deprecated use `GetV1DocumentsMetadata$inboundSchema` instead. */
  export const inboundSchema = GetV1DocumentsMetadata$inboundSchema;
  /** @deprecated use `GetV1DocumentsMetadata$outboundSchema` instead. */
  export const outboundSchema = GetV1DocumentsMetadata$outboundSchema;
  /** @deprecated use `GetV1DocumentsMetadata$Outbound` instead. */
  export type Outbound = GetV1DocumentsMetadata$Outbound;
}

export function getV1DocumentsMetadataToJSON(
  getV1DocumentsMetadata: GetV1DocumentsMetadata,
): string {
  return JSON.stringify(
    GetV1DocumentsMetadata$outboundSchema.parse(getV1DocumentsMetadata),
  );
}

export function getV1DocumentsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetV1DocumentsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1DocumentsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1DocumentsMetadata' from JSON`,
  );
}

/** @internal */
export const GetV1DocumentsData$inboundSchema: z.ZodType<
  GetV1DocumentsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  title: z.nullable(z.string()),
  pathTokens: z.array(z.string()),
  metadata: z.nullable(z.lazy(() => GetV1DocumentsMetadata$inboundSchema)),
  processingStatus: z.string(),
  summary: z.nullable(z.string()),
  date: z.nullable(z.string()),
});

/** @internal */
export type GetV1DocumentsData$Outbound = {
  id: string;
  title: string | null;
  pathTokens: Array<string>;
  metadata: GetV1DocumentsMetadata$Outbound | null;
  processingStatus: string;
  summary: string | null;
  date: string | null;
};

/** @internal */
export const GetV1DocumentsData$outboundSchema: z.ZodType<
  GetV1DocumentsData$Outbound,
  z.ZodTypeDef,
  GetV1DocumentsData
> = z.object({
  id: z.string(),
  title: z.nullable(z.string()),
  pathTokens: z.array(z.string()),
  metadata: z.nullable(z.lazy(() => GetV1DocumentsMetadata$outboundSchema)),
  processingStatus: z.string(),
  summary: z.nullable(z.string()),
  date: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1DocumentsData$ {
  /** @deprecated use `GetV1DocumentsData$inboundSchema` instead. */
  export const inboundSchema = GetV1DocumentsData$inboundSchema;
  /** @deprecated use `GetV1DocumentsData$outboundSchema` instead. */
  export const outboundSchema = GetV1DocumentsData$outboundSchema;
  /** @deprecated use `GetV1DocumentsData$Outbound` instead. */
  export type Outbound = GetV1DocumentsData$Outbound;
}

export function getV1DocumentsDataToJSON(
  getV1DocumentsData: GetV1DocumentsData,
): string {
  return JSON.stringify(
    GetV1DocumentsData$outboundSchema.parse(getV1DocumentsData),
  );
}

export function getV1DocumentsDataFromJSON(
  jsonString: string,
): SafeParseResult<GetV1DocumentsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1DocumentsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1DocumentsData' from JSON`,
  );
}

/** @internal */
export const GetV1DocumentsResponse$inboundSchema: z.ZodType<
  GetV1DocumentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  meta: z.lazy(() => GetV1DocumentsMeta$inboundSchema),
  data: z.array(z.lazy(() => GetV1DocumentsData$inboundSchema)),
});

/** @internal */
export type GetV1DocumentsResponse$Outbound = {
  meta: GetV1DocumentsMeta$Outbound;
  data: Array<GetV1DocumentsData$Outbound>;
};

/** @internal */
export const GetV1DocumentsResponse$outboundSchema: z.ZodType<
  GetV1DocumentsResponse$Outbound,
  z.ZodTypeDef,
  GetV1DocumentsResponse
> = z.object({
  meta: z.lazy(() => GetV1DocumentsMeta$outboundSchema),
  data: z.array(z.lazy(() => GetV1DocumentsData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1DocumentsResponse$ {
  /** @deprecated use `GetV1DocumentsResponse$inboundSchema` instead. */
  export const inboundSchema = GetV1DocumentsResponse$inboundSchema;
  /** @deprecated use `GetV1DocumentsResponse$outboundSchema` instead. */
  export const outboundSchema = GetV1DocumentsResponse$outboundSchema;
  /** @deprecated use `GetV1DocumentsResponse$Outbound` instead. */
  export type Outbound = GetV1DocumentsResponse$Outbound;
}

export function getV1DocumentsResponseToJSON(
  getV1DocumentsResponse: GetV1DocumentsResponse,
): string {
  return JSON.stringify(
    GetV1DocumentsResponse$outboundSchema.parse(getV1DocumentsResponse),
  );
}

export function getV1DocumentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1DocumentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1DocumentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1DocumentsResponse' from JSON`,
  );
}
