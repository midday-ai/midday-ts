/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1DocumentsIdRequest = {
  id: string | null;
};

/**
 * Metadata about the document.
 */
export type GetV1DocumentsIdMetadata = {
  /**
   * Size of the document in bytes.
   */
  size: number | null;
  /**
   * MIME type of the document.
   */
  mimetype: string | null;
};

/**
 * A single document object response.
 */
export type GetV1DocumentsIdResponse = {
  /**
   * Unique identifier for the document.
   */
  id: string;
  /**
   * Title of the document.
   */
  title: string | null;
  /**
   * Array of path tokens representing the document's location.
   */
  pathTokens: Array<string>;
  /**
   * Metadata about the document.
   */
  metadata: GetV1DocumentsIdMetadata | null;
  /**
   * Processing status of the document.
   */
  processingStatus: string;
  /**
   * Summary or extracted content from the document.
   */
  summary: string | null;
  /**
   * Date associated with the document (ISO 8601).
   */
  date: string | null;
};

/** @internal */
export const GetV1DocumentsIdRequest$inboundSchema: z.ZodType<
  GetV1DocumentsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()),
});

/** @internal */
export type GetV1DocumentsIdRequest$Outbound = {
  id: string | null;
};

/** @internal */
export const GetV1DocumentsIdRequest$outboundSchema: z.ZodType<
  GetV1DocumentsIdRequest$Outbound,
  z.ZodTypeDef,
  GetV1DocumentsIdRequest
> = z.object({
  id: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1DocumentsIdRequest$ {
  /** @deprecated use `GetV1DocumentsIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1DocumentsIdRequest$inboundSchema;
  /** @deprecated use `GetV1DocumentsIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1DocumentsIdRequest$outboundSchema;
  /** @deprecated use `GetV1DocumentsIdRequest$Outbound` instead. */
  export type Outbound = GetV1DocumentsIdRequest$Outbound;
}

export function getV1DocumentsIdRequestToJSON(
  getV1DocumentsIdRequest: GetV1DocumentsIdRequest,
): string {
  return JSON.stringify(
    GetV1DocumentsIdRequest$outboundSchema.parse(getV1DocumentsIdRequest),
  );
}

export function getV1DocumentsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1DocumentsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1DocumentsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1DocumentsIdRequest' from JSON`,
  );
}

/** @internal */
export const GetV1DocumentsIdMetadata$inboundSchema: z.ZodType<
  GetV1DocumentsIdMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  size: z.nullable(z.number()),
  mimetype: z.nullable(z.string()),
});

/** @internal */
export type GetV1DocumentsIdMetadata$Outbound = {
  size: number | null;
  mimetype: string | null;
};

/** @internal */
export const GetV1DocumentsIdMetadata$outboundSchema: z.ZodType<
  GetV1DocumentsIdMetadata$Outbound,
  z.ZodTypeDef,
  GetV1DocumentsIdMetadata
> = z.object({
  size: z.nullable(z.number()),
  mimetype: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1DocumentsIdMetadata$ {
  /** @deprecated use `GetV1DocumentsIdMetadata$inboundSchema` instead. */
  export const inboundSchema = GetV1DocumentsIdMetadata$inboundSchema;
  /** @deprecated use `GetV1DocumentsIdMetadata$outboundSchema` instead. */
  export const outboundSchema = GetV1DocumentsIdMetadata$outboundSchema;
  /** @deprecated use `GetV1DocumentsIdMetadata$Outbound` instead. */
  export type Outbound = GetV1DocumentsIdMetadata$Outbound;
}

export function getV1DocumentsIdMetadataToJSON(
  getV1DocumentsIdMetadata: GetV1DocumentsIdMetadata,
): string {
  return JSON.stringify(
    GetV1DocumentsIdMetadata$outboundSchema.parse(getV1DocumentsIdMetadata),
  );
}

export function getV1DocumentsIdMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetV1DocumentsIdMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1DocumentsIdMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1DocumentsIdMetadata' from JSON`,
  );
}

/** @internal */
export const GetV1DocumentsIdResponse$inboundSchema: z.ZodType<
  GetV1DocumentsIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  title: z.nullable(z.string()),
  pathTokens: z.array(z.string()),
  metadata: z.nullable(z.lazy(() => GetV1DocumentsIdMetadata$inboundSchema)),
  processingStatus: z.string(),
  summary: z.nullable(z.string()),
  date: z.nullable(z.string()),
});

/** @internal */
export type GetV1DocumentsIdResponse$Outbound = {
  id: string;
  title: string | null;
  pathTokens: Array<string>;
  metadata: GetV1DocumentsIdMetadata$Outbound | null;
  processingStatus: string;
  summary: string | null;
  date: string | null;
};

/** @internal */
export const GetV1DocumentsIdResponse$outboundSchema: z.ZodType<
  GetV1DocumentsIdResponse$Outbound,
  z.ZodTypeDef,
  GetV1DocumentsIdResponse
> = z.object({
  id: z.string(),
  title: z.nullable(z.string()),
  pathTokens: z.array(z.string()),
  metadata: z.nullable(z.lazy(() => GetV1DocumentsIdMetadata$outboundSchema)),
  processingStatus: z.string(),
  summary: z.nullable(z.string()),
  date: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1DocumentsIdResponse$ {
  /** @deprecated use `GetV1DocumentsIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetV1DocumentsIdResponse$inboundSchema;
  /** @deprecated use `GetV1DocumentsIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetV1DocumentsIdResponse$outboundSchema;
  /** @deprecated use `GetV1DocumentsIdResponse$Outbound` instead. */
  export type Outbound = GetV1DocumentsIdResponse$Outbound;
}

export function getV1DocumentsIdResponseToJSON(
  getV1DocumentsIdResponse: GetV1DocumentsIdResponse,
): string {
  return JSON.stringify(
    GetV1DocumentsIdResponse$outboundSchema.parse(getV1DocumentsIdResponse),
  );
}

export function getV1DocumentsIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1DocumentsIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1DocumentsIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1DocumentsIdResponse' from JSON`,
  );
}
