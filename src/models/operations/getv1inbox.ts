/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetV1InboxStatus = {
  Done: "done",
  Pending: "pending",
} as const;
export type GetV1InboxStatus = ClosedEnum<typeof GetV1InboxStatus>;

export type GetV1InboxRequest = {
  cursor?: string | null | undefined;
  order?: string | null | undefined;
  pageSize?: number | undefined;
  q?: string | null | undefined;
  status?: GetV1InboxStatus | null | undefined;
};

/**
 * Pagination metadata for the inbox list response.
 */
export type GetV1InboxMeta = {
  /**
   * A cursor for pagination, representing the last item from the previous page.
   */
  cursor?: string | null | undefined;
  /**
   * Whether there is a previous page of results.
   */
  hasPreviousPage: boolean;
  /**
   * Whether there is a next page of results.
   */
  hasNextPage: boolean;
};

/**
 * Matched transaction for this inbox item, if any
 */
export type GetV1InboxTransaction = {
  /**
   * Transaction ID (UUID)
   */
  id: string;
  /**
   * Transaction amount
   */
  amount: number;
  /**
   * Transaction currency (ISO 4217)
   */
  currency: string;
  /**
   * Transaction name or payee
   */
  name: string;
  /**
   * Transaction date (ISO 8601)
   */
  date: string;
};

/**
 * Inbox item object
 */
export type GetV1InboxData = {
  /**
   * Inbox item ID (UUID)
   */
  id: string;
  /**
   * Original file name of the uploaded document
   */
  fileName: string;
  /**
   * Path segments to the file in storage
   */
  filePath: Array<string>;
  /**
   * Display name for the inbox item
   */
  displayName: string;
  /**
   * Amount detected or entered for the inbox item
   */
  amount: number | null;
  /**
   * Currency code (ISO 4217) for the amount
   */
  currency: string | null;
  /**
   * MIME type of the uploaded file
   */
  contentType: string | null;
  /**
   * Date associated with the inbox item (ISO 8601)
   */
  date: string | null;
  /**
   * Status of the inbox item
   */
  status: string;
  /**
   * Date and time when the inbox item was created (ISO 8601)
   */
  createdAt: string;
  /**
   * Website associated with the inbox item, if any
   */
  website: string | null;
  /**
   * Description or notes for the inbox item
   */
  description: string | null;
  /**
   * Matched transaction for this inbox item, if any
   */
  transaction: GetV1InboxTransaction | null;
};

/**
 * Retrieve a list of inbox items for the authenticated team.
 */
export type GetV1InboxResponse = {
  /**
   * Pagination metadata for the inbox list response.
   */
  meta: GetV1InboxMeta;
  /**
   * List of inbox items
   */
  data: Array<GetV1InboxData>;
};

/** @internal */
export const GetV1InboxStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetV1InboxStatus
> = z.nativeEnum(GetV1InboxStatus);

/** @internal */
export const GetV1InboxStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetV1InboxStatus
> = GetV1InboxStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1InboxStatus$ {
  /** @deprecated use `GetV1InboxStatus$inboundSchema` instead. */
  export const inboundSchema = GetV1InboxStatus$inboundSchema;
  /** @deprecated use `GetV1InboxStatus$outboundSchema` instead. */
  export const outboundSchema = GetV1InboxStatus$outboundSchema;
}

/** @internal */
export const GetV1InboxRequest$inboundSchema: z.ZodType<
  GetV1InboxRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  order: z.nullable(z.string()).optional(),
  pageSize: z.number().optional(),
  q: z.nullable(z.string()).optional(),
  status: z.nullable(GetV1InboxStatus$inboundSchema).optional(),
});

/** @internal */
export type GetV1InboxRequest$Outbound = {
  cursor?: string | null | undefined;
  order?: string | null | undefined;
  pageSize?: number | undefined;
  q?: string | null | undefined;
  status?: string | null | undefined;
};

/** @internal */
export const GetV1InboxRequest$outboundSchema: z.ZodType<
  GetV1InboxRequest$Outbound,
  z.ZodTypeDef,
  GetV1InboxRequest
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  order: z.nullable(z.string()).optional(),
  pageSize: z.number().optional(),
  q: z.nullable(z.string()).optional(),
  status: z.nullable(GetV1InboxStatus$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1InboxRequest$ {
  /** @deprecated use `GetV1InboxRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1InboxRequest$inboundSchema;
  /** @deprecated use `GetV1InboxRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1InboxRequest$outboundSchema;
  /** @deprecated use `GetV1InboxRequest$Outbound` instead. */
  export type Outbound = GetV1InboxRequest$Outbound;
}

export function getV1InboxRequestToJSON(
  getV1InboxRequest: GetV1InboxRequest,
): string {
  return JSON.stringify(
    GetV1InboxRequest$outboundSchema.parse(getV1InboxRequest),
  );
}

export function getV1InboxRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1InboxRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1InboxRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1InboxRequest' from JSON`,
  );
}

/** @internal */
export const GetV1InboxMeta$inboundSchema: z.ZodType<
  GetV1InboxMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  hasPreviousPage: z.boolean(),
  hasNextPage: z.boolean(),
});

/** @internal */
export type GetV1InboxMeta$Outbound = {
  cursor?: string | null | undefined;
  hasPreviousPage: boolean;
  hasNextPage: boolean;
};

/** @internal */
export const GetV1InboxMeta$outboundSchema: z.ZodType<
  GetV1InboxMeta$Outbound,
  z.ZodTypeDef,
  GetV1InboxMeta
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  hasPreviousPage: z.boolean(),
  hasNextPage: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1InboxMeta$ {
  /** @deprecated use `GetV1InboxMeta$inboundSchema` instead. */
  export const inboundSchema = GetV1InboxMeta$inboundSchema;
  /** @deprecated use `GetV1InboxMeta$outboundSchema` instead. */
  export const outboundSchema = GetV1InboxMeta$outboundSchema;
  /** @deprecated use `GetV1InboxMeta$Outbound` instead. */
  export type Outbound = GetV1InboxMeta$Outbound;
}

export function getV1InboxMetaToJSON(getV1InboxMeta: GetV1InboxMeta): string {
  return JSON.stringify(GetV1InboxMeta$outboundSchema.parse(getV1InboxMeta));
}

export function getV1InboxMetaFromJSON(
  jsonString: string,
): SafeParseResult<GetV1InboxMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1InboxMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1InboxMeta' from JSON`,
  );
}

/** @internal */
export const GetV1InboxTransaction$inboundSchema: z.ZodType<
  GetV1InboxTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  amount: z.number(),
  currency: z.string(),
  name: z.string(),
  date: z.string(),
});

/** @internal */
export type GetV1InboxTransaction$Outbound = {
  id: string;
  amount: number;
  currency: string;
  name: string;
  date: string;
};

/** @internal */
export const GetV1InboxTransaction$outboundSchema: z.ZodType<
  GetV1InboxTransaction$Outbound,
  z.ZodTypeDef,
  GetV1InboxTransaction
> = z.object({
  id: z.string(),
  amount: z.number(),
  currency: z.string(),
  name: z.string(),
  date: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1InboxTransaction$ {
  /** @deprecated use `GetV1InboxTransaction$inboundSchema` instead. */
  export const inboundSchema = GetV1InboxTransaction$inboundSchema;
  /** @deprecated use `GetV1InboxTransaction$outboundSchema` instead. */
  export const outboundSchema = GetV1InboxTransaction$outboundSchema;
  /** @deprecated use `GetV1InboxTransaction$Outbound` instead. */
  export type Outbound = GetV1InboxTransaction$Outbound;
}

export function getV1InboxTransactionToJSON(
  getV1InboxTransaction: GetV1InboxTransaction,
): string {
  return JSON.stringify(
    GetV1InboxTransaction$outboundSchema.parse(getV1InboxTransaction),
  );
}

export function getV1InboxTransactionFromJSON(
  jsonString: string,
): SafeParseResult<GetV1InboxTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1InboxTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1InboxTransaction' from JSON`,
  );
}

/** @internal */
export const GetV1InboxData$inboundSchema: z.ZodType<
  GetV1InboxData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  fileName: z.string(),
  filePath: z.array(z.string()),
  displayName: z.string(),
  amount: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  contentType: z.nullable(z.string()),
  date: z.nullable(z.string()),
  status: z.string(),
  createdAt: z.string(),
  website: z.nullable(z.string()),
  description: z.nullable(z.string()),
  transaction: z.nullable(z.lazy(() => GetV1InboxTransaction$inboundSchema)),
});

/** @internal */
export type GetV1InboxData$Outbound = {
  id: string;
  fileName: string;
  filePath: Array<string>;
  displayName: string;
  amount: number | null;
  currency: string | null;
  contentType: string | null;
  date: string | null;
  status: string;
  createdAt: string;
  website: string | null;
  description: string | null;
  transaction: GetV1InboxTransaction$Outbound | null;
};

/** @internal */
export const GetV1InboxData$outboundSchema: z.ZodType<
  GetV1InboxData$Outbound,
  z.ZodTypeDef,
  GetV1InboxData
> = z.object({
  id: z.string(),
  fileName: z.string(),
  filePath: z.array(z.string()),
  displayName: z.string(),
  amount: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  contentType: z.nullable(z.string()),
  date: z.nullable(z.string()),
  status: z.string(),
  createdAt: z.string(),
  website: z.nullable(z.string()),
  description: z.nullable(z.string()),
  transaction: z.nullable(z.lazy(() => GetV1InboxTransaction$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1InboxData$ {
  /** @deprecated use `GetV1InboxData$inboundSchema` instead. */
  export const inboundSchema = GetV1InboxData$inboundSchema;
  /** @deprecated use `GetV1InboxData$outboundSchema` instead. */
  export const outboundSchema = GetV1InboxData$outboundSchema;
  /** @deprecated use `GetV1InboxData$Outbound` instead. */
  export type Outbound = GetV1InboxData$Outbound;
}

export function getV1InboxDataToJSON(getV1InboxData: GetV1InboxData): string {
  return JSON.stringify(GetV1InboxData$outboundSchema.parse(getV1InboxData));
}

export function getV1InboxDataFromJSON(
  jsonString: string,
): SafeParseResult<GetV1InboxData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1InboxData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1InboxData' from JSON`,
  );
}

/** @internal */
export const GetV1InboxResponse$inboundSchema: z.ZodType<
  GetV1InboxResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  meta: z.lazy(() => GetV1InboxMeta$inboundSchema),
  data: z.array(z.lazy(() => GetV1InboxData$inboundSchema)),
});

/** @internal */
export type GetV1InboxResponse$Outbound = {
  meta: GetV1InboxMeta$Outbound;
  data: Array<GetV1InboxData$Outbound>;
};

/** @internal */
export const GetV1InboxResponse$outboundSchema: z.ZodType<
  GetV1InboxResponse$Outbound,
  z.ZodTypeDef,
  GetV1InboxResponse
> = z.object({
  meta: z.lazy(() => GetV1InboxMeta$outboundSchema),
  data: z.array(z.lazy(() => GetV1InboxData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1InboxResponse$ {
  /** @deprecated use `GetV1InboxResponse$inboundSchema` instead. */
  export const inboundSchema = GetV1InboxResponse$inboundSchema;
  /** @deprecated use `GetV1InboxResponse$outboundSchema` instead. */
  export const outboundSchema = GetV1InboxResponse$outboundSchema;
  /** @deprecated use `GetV1InboxResponse$Outbound` instead. */
  export type Outbound = GetV1InboxResponse$Outbound;
}

export function getV1InboxResponseToJSON(
  getV1InboxResponse: GetV1InboxResponse,
): string {
  return JSON.stringify(
    GetV1InboxResponse$outboundSchema.parse(getV1InboxResponse),
  );
}

export function getV1InboxResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1InboxResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1InboxResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1InboxResponse' from JSON`,
  );
}
