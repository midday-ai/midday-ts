/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1InvoicesRequest = {
  cursor?: string | null | undefined;
  sort?: Array<string> | null | undefined;
  pageSize?: number | undefined;
  q?: string | null | undefined;
  start?: string | null | undefined;
  end?: string | null | undefined;
  statuses?: Array<string> | null | undefined;
  customers?: Array<string> | null | undefined;
};

/**
 * Pagination metadata
 */
export type GetV1InvoicesMeta = {
  /**
   * Cursor for pagination; null if there is no next page
   */
  cursor: string | null;
  /**
   * Indicates if there is a previous page of results
   */
  hasPreviousPage: boolean;
  /**
   * Indicates if there is a next page of results
   */
  hasNextPage: boolean;
};

/**
 * Current status of the invoice
 */
export const GetV1InvoicesStatus = {
  Draft: "draft",
  Overdue: "overdue",
  Paid: "paid",
  Unpaid: "unpaid",
  Canceled: "canceled",
} as const;
/**
 * Current status of the invoice
 */
export type GetV1InvoicesStatus = ClosedEnum<typeof GetV1InvoicesStatus>;

/**
 * Customer details
 */
export type GetV1InvoicesCustomer = {
  /**
   * Unique identifier for the customer
   */
  id: string;
  /**
   * Name of the customer
   */
  name: string;
  /**
   * Website URL of the customer
   */
  website: string | null;
  /**
   * Email address of the customer
   */
  email: string | null;
};

/**
 * Invoice object
 */
export type GetV1InvoicesData = {
  /**
   * Unique identifier for the invoice
   */
  id: string;
  /**
   * Current status of the invoice
   */
  status: GetV1InvoicesStatus;
  /**
   * Due date of the invoice in ISO 8601 format
   */
  dueDate: string;
  /**
   * Issue date of the invoice in ISO 8601 format
   */
  issueDate: string;
  /**
   * Invoice number as shown to the customer
   */
  invoiceNumber: string;
  /**
   * Total amount of the invoice
   */
  amount: number;
  /**
   * Currency code (ISO 4217) for the invoice amount
   */
  currency: string;
  /**
   * Customer details
   */
  customer: GetV1InvoicesCustomer;
  /**
   * Timestamp when the invoice was paid (ISO 8601), or null if unpaid
   */
  paidAt: string | null;
  /**
   * Timestamp when a payment reminder was sent (ISO 8601), or null if never sent
   */
  reminderSentAt: string | null;
  /**
   * Optional note attached to the invoice
   */
  note: string | null;
  /**
   * Value-added tax amount, or null if not applicable
   */
  vat: number | null;
  /**
   * Tax amount, or null if not applicable
   */
  tax: number | null;
  /**
   * Discount amount applied to the invoice, or null if none
   */
  discount: number | null;
  /**
   * Subtotal before taxes and discounts, or null if not calculated
   */
  subtotal: number | null;
  /**
   * Timestamp when the invoice was viewed by the customer (ISO 8601), or null if never viewed
   */
  viewedAt: string | null;
  /**
   * Name of the customer as shown on the invoice, or null if not set
   */
  customerName: string | null;
  /**
   * Email address to which the invoice was sent, or null if not sent
   */
  sentTo: string | null;
  /**
   * Timestamp when the invoice was sent (ISO 8601), or null if not sent
   */
  sentAt: string | null;
  /**
   * Timestamp when the invoice was created (ISO 8601)
   */
  createdAt: string;
  /**
   * Timestamp when the invoice was last updated (ISO 8601)
   */
  updatedAt: string;
};

/**
 * Response containing a list of invoices and pagination metadata
 */
export type GetV1InvoicesResponse = {
  /**
   * Pagination metadata
   */
  meta: GetV1InvoicesMeta;
  /**
   * Array of invoice objects
   */
  data: Array<GetV1InvoicesData>;
};

/** @internal */
export const GetV1InvoicesRequest$inboundSchema: z.ZodType<
  GetV1InvoicesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  sort: z.nullable(z.array(z.string())).optional(),
  pageSize: z.number().optional(),
  q: z.nullable(z.string()).optional(),
  start: z.nullable(z.string()).optional(),
  end: z.nullable(z.string()).optional(),
  statuses: z.nullable(z.array(z.string())).optional(),
  customers: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type GetV1InvoicesRequest$Outbound = {
  cursor?: string | null | undefined;
  sort?: Array<string> | null | undefined;
  pageSize?: number | undefined;
  q?: string | null | undefined;
  start?: string | null | undefined;
  end?: string | null | undefined;
  statuses?: Array<string> | null | undefined;
  customers?: Array<string> | null | undefined;
};

/** @internal */
export const GetV1InvoicesRequest$outboundSchema: z.ZodType<
  GetV1InvoicesRequest$Outbound,
  z.ZodTypeDef,
  GetV1InvoicesRequest
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  sort: z.nullable(z.array(z.string())).optional(),
  pageSize: z.number().optional(),
  q: z.nullable(z.string()).optional(),
  start: z.nullable(z.string()).optional(),
  end: z.nullable(z.string()).optional(),
  statuses: z.nullable(z.array(z.string())).optional(),
  customers: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1InvoicesRequest$ {
  /** @deprecated use `GetV1InvoicesRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1InvoicesRequest$inboundSchema;
  /** @deprecated use `GetV1InvoicesRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1InvoicesRequest$outboundSchema;
  /** @deprecated use `GetV1InvoicesRequest$Outbound` instead. */
  export type Outbound = GetV1InvoicesRequest$Outbound;
}

export function getV1InvoicesRequestToJSON(
  getV1InvoicesRequest: GetV1InvoicesRequest,
): string {
  return JSON.stringify(
    GetV1InvoicesRequest$outboundSchema.parse(getV1InvoicesRequest),
  );
}

export function getV1InvoicesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1InvoicesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1InvoicesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1InvoicesRequest' from JSON`,
  );
}

/** @internal */
export const GetV1InvoicesMeta$inboundSchema: z.ZodType<
  GetV1InvoicesMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()),
  hasPreviousPage: z.boolean(),
  hasNextPage: z.boolean(),
});

/** @internal */
export type GetV1InvoicesMeta$Outbound = {
  cursor: string | null;
  hasPreviousPage: boolean;
  hasNextPage: boolean;
};

/** @internal */
export const GetV1InvoicesMeta$outboundSchema: z.ZodType<
  GetV1InvoicesMeta$Outbound,
  z.ZodTypeDef,
  GetV1InvoicesMeta
> = z.object({
  cursor: z.nullable(z.string()),
  hasPreviousPage: z.boolean(),
  hasNextPage: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1InvoicesMeta$ {
  /** @deprecated use `GetV1InvoicesMeta$inboundSchema` instead. */
  export const inboundSchema = GetV1InvoicesMeta$inboundSchema;
  /** @deprecated use `GetV1InvoicesMeta$outboundSchema` instead. */
  export const outboundSchema = GetV1InvoicesMeta$outboundSchema;
  /** @deprecated use `GetV1InvoicesMeta$Outbound` instead. */
  export type Outbound = GetV1InvoicesMeta$Outbound;
}

export function getV1InvoicesMetaToJSON(
  getV1InvoicesMeta: GetV1InvoicesMeta,
): string {
  return JSON.stringify(
    GetV1InvoicesMeta$outboundSchema.parse(getV1InvoicesMeta),
  );
}

export function getV1InvoicesMetaFromJSON(
  jsonString: string,
): SafeParseResult<GetV1InvoicesMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1InvoicesMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1InvoicesMeta' from JSON`,
  );
}

/** @internal */
export const GetV1InvoicesStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetV1InvoicesStatus
> = z.nativeEnum(GetV1InvoicesStatus);

/** @internal */
export const GetV1InvoicesStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetV1InvoicesStatus
> = GetV1InvoicesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1InvoicesStatus$ {
  /** @deprecated use `GetV1InvoicesStatus$inboundSchema` instead. */
  export const inboundSchema = GetV1InvoicesStatus$inboundSchema;
  /** @deprecated use `GetV1InvoicesStatus$outboundSchema` instead. */
  export const outboundSchema = GetV1InvoicesStatus$outboundSchema;
}

/** @internal */
export const GetV1InvoicesCustomer$inboundSchema: z.ZodType<
  GetV1InvoicesCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  website: z.nullable(z.string()),
  email: z.nullable(z.string()),
});

/** @internal */
export type GetV1InvoicesCustomer$Outbound = {
  id: string;
  name: string;
  website: string | null;
  email: string | null;
};

/** @internal */
export const GetV1InvoicesCustomer$outboundSchema: z.ZodType<
  GetV1InvoicesCustomer$Outbound,
  z.ZodTypeDef,
  GetV1InvoicesCustomer
> = z.object({
  id: z.string(),
  name: z.string(),
  website: z.nullable(z.string()),
  email: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1InvoicesCustomer$ {
  /** @deprecated use `GetV1InvoicesCustomer$inboundSchema` instead. */
  export const inboundSchema = GetV1InvoicesCustomer$inboundSchema;
  /** @deprecated use `GetV1InvoicesCustomer$outboundSchema` instead. */
  export const outboundSchema = GetV1InvoicesCustomer$outboundSchema;
  /** @deprecated use `GetV1InvoicesCustomer$Outbound` instead. */
  export type Outbound = GetV1InvoicesCustomer$Outbound;
}

export function getV1InvoicesCustomerToJSON(
  getV1InvoicesCustomer: GetV1InvoicesCustomer,
): string {
  return JSON.stringify(
    GetV1InvoicesCustomer$outboundSchema.parse(getV1InvoicesCustomer),
  );
}

export function getV1InvoicesCustomerFromJSON(
  jsonString: string,
): SafeParseResult<GetV1InvoicesCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1InvoicesCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1InvoicesCustomer' from JSON`,
  );
}

/** @internal */
export const GetV1InvoicesData$inboundSchema: z.ZodType<
  GetV1InvoicesData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: GetV1InvoicesStatus$inboundSchema,
  dueDate: z.string(),
  issueDate: z.string(),
  invoiceNumber: z.string(),
  amount: z.number(),
  currency: z.string(),
  customer: z.lazy(() => GetV1InvoicesCustomer$inboundSchema),
  paidAt: z.nullable(z.string()),
  reminderSentAt: z.nullable(z.string()),
  note: z.nullable(z.string()),
  vat: z.nullable(z.number()),
  tax: z.nullable(z.number()),
  discount: z.nullable(z.number()),
  subtotal: z.nullable(z.number()),
  viewedAt: z.nullable(z.string()),
  customerName: z.nullable(z.string()),
  sentTo: z.nullable(z.string()),
  sentAt: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/** @internal */
export type GetV1InvoicesData$Outbound = {
  id: string;
  status: string;
  dueDate: string;
  issueDate: string;
  invoiceNumber: string;
  amount: number;
  currency: string;
  customer: GetV1InvoicesCustomer$Outbound;
  paidAt: string | null;
  reminderSentAt: string | null;
  note: string | null;
  vat: number | null;
  tax: number | null;
  discount: number | null;
  subtotal: number | null;
  viewedAt: string | null;
  customerName: string | null;
  sentTo: string | null;
  sentAt: string | null;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const GetV1InvoicesData$outboundSchema: z.ZodType<
  GetV1InvoicesData$Outbound,
  z.ZodTypeDef,
  GetV1InvoicesData
> = z.object({
  id: z.string(),
  status: GetV1InvoicesStatus$outboundSchema,
  dueDate: z.string(),
  issueDate: z.string(),
  invoiceNumber: z.string(),
  amount: z.number(),
  currency: z.string(),
  customer: z.lazy(() => GetV1InvoicesCustomer$outboundSchema),
  paidAt: z.nullable(z.string()),
  reminderSentAt: z.nullable(z.string()),
  note: z.nullable(z.string()),
  vat: z.nullable(z.number()),
  tax: z.nullable(z.number()),
  discount: z.nullable(z.number()),
  subtotal: z.nullable(z.number()),
  viewedAt: z.nullable(z.string()),
  customerName: z.nullable(z.string()),
  sentTo: z.nullable(z.string()),
  sentAt: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1InvoicesData$ {
  /** @deprecated use `GetV1InvoicesData$inboundSchema` instead. */
  export const inboundSchema = GetV1InvoicesData$inboundSchema;
  /** @deprecated use `GetV1InvoicesData$outboundSchema` instead. */
  export const outboundSchema = GetV1InvoicesData$outboundSchema;
  /** @deprecated use `GetV1InvoicesData$Outbound` instead. */
  export type Outbound = GetV1InvoicesData$Outbound;
}

export function getV1InvoicesDataToJSON(
  getV1InvoicesData: GetV1InvoicesData,
): string {
  return JSON.stringify(
    GetV1InvoicesData$outboundSchema.parse(getV1InvoicesData),
  );
}

export function getV1InvoicesDataFromJSON(
  jsonString: string,
): SafeParseResult<GetV1InvoicesData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1InvoicesData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1InvoicesData' from JSON`,
  );
}

/** @internal */
export const GetV1InvoicesResponse$inboundSchema: z.ZodType<
  GetV1InvoicesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  meta: z.lazy(() => GetV1InvoicesMeta$inboundSchema),
  data: z.array(z.lazy(() => GetV1InvoicesData$inboundSchema)),
});

/** @internal */
export type GetV1InvoicesResponse$Outbound = {
  meta: GetV1InvoicesMeta$Outbound;
  data: Array<GetV1InvoicesData$Outbound>;
};

/** @internal */
export const GetV1InvoicesResponse$outboundSchema: z.ZodType<
  GetV1InvoicesResponse$Outbound,
  z.ZodTypeDef,
  GetV1InvoicesResponse
> = z.object({
  meta: z.lazy(() => GetV1InvoicesMeta$outboundSchema),
  data: z.array(z.lazy(() => GetV1InvoicesData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1InvoicesResponse$ {
  /** @deprecated use `GetV1InvoicesResponse$inboundSchema` instead. */
  export const inboundSchema = GetV1InvoicesResponse$inboundSchema;
  /** @deprecated use `GetV1InvoicesResponse$outboundSchema` instead. */
  export const outboundSchema = GetV1InvoicesResponse$outboundSchema;
  /** @deprecated use `GetV1InvoicesResponse$Outbound` instead. */
  export type Outbound = GetV1InvoicesResponse$Outbound;
}

export function getV1InvoicesResponseToJSON(
  getV1InvoicesResponse: GetV1InvoicesResponse,
): string {
  return JSON.stringify(
    GetV1InvoicesResponse$outboundSchema.parse(getV1InvoicesResponse),
  );
}

export function getV1InvoicesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1InvoicesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1InvoicesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1InvoicesResponse' from JSON`,
  );
}
