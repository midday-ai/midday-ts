/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1InvoicesIdRequest = {
  id: string;
};

/**
 * Current status of the invoice
 */
export const GetV1InvoicesIdStatus = {
  Draft: "draft",
  Overdue: "overdue",
  Paid: "paid",
  Unpaid: "unpaid",
  Canceled: "canceled",
} as const;
/**
 * Current status of the invoice
 */
export type GetV1InvoicesIdStatus = ClosedEnum<typeof GetV1InvoicesIdStatus>;

/**
 * Customer details
 */
export type GetV1InvoicesIdCustomer = {
  /**
   * Unique identifier for the customer
   */
  id: string;
  /**
   * Name of the customer
   */
  name: string;
  /**
   * Website URL of the customer
   */
  website: string | null;
  /**
   * Email address of the customer
   */
  email: string | null;
};

/**
 * Invoice object
 */
export type GetV1InvoicesIdResponse = {
  /**
   * Unique identifier for the invoice
   */
  id: string;
  /**
   * Current status of the invoice
   */
  status: GetV1InvoicesIdStatus;
  /**
   * Due date of the invoice in ISO 8601 format
   */
  dueDate: string;
  /**
   * Issue date of the invoice in ISO 8601 format
   */
  issueDate: string;
  /**
   * Invoice number as shown to the customer
   */
  invoiceNumber: string;
  /**
   * Total amount of the invoice
   */
  amount: number;
  /**
   * Currency code (ISO 4217) for the invoice amount
   */
  currency: string;
  /**
   * Customer details
   */
  customer: GetV1InvoicesIdCustomer;
  /**
   * Timestamp when the invoice was paid (ISO 8601), or null if unpaid
   */
  paidAt: string | null;
  /**
   * Timestamp when a payment reminder was sent (ISO 8601), or null if never sent
   */
  reminderSentAt: string | null;
  /**
   * Optional note attached to the invoice
   */
  note: string | null;
  /**
   * Value-added tax amount, or null if not applicable
   */
  vat: number | null;
  /**
   * Tax amount, or null if not applicable
   */
  tax: number | null;
  /**
   * Discount amount applied to the invoice, or null if none
   */
  discount: number | null;
  /**
   * Subtotal before taxes and discounts, or null if not calculated
   */
  subtotal: number | null;
  /**
   * Timestamp when the invoice was viewed by the customer (ISO 8601), or null if never viewed
   */
  viewedAt: string | null;
  /**
   * Name of the customer as shown on the invoice, or null if not set
   */
  customerName: string | null;
  /**
   * Email address to which the invoice was sent, or null if not sent
   */
  sentTo: string | null;
  /**
   * Timestamp when the invoice was sent (ISO 8601), or null if not sent
   */
  sentAt: string | null;
  /**
   * Timestamp when the invoice was created (ISO 8601)
   */
  createdAt: string;
  /**
   * Timestamp when the invoice was last updated (ISO 8601)
   */
  updatedAt: string;
};

/** @internal */
export const GetV1InvoicesIdRequest$inboundSchema: z.ZodType<
  GetV1InvoicesIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetV1InvoicesIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetV1InvoicesIdRequest$outboundSchema: z.ZodType<
  GetV1InvoicesIdRequest$Outbound,
  z.ZodTypeDef,
  GetV1InvoicesIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1InvoicesIdRequest$ {
  /** @deprecated use `GetV1InvoicesIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1InvoicesIdRequest$inboundSchema;
  /** @deprecated use `GetV1InvoicesIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1InvoicesIdRequest$outboundSchema;
  /** @deprecated use `GetV1InvoicesIdRequest$Outbound` instead. */
  export type Outbound = GetV1InvoicesIdRequest$Outbound;
}

export function getV1InvoicesIdRequestToJSON(
  getV1InvoicesIdRequest: GetV1InvoicesIdRequest,
): string {
  return JSON.stringify(
    GetV1InvoicesIdRequest$outboundSchema.parse(getV1InvoicesIdRequest),
  );
}

export function getV1InvoicesIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1InvoicesIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1InvoicesIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1InvoicesIdRequest' from JSON`,
  );
}

/** @internal */
export const GetV1InvoicesIdStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetV1InvoicesIdStatus
> = z.nativeEnum(GetV1InvoicesIdStatus);

/** @internal */
export const GetV1InvoicesIdStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetV1InvoicesIdStatus
> = GetV1InvoicesIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1InvoicesIdStatus$ {
  /** @deprecated use `GetV1InvoicesIdStatus$inboundSchema` instead. */
  export const inboundSchema = GetV1InvoicesIdStatus$inboundSchema;
  /** @deprecated use `GetV1InvoicesIdStatus$outboundSchema` instead. */
  export const outboundSchema = GetV1InvoicesIdStatus$outboundSchema;
}

/** @internal */
export const GetV1InvoicesIdCustomer$inboundSchema: z.ZodType<
  GetV1InvoicesIdCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  website: z.nullable(z.string()),
  email: z.nullable(z.string()),
});

/** @internal */
export type GetV1InvoicesIdCustomer$Outbound = {
  id: string;
  name: string;
  website: string | null;
  email: string | null;
};

/** @internal */
export const GetV1InvoicesIdCustomer$outboundSchema: z.ZodType<
  GetV1InvoicesIdCustomer$Outbound,
  z.ZodTypeDef,
  GetV1InvoicesIdCustomer
> = z.object({
  id: z.string(),
  name: z.string(),
  website: z.nullable(z.string()),
  email: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1InvoicesIdCustomer$ {
  /** @deprecated use `GetV1InvoicesIdCustomer$inboundSchema` instead. */
  export const inboundSchema = GetV1InvoicesIdCustomer$inboundSchema;
  /** @deprecated use `GetV1InvoicesIdCustomer$outboundSchema` instead. */
  export const outboundSchema = GetV1InvoicesIdCustomer$outboundSchema;
  /** @deprecated use `GetV1InvoicesIdCustomer$Outbound` instead. */
  export type Outbound = GetV1InvoicesIdCustomer$Outbound;
}

export function getV1InvoicesIdCustomerToJSON(
  getV1InvoicesIdCustomer: GetV1InvoicesIdCustomer,
): string {
  return JSON.stringify(
    GetV1InvoicesIdCustomer$outboundSchema.parse(getV1InvoicesIdCustomer),
  );
}

export function getV1InvoicesIdCustomerFromJSON(
  jsonString: string,
): SafeParseResult<GetV1InvoicesIdCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1InvoicesIdCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1InvoicesIdCustomer' from JSON`,
  );
}

/** @internal */
export const GetV1InvoicesIdResponse$inboundSchema: z.ZodType<
  GetV1InvoicesIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: GetV1InvoicesIdStatus$inboundSchema,
  dueDate: z.string(),
  issueDate: z.string(),
  invoiceNumber: z.string(),
  amount: z.number(),
  currency: z.string(),
  customer: z.lazy(() => GetV1InvoicesIdCustomer$inboundSchema),
  paidAt: z.nullable(z.string()),
  reminderSentAt: z.nullable(z.string()),
  note: z.nullable(z.string()),
  vat: z.nullable(z.number()),
  tax: z.nullable(z.number()),
  discount: z.nullable(z.number()),
  subtotal: z.nullable(z.number()),
  viewedAt: z.nullable(z.string()),
  customerName: z.nullable(z.string()),
  sentTo: z.nullable(z.string()),
  sentAt: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/** @internal */
export type GetV1InvoicesIdResponse$Outbound = {
  id: string;
  status: string;
  dueDate: string;
  issueDate: string;
  invoiceNumber: string;
  amount: number;
  currency: string;
  customer: GetV1InvoicesIdCustomer$Outbound;
  paidAt: string | null;
  reminderSentAt: string | null;
  note: string | null;
  vat: number | null;
  tax: number | null;
  discount: number | null;
  subtotal: number | null;
  viewedAt: string | null;
  customerName: string | null;
  sentTo: string | null;
  sentAt: string | null;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const GetV1InvoicesIdResponse$outboundSchema: z.ZodType<
  GetV1InvoicesIdResponse$Outbound,
  z.ZodTypeDef,
  GetV1InvoicesIdResponse
> = z.object({
  id: z.string(),
  status: GetV1InvoicesIdStatus$outboundSchema,
  dueDate: z.string(),
  issueDate: z.string(),
  invoiceNumber: z.string(),
  amount: z.number(),
  currency: z.string(),
  customer: z.lazy(() => GetV1InvoicesIdCustomer$outboundSchema),
  paidAt: z.nullable(z.string()),
  reminderSentAt: z.nullable(z.string()),
  note: z.nullable(z.string()),
  vat: z.nullable(z.number()),
  tax: z.nullable(z.number()),
  discount: z.nullable(z.number()),
  subtotal: z.nullable(z.number()),
  viewedAt: z.nullable(z.string()),
  customerName: z.nullable(z.string()),
  sentTo: z.nullable(z.string()),
  sentAt: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1InvoicesIdResponse$ {
  /** @deprecated use `GetV1InvoicesIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetV1InvoicesIdResponse$inboundSchema;
  /** @deprecated use `GetV1InvoicesIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetV1InvoicesIdResponse$outboundSchema;
  /** @deprecated use `GetV1InvoicesIdResponse$Outbound` instead. */
  export type Outbound = GetV1InvoicesIdResponse$Outbound;
}

export function getV1InvoicesIdResponseToJSON(
  getV1InvoicesIdResponse: GetV1InvoicesIdResponse,
): string {
  return JSON.stringify(
    GetV1InvoicesIdResponse$outboundSchema.parse(getV1InvoicesIdResponse),
  );
}

export function getV1InvoicesIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1InvoicesIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1InvoicesIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1InvoicesIdResponse' from JSON`,
  );
}
