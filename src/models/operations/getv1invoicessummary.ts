/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter summary by invoice status
 */
export const GetV1InvoicesSummaryStatus = {
  Draft: "draft",
  Overdue: "overdue",
  Paid: "paid",
  Unpaid: "unpaid",
  Canceled: "canceled",
} as const;
/**
 * Filter summary by invoice status
 */
export type GetV1InvoicesSummaryStatus = ClosedEnum<
  typeof GetV1InvoicesSummaryStatus
>;

export type GetV1InvoicesSummaryRequest = {
  /**
   * Filter summary by invoice status
   */
  status?: GetV1InvoicesSummaryStatus | undefined;
};

export type GetV1InvoicesSummaryResponse = {
  /**
   * Currency of the invoice
   */
  currency: string;
  /**
   * Total amount of the invoice
   */
  totalAmount: number;
  /**
   * Number of invoices for this currency
   */
  invoiceCount: number;
};

/** @internal */
export const GetV1InvoicesSummaryStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetV1InvoicesSummaryStatus
> = z.nativeEnum(GetV1InvoicesSummaryStatus);

/** @internal */
export const GetV1InvoicesSummaryStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetV1InvoicesSummaryStatus
> = GetV1InvoicesSummaryStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1InvoicesSummaryStatus$ {
  /** @deprecated use `GetV1InvoicesSummaryStatus$inboundSchema` instead. */
  export const inboundSchema = GetV1InvoicesSummaryStatus$inboundSchema;
  /** @deprecated use `GetV1InvoicesSummaryStatus$outboundSchema` instead. */
  export const outboundSchema = GetV1InvoicesSummaryStatus$outboundSchema;
}

/** @internal */
export const GetV1InvoicesSummaryRequest$inboundSchema: z.ZodType<
  GetV1InvoicesSummaryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: GetV1InvoicesSummaryStatus$inboundSchema.optional(),
});

/** @internal */
export type GetV1InvoicesSummaryRequest$Outbound = {
  status?: string | undefined;
};

/** @internal */
export const GetV1InvoicesSummaryRequest$outboundSchema: z.ZodType<
  GetV1InvoicesSummaryRequest$Outbound,
  z.ZodTypeDef,
  GetV1InvoicesSummaryRequest
> = z.object({
  status: GetV1InvoicesSummaryStatus$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1InvoicesSummaryRequest$ {
  /** @deprecated use `GetV1InvoicesSummaryRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1InvoicesSummaryRequest$inboundSchema;
  /** @deprecated use `GetV1InvoicesSummaryRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1InvoicesSummaryRequest$outboundSchema;
  /** @deprecated use `GetV1InvoicesSummaryRequest$Outbound` instead. */
  export type Outbound = GetV1InvoicesSummaryRequest$Outbound;
}

export function getV1InvoicesSummaryRequestToJSON(
  getV1InvoicesSummaryRequest: GetV1InvoicesSummaryRequest,
): string {
  return JSON.stringify(
    GetV1InvoicesSummaryRequest$outboundSchema.parse(
      getV1InvoicesSummaryRequest,
    ),
  );
}

export function getV1InvoicesSummaryRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1InvoicesSummaryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1InvoicesSummaryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1InvoicesSummaryRequest' from JSON`,
  );
}

/** @internal */
export const GetV1InvoicesSummaryResponse$inboundSchema: z.ZodType<
  GetV1InvoicesSummaryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  totalAmount: z.number(),
  invoiceCount: z.number(),
});

/** @internal */
export type GetV1InvoicesSummaryResponse$Outbound = {
  currency: string;
  totalAmount: number;
  invoiceCount: number;
};

/** @internal */
export const GetV1InvoicesSummaryResponse$outboundSchema: z.ZodType<
  GetV1InvoicesSummaryResponse$Outbound,
  z.ZodTypeDef,
  GetV1InvoicesSummaryResponse
> = z.object({
  currency: z.string(),
  totalAmount: z.number(),
  invoiceCount: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1InvoicesSummaryResponse$ {
  /** @deprecated use `GetV1InvoicesSummaryResponse$inboundSchema` instead. */
  export const inboundSchema = GetV1InvoicesSummaryResponse$inboundSchema;
  /** @deprecated use `GetV1InvoicesSummaryResponse$outboundSchema` instead. */
  export const outboundSchema = GetV1InvoicesSummaryResponse$outboundSchema;
  /** @deprecated use `GetV1InvoicesSummaryResponse$Outbound` instead. */
  export type Outbound = GetV1InvoicesSummaryResponse$Outbound;
}

export function getV1InvoicesSummaryResponseToJSON(
  getV1InvoicesSummaryResponse: GetV1InvoicesSummaryResponse,
): string {
  return JSON.stringify(
    GetV1InvoicesSummaryResponse$outboundSchema.parse(
      getV1InvoicesSummaryResponse,
    ),
  );
}

export function getV1InvoicesSummaryResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1InvoicesSummaryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1InvoicesSummaryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1InvoicesSummaryResponse' from JSON`,
  );
}
