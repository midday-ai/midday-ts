/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Current subscription plan of the team
 */
export const GetV1TeamsPlan = {
  Trial: "trial",
  Starter: "starter",
  Pro: "pro",
} as const;
/**
 * Current subscription plan of the team
 */
export type GetV1TeamsPlan = ClosedEnum<typeof GetV1TeamsPlan>;

export type GetV1TeamsData = {
  /**
   * Unique identifier of the team
   */
  id: string;
  /**
   * Name of the team or organization
   */
  name: string;
  /**
   * URL to the team's logo image
   */
  logoUrl: string | null;
  /**
   * Current subscription plan of the team
   */
  plan: GetV1TeamsPlan;
};

/**
 * Retrieve a list of teams for the authenticated user.
 */
export type GetV1TeamsResponse = {
  /**
   * Array of teams that the user has access to
   */
  data: Array<GetV1TeamsData>;
};

/** @internal */
export const GetV1TeamsPlan$inboundSchema: z.ZodNativeEnum<
  typeof GetV1TeamsPlan
> = z.nativeEnum(GetV1TeamsPlan);

/** @internal */
export const GetV1TeamsPlan$outboundSchema: z.ZodNativeEnum<
  typeof GetV1TeamsPlan
> = GetV1TeamsPlan$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1TeamsPlan$ {
  /** @deprecated use `GetV1TeamsPlan$inboundSchema` instead. */
  export const inboundSchema = GetV1TeamsPlan$inboundSchema;
  /** @deprecated use `GetV1TeamsPlan$outboundSchema` instead. */
  export const outboundSchema = GetV1TeamsPlan$outboundSchema;
}

/** @internal */
export const GetV1TeamsData$inboundSchema: z.ZodType<
  GetV1TeamsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  logoUrl: z.nullable(z.string()),
  plan: GetV1TeamsPlan$inboundSchema,
});

/** @internal */
export type GetV1TeamsData$Outbound = {
  id: string;
  name: string;
  logoUrl: string | null;
  plan: string;
};

/** @internal */
export const GetV1TeamsData$outboundSchema: z.ZodType<
  GetV1TeamsData$Outbound,
  z.ZodTypeDef,
  GetV1TeamsData
> = z.object({
  id: z.string(),
  name: z.string(),
  logoUrl: z.nullable(z.string()),
  plan: GetV1TeamsPlan$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1TeamsData$ {
  /** @deprecated use `GetV1TeamsData$inboundSchema` instead. */
  export const inboundSchema = GetV1TeamsData$inboundSchema;
  /** @deprecated use `GetV1TeamsData$outboundSchema` instead. */
  export const outboundSchema = GetV1TeamsData$outboundSchema;
  /** @deprecated use `GetV1TeamsData$Outbound` instead. */
  export type Outbound = GetV1TeamsData$Outbound;
}

export function getV1TeamsDataToJSON(getV1TeamsData: GetV1TeamsData): string {
  return JSON.stringify(GetV1TeamsData$outboundSchema.parse(getV1TeamsData));
}

export function getV1TeamsDataFromJSON(
  jsonString: string,
): SafeParseResult<GetV1TeamsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1TeamsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1TeamsData' from JSON`,
  );
}

/** @internal */
export const GetV1TeamsResponse$inboundSchema: z.ZodType<
  GetV1TeamsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => GetV1TeamsData$inboundSchema)),
});

/** @internal */
export type GetV1TeamsResponse$Outbound = {
  data: Array<GetV1TeamsData$Outbound>;
};

/** @internal */
export const GetV1TeamsResponse$outboundSchema: z.ZodType<
  GetV1TeamsResponse$Outbound,
  z.ZodTypeDef,
  GetV1TeamsResponse
> = z.object({
  data: z.array(z.lazy(() => GetV1TeamsData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1TeamsResponse$ {
  /** @deprecated use `GetV1TeamsResponse$inboundSchema` instead. */
  export const inboundSchema = GetV1TeamsResponse$inboundSchema;
  /** @deprecated use `GetV1TeamsResponse$outboundSchema` instead. */
  export const outboundSchema = GetV1TeamsResponse$outboundSchema;
  /** @deprecated use `GetV1TeamsResponse$Outbound` instead. */
  export type Outbound = GetV1TeamsResponse$Outbound;
}

export function getV1TeamsResponseToJSON(
  getV1TeamsResponse: GetV1TeamsResponse,
): string {
  return JSON.stringify(
    GetV1TeamsResponse$outboundSchema.parse(getV1TeamsResponse),
  );
}

export function getV1TeamsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1TeamsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1TeamsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1TeamsResponse' from JSON`,
  );
}
