/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1TeamsIdRequest = {
  id: string;
};

/**
 * Current subscription plan of the team
 */
export const GetV1TeamsIdPlan = {
  Trial: "trial",
  Starter: "starter",
  Pro: "pro",
} as const;
/**
 * Current subscription plan of the team
 */
export type GetV1TeamsIdPlan = ClosedEnum<typeof GetV1TeamsIdPlan>;

/**
 * Team details
 */
export type GetV1TeamsIdResponse = {
  /**
   * Unique identifier of the team
   */
  id: string;
  /**
   * Name of the team or organization
   */
  name: string;
  /**
   * URL to the team's logo image
   */
  logoUrl: string | null;
  /**
   * Current subscription plan of the team
   */
  plan: GetV1TeamsIdPlan;
};

/** @internal */
export const GetV1TeamsIdRequest$inboundSchema: z.ZodType<
  GetV1TeamsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetV1TeamsIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetV1TeamsIdRequest$outboundSchema: z.ZodType<
  GetV1TeamsIdRequest$Outbound,
  z.ZodTypeDef,
  GetV1TeamsIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1TeamsIdRequest$ {
  /** @deprecated use `GetV1TeamsIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1TeamsIdRequest$inboundSchema;
  /** @deprecated use `GetV1TeamsIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1TeamsIdRequest$outboundSchema;
  /** @deprecated use `GetV1TeamsIdRequest$Outbound` instead. */
  export type Outbound = GetV1TeamsIdRequest$Outbound;
}

export function getV1TeamsIdRequestToJSON(
  getV1TeamsIdRequest: GetV1TeamsIdRequest,
): string {
  return JSON.stringify(
    GetV1TeamsIdRequest$outboundSchema.parse(getV1TeamsIdRequest),
  );
}

export function getV1TeamsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1TeamsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1TeamsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1TeamsIdRequest' from JSON`,
  );
}

/** @internal */
export const GetV1TeamsIdPlan$inboundSchema: z.ZodNativeEnum<
  typeof GetV1TeamsIdPlan
> = z.nativeEnum(GetV1TeamsIdPlan);

/** @internal */
export const GetV1TeamsIdPlan$outboundSchema: z.ZodNativeEnum<
  typeof GetV1TeamsIdPlan
> = GetV1TeamsIdPlan$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1TeamsIdPlan$ {
  /** @deprecated use `GetV1TeamsIdPlan$inboundSchema` instead. */
  export const inboundSchema = GetV1TeamsIdPlan$inboundSchema;
  /** @deprecated use `GetV1TeamsIdPlan$outboundSchema` instead. */
  export const outboundSchema = GetV1TeamsIdPlan$outboundSchema;
}

/** @internal */
export const GetV1TeamsIdResponse$inboundSchema: z.ZodType<
  GetV1TeamsIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  logoUrl: z.nullable(z.string()),
  plan: GetV1TeamsIdPlan$inboundSchema,
});

/** @internal */
export type GetV1TeamsIdResponse$Outbound = {
  id: string;
  name: string;
  logoUrl: string | null;
  plan: string;
};

/** @internal */
export const GetV1TeamsIdResponse$outboundSchema: z.ZodType<
  GetV1TeamsIdResponse$Outbound,
  z.ZodTypeDef,
  GetV1TeamsIdResponse
> = z.object({
  id: z.string(),
  name: z.string(),
  logoUrl: z.nullable(z.string()),
  plan: GetV1TeamsIdPlan$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1TeamsIdResponse$ {
  /** @deprecated use `GetV1TeamsIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetV1TeamsIdResponse$inboundSchema;
  /** @deprecated use `GetV1TeamsIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetV1TeamsIdResponse$outboundSchema;
  /** @deprecated use `GetV1TeamsIdResponse$Outbound` instead. */
  export type Outbound = GetV1TeamsIdResponse$Outbound;
}

export function getV1TeamsIdResponseToJSON(
  getV1TeamsIdResponse: GetV1TeamsIdResponse,
): string {
  return JSON.stringify(
    GetV1TeamsIdResponse$outboundSchema.parse(getV1TeamsIdResponse),
  );
}

export function getV1TeamsIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1TeamsIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1TeamsIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1TeamsIdResponse' from JSON`,
  );
}
