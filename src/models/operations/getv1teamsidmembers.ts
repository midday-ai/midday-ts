/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1TeamsIdMembersRequest = {
  id: string;
};

/**
 * Role of the team member. 'owner' has full permissions, 'member' has limited permissions
 */
export const Role = {
  Owner: "owner",
  Member: "member",
} as const;
/**
 * Role of the team member. 'owner' has full permissions, 'member' has limited permissions
 */
export type Role = ClosedEnum<typeof Role>;

export type GetV1TeamsIdMembersData = {
  /**
   * Unique identifier of the user
   */
  id: string;
  /**
   * Role of the team member. 'owner' has full permissions, 'member' has limited permissions
   */
  role: Role;
  /**
   * Full name of the team member
   */
  fullName: string;
  /**
   * URL to the team member's avatar image
   */
  avatarUrl: string | null;
};

/**
 * Team members
 */
export type GetV1TeamsIdMembersResponse = {
  /**
   * Array of team members with their roles and information
   */
  data: Array<GetV1TeamsIdMembersData>;
};

/** @internal */
export const GetV1TeamsIdMembersRequest$inboundSchema: z.ZodType<
  GetV1TeamsIdMembersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetV1TeamsIdMembersRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetV1TeamsIdMembersRequest$outboundSchema: z.ZodType<
  GetV1TeamsIdMembersRequest$Outbound,
  z.ZodTypeDef,
  GetV1TeamsIdMembersRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1TeamsIdMembersRequest$ {
  /** @deprecated use `GetV1TeamsIdMembersRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1TeamsIdMembersRequest$inboundSchema;
  /** @deprecated use `GetV1TeamsIdMembersRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1TeamsIdMembersRequest$outboundSchema;
  /** @deprecated use `GetV1TeamsIdMembersRequest$Outbound` instead. */
  export type Outbound = GetV1TeamsIdMembersRequest$Outbound;
}

export function getV1TeamsIdMembersRequestToJSON(
  getV1TeamsIdMembersRequest: GetV1TeamsIdMembersRequest,
): string {
  return JSON.stringify(
    GetV1TeamsIdMembersRequest$outboundSchema.parse(getV1TeamsIdMembersRequest),
  );
}

export function getV1TeamsIdMembersRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1TeamsIdMembersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1TeamsIdMembersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1TeamsIdMembersRequest' from JSON`,
  );
}

/** @internal */
export const Role$inboundSchema: z.ZodNativeEnum<typeof Role> = z.nativeEnum(
  Role,
);

/** @internal */
export const Role$outboundSchema: z.ZodNativeEnum<typeof Role> =
  Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Role$ {
  /** @deprecated use `Role$inboundSchema` instead. */
  export const inboundSchema = Role$inboundSchema;
  /** @deprecated use `Role$outboundSchema` instead. */
  export const outboundSchema = Role$outboundSchema;
}

/** @internal */
export const GetV1TeamsIdMembersData$inboundSchema: z.ZodType<
  GetV1TeamsIdMembersData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  role: Role$inboundSchema,
  fullName: z.string(),
  avatarUrl: z.nullable(z.string()),
});

/** @internal */
export type GetV1TeamsIdMembersData$Outbound = {
  id: string;
  role: string;
  fullName: string;
  avatarUrl: string | null;
};

/** @internal */
export const GetV1TeamsIdMembersData$outboundSchema: z.ZodType<
  GetV1TeamsIdMembersData$Outbound,
  z.ZodTypeDef,
  GetV1TeamsIdMembersData
> = z.object({
  id: z.string(),
  role: Role$outboundSchema,
  fullName: z.string(),
  avatarUrl: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1TeamsIdMembersData$ {
  /** @deprecated use `GetV1TeamsIdMembersData$inboundSchema` instead. */
  export const inboundSchema = GetV1TeamsIdMembersData$inboundSchema;
  /** @deprecated use `GetV1TeamsIdMembersData$outboundSchema` instead. */
  export const outboundSchema = GetV1TeamsIdMembersData$outboundSchema;
  /** @deprecated use `GetV1TeamsIdMembersData$Outbound` instead. */
  export type Outbound = GetV1TeamsIdMembersData$Outbound;
}

export function getV1TeamsIdMembersDataToJSON(
  getV1TeamsIdMembersData: GetV1TeamsIdMembersData,
): string {
  return JSON.stringify(
    GetV1TeamsIdMembersData$outboundSchema.parse(getV1TeamsIdMembersData),
  );
}

export function getV1TeamsIdMembersDataFromJSON(
  jsonString: string,
): SafeParseResult<GetV1TeamsIdMembersData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1TeamsIdMembersData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1TeamsIdMembersData' from JSON`,
  );
}

/** @internal */
export const GetV1TeamsIdMembersResponse$inboundSchema: z.ZodType<
  GetV1TeamsIdMembersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => GetV1TeamsIdMembersData$inboundSchema)),
});

/** @internal */
export type GetV1TeamsIdMembersResponse$Outbound = {
  data: Array<GetV1TeamsIdMembersData$Outbound>;
};

/** @internal */
export const GetV1TeamsIdMembersResponse$outboundSchema: z.ZodType<
  GetV1TeamsIdMembersResponse$Outbound,
  z.ZodTypeDef,
  GetV1TeamsIdMembersResponse
> = z.object({
  data: z.array(z.lazy(() => GetV1TeamsIdMembersData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1TeamsIdMembersResponse$ {
  /** @deprecated use `GetV1TeamsIdMembersResponse$inboundSchema` instead. */
  export const inboundSchema = GetV1TeamsIdMembersResponse$inboundSchema;
  /** @deprecated use `GetV1TeamsIdMembersResponse$outboundSchema` instead. */
  export const outboundSchema = GetV1TeamsIdMembersResponse$outboundSchema;
  /** @deprecated use `GetV1TeamsIdMembersResponse$Outbound` instead. */
  export type Outbound = GetV1TeamsIdMembersResponse$Outbound;
}

export function getV1TeamsIdMembersResponseToJSON(
  getV1TeamsIdMembersResponse: GetV1TeamsIdMembersResponse,
): string {
  return JSON.stringify(
    GetV1TeamsIdMembersResponse$outboundSchema.parse(
      getV1TeamsIdMembersResponse,
    ),
  );
}

export function getV1TeamsIdMembersResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1TeamsIdMembersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1TeamsIdMembersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1TeamsIdMembersResponse' from JSON`,
  );
}
