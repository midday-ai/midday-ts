/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter projects by status
 */
export const GetV1TrackerProjectsStatus = {
  InProgress: "in_progress",
  Completed: "completed",
} as const;
/**
 * Filter projects by status
 */
export type GetV1TrackerProjectsStatus = ClosedEnum<
  typeof GetV1TrackerProjectsStatus
>;

export type GetV1TrackerProjectsRequest = {
  cursor?: string | null | undefined;
  pageSize?: number | undefined;
  q?: string | null | undefined;
  start?: string | null | undefined;
  end?: string | null | undefined;
  /**
   * Filter projects by status
   */
  status?: GetV1TrackerProjectsStatus | null | undefined;
  customers?: Array<string> | null | undefined;
  tags?: Array<string> | null | undefined;
  sort?: Array<string> | null | undefined;
};

/** @internal */
export const GetV1TrackerProjectsStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetV1TrackerProjectsStatus
> = z.nativeEnum(GetV1TrackerProjectsStatus);

/** @internal */
export const GetV1TrackerProjectsStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetV1TrackerProjectsStatus
> = GetV1TrackerProjectsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1TrackerProjectsStatus$ {
  /** @deprecated use `GetV1TrackerProjectsStatus$inboundSchema` instead. */
  export const inboundSchema = GetV1TrackerProjectsStatus$inboundSchema;
  /** @deprecated use `GetV1TrackerProjectsStatus$outboundSchema` instead. */
  export const outboundSchema = GetV1TrackerProjectsStatus$outboundSchema;
}

/** @internal */
export const GetV1TrackerProjectsRequest$inboundSchema: z.ZodType<
  GetV1TrackerProjectsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  pageSize: z.number().optional(),
  q: z.nullable(z.string()).optional(),
  start: z.nullable(z.string()).optional(),
  end: z.nullable(z.string()).optional(),
  status: z.nullable(GetV1TrackerProjectsStatus$inboundSchema).optional(),
  customers: z.nullable(z.array(z.string())).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  sort: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type GetV1TrackerProjectsRequest$Outbound = {
  cursor?: string | null | undefined;
  pageSize?: number | undefined;
  q?: string | null | undefined;
  start?: string | null | undefined;
  end?: string | null | undefined;
  status?: string | null | undefined;
  customers?: Array<string> | null | undefined;
  tags?: Array<string> | null | undefined;
  sort?: Array<string> | null | undefined;
};

/** @internal */
export const GetV1TrackerProjectsRequest$outboundSchema: z.ZodType<
  GetV1TrackerProjectsRequest$Outbound,
  z.ZodTypeDef,
  GetV1TrackerProjectsRequest
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  pageSize: z.number().optional(),
  q: z.nullable(z.string()).optional(),
  start: z.nullable(z.string()).optional(),
  end: z.nullable(z.string()).optional(),
  status: z.nullable(GetV1TrackerProjectsStatus$outboundSchema).optional(),
  customers: z.nullable(z.array(z.string())).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  sort: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1TrackerProjectsRequest$ {
  /** @deprecated use `GetV1TrackerProjectsRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1TrackerProjectsRequest$inboundSchema;
  /** @deprecated use `GetV1TrackerProjectsRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1TrackerProjectsRequest$outboundSchema;
  /** @deprecated use `GetV1TrackerProjectsRequest$Outbound` instead. */
  export type Outbound = GetV1TrackerProjectsRequest$Outbound;
}

export function getV1TrackerProjectsRequestToJSON(
  getV1TrackerProjectsRequest: GetV1TrackerProjectsRequest,
): string {
  return JSON.stringify(
    GetV1TrackerProjectsRequest$outboundSchema.parse(
      getV1TrackerProjectsRequest,
    ),
  );
}

export function getV1TrackerProjectsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1TrackerProjectsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1TrackerProjectsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1TrackerProjectsRequest' from JSON`,
  );
}
