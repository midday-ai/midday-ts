/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Filter transactions based on attachment presence. 'include' returns only transactions with attachments, 'exclude' returns only transactions without attachments
 */
export const Attachments = {
  Include: "include",
  Exclude: "exclude",
} as const;
/**
 * Filter transactions based on attachment presence. 'include' returns only transactions with attachments, 'exclude' returns only transactions without attachments
 */
export type Attachments = ClosedEnum<typeof Attachments>;

/**
 * Transaction type to filter by. 'income' for money received, 'expense' for money spent
 */
export const GetV1TransactionsType = {
  Income: "income",
  Expense: "expense",
} as const;
/**
 * Transaction type to filter by. 'income' for money received, 'expense' for money spent
 */
export type GetV1TransactionsType = ClosedEnum<typeof GetV1TransactionsType>;

export type GetV1TransactionsRequest = {
  cursor?: string | null | undefined;
  sort?: Array<string> | null | undefined;
  pageSize?: number | undefined;
  q?: string | null | undefined;
  categories?: Array<string> | null | undefined;
  tags?: Array<string> | null | undefined;
  start?: string | null | undefined;
  end?: string | null | undefined;
  accounts?: Array<string> | null | undefined;
  assignees?: Array<string> | null | undefined;
  statuses?: Array<string> | null | undefined;
  recurring?: Array<string> | null | undefined;
  /**
   * Filter transactions based on attachment presence. 'include' returns only transactions with attachments, 'exclude' returns only transactions without attachments
   */
  attachments?: Attachments | null | undefined;
  amountRange?: Array<number | null> | null | undefined;
  amount?: Array<string> | null | undefined;
  /**
   * Transaction type to filter by. 'income' for money received, 'expense' for money spent
   */
  type?: GetV1TransactionsType | null | undefined;
};

/**
 * Pagination metadata for the transactions response
 */
export type GetV1TransactionsMeta = {
  /**
   * Cursor for the next page of results, undefined if no more pages
   */
  cursor?: string | undefined;
  /**
   * Whether there are more transactions available on the previous page
   */
  hasPreviousPage: boolean;
  /**
   * Whether there are more transactions available on the next page
   */
  hasNextPage: boolean;
};

/**
 * Retrieve a list of transactions for the authenticated team.
 */
export type GetV1TransactionsResponse = {
  /**
   * Pagination metadata for the transactions response
   */
  meta: GetV1TransactionsMeta;
  /**
   * Array of transactions matching the query criteria
   */
  data: Array<models.TransactionResponse>;
};

/** @internal */
export const Attachments$inboundSchema: z.ZodNativeEnum<typeof Attachments> = z
  .nativeEnum(Attachments);

/** @internal */
export const Attachments$outboundSchema: z.ZodNativeEnum<typeof Attachments> =
  Attachments$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Attachments$ {
  /** @deprecated use `Attachments$inboundSchema` instead. */
  export const inboundSchema = Attachments$inboundSchema;
  /** @deprecated use `Attachments$outboundSchema` instead. */
  export const outboundSchema = Attachments$outboundSchema;
}

/** @internal */
export const GetV1TransactionsType$inboundSchema: z.ZodNativeEnum<
  typeof GetV1TransactionsType
> = z.nativeEnum(GetV1TransactionsType);

/** @internal */
export const GetV1TransactionsType$outboundSchema: z.ZodNativeEnum<
  typeof GetV1TransactionsType
> = GetV1TransactionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1TransactionsType$ {
  /** @deprecated use `GetV1TransactionsType$inboundSchema` instead. */
  export const inboundSchema = GetV1TransactionsType$inboundSchema;
  /** @deprecated use `GetV1TransactionsType$outboundSchema` instead. */
  export const outboundSchema = GetV1TransactionsType$outboundSchema;
}

/** @internal */
export const GetV1TransactionsRequest$inboundSchema: z.ZodType<
  GetV1TransactionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  sort: z.nullable(z.array(z.string())).optional(),
  pageSize: z.number().optional(),
  q: z.nullable(z.string()).optional(),
  categories: z.nullable(z.array(z.string())).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  start: z.nullable(z.string()).optional(),
  end: z.nullable(z.string()).optional(),
  accounts: z.nullable(z.array(z.string())).optional(),
  assignees: z.nullable(z.array(z.string())).optional(),
  statuses: z.nullable(z.array(z.string())).optional(),
  recurring: z.nullable(z.array(z.string())).optional(),
  attachments: z.nullable(Attachments$inboundSchema).optional(),
  amountRange: z.nullable(z.array(z.nullable(z.number()))).optional(),
  amount: z.nullable(z.array(z.string())).optional(),
  type: z.nullable(GetV1TransactionsType$inboundSchema).optional(),
});

/** @internal */
export type GetV1TransactionsRequest$Outbound = {
  cursor?: string | null | undefined;
  sort?: Array<string> | null | undefined;
  pageSize?: number | undefined;
  q?: string | null | undefined;
  categories?: Array<string> | null | undefined;
  tags?: Array<string> | null | undefined;
  start?: string | null | undefined;
  end?: string | null | undefined;
  accounts?: Array<string> | null | undefined;
  assignees?: Array<string> | null | undefined;
  statuses?: Array<string> | null | undefined;
  recurring?: Array<string> | null | undefined;
  attachments?: string | null | undefined;
  amountRange?: Array<number | null> | null | undefined;
  amount?: Array<string> | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const GetV1TransactionsRequest$outboundSchema: z.ZodType<
  GetV1TransactionsRequest$Outbound,
  z.ZodTypeDef,
  GetV1TransactionsRequest
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  sort: z.nullable(z.array(z.string())).optional(),
  pageSize: z.number().optional(),
  q: z.nullable(z.string()).optional(),
  categories: z.nullable(z.array(z.string())).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  start: z.nullable(z.string()).optional(),
  end: z.nullable(z.string()).optional(),
  accounts: z.nullable(z.array(z.string())).optional(),
  assignees: z.nullable(z.array(z.string())).optional(),
  statuses: z.nullable(z.array(z.string())).optional(),
  recurring: z.nullable(z.array(z.string())).optional(),
  attachments: z.nullable(Attachments$outboundSchema).optional(),
  amountRange: z.nullable(z.array(z.nullable(z.number()))).optional(),
  amount: z.nullable(z.array(z.string())).optional(),
  type: z.nullable(GetV1TransactionsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1TransactionsRequest$ {
  /** @deprecated use `GetV1TransactionsRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1TransactionsRequest$inboundSchema;
  /** @deprecated use `GetV1TransactionsRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1TransactionsRequest$outboundSchema;
  /** @deprecated use `GetV1TransactionsRequest$Outbound` instead. */
  export type Outbound = GetV1TransactionsRequest$Outbound;
}

export function getV1TransactionsRequestToJSON(
  getV1TransactionsRequest: GetV1TransactionsRequest,
): string {
  return JSON.stringify(
    GetV1TransactionsRequest$outboundSchema.parse(getV1TransactionsRequest),
  );
}

export function getV1TransactionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1TransactionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1TransactionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1TransactionsRequest' from JSON`,
  );
}

/** @internal */
export const GetV1TransactionsMeta$inboundSchema: z.ZodType<
  GetV1TransactionsMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  hasPreviousPage: z.boolean(),
  hasNextPage: z.boolean(),
});

/** @internal */
export type GetV1TransactionsMeta$Outbound = {
  cursor?: string | undefined;
  hasPreviousPage: boolean;
  hasNextPage: boolean;
};

/** @internal */
export const GetV1TransactionsMeta$outboundSchema: z.ZodType<
  GetV1TransactionsMeta$Outbound,
  z.ZodTypeDef,
  GetV1TransactionsMeta
> = z.object({
  cursor: z.string().optional(),
  hasPreviousPage: z.boolean(),
  hasNextPage: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1TransactionsMeta$ {
  /** @deprecated use `GetV1TransactionsMeta$inboundSchema` instead. */
  export const inboundSchema = GetV1TransactionsMeta$inboundSchema;
  /** @deprecated use `GetV1TransactionsMeta$outboundSchema` instead. */
  export const outboundSchema = GetV1TransactionsMeta$outboundSchema;
  /** @deprecated use `GetV1TransactionsMeta$Outbound` instead. */
  export type Outbound = GetV1TransactionsMeta$Outbound;
}

export function getV1TransactionsMetaToJSON(
  getV1TransactionsMeta: GetV1TransactionsMeta,
): string {
  return JSON.stringify(
    GetV1TransactionsMeta$outboundSchema.parse(getV1TransactionsMeta),
  );
}

export function getV1TransactionsMetaFromJSON(
  jsonString: string,
): SafeParseResult<GetV1TransactionsMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1TransactionsMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1TransactionsMeta' from JSON`,
  );
}

/** @internal */
export const GetV1TransactionsResponse$inboundSchema: z.ZodType<
  GetV1TransactionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  meta: z.lazy(() => GetV1TransactionsMeta$inboundSchema),
  data: z.array(models.TransactionResponse$inboundSchema),
});

/** @internal */
export type GetV1TransactionsResponse$Outbound = {
  meta: GetV1TransactionsMeta$Outbound;
  data: Array<models.TransactionResponse$Outbound>;
};

/** @internal */
export const GetV1TransactionsResponse$outboundSchema: z.ZodType<
  GetV1TransactionsResponse$Outbound,
  z.ZodTypeDef,
  GetV1TransactionsResponse
> = z.object({
  meta: z.lazy(() => GetV1TransactionsMeta$outboundSchema),
  data: z.array(models.TransactionResponse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1TransactionsResponse$ {
  /** @deprecated use `GetV1TransactionsResponse$inboundSchema` instead. */
  export const inboundSchema = GetV1TransactionsResponse$inboundSchema;
  /** @deprecated use `GetV1TransactionsResponse$outboundSchema` instead. */
  export const outboundSchema = GetV1TransactionsResponse$outboundSchema;
  /** @deprecated use `GetV1TransactionsResponse$Outbound` instead. */
  export type Outbound = GetV1TransactionsResponse$Outbound;
}

export function getV1TransactionsResponseToJSON(
  getV1TransactionsResponse: GetV1TransactionsResponse,
): string {
  return JSON.stringify(
    GetV1TransactionsResponse$outboundSchema.parse(getV1TransactionsResponse),
  );
}

export function getV1TransactionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1TransactionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1TransactionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1TransactionsResponse' from JSON`,
  );
}
