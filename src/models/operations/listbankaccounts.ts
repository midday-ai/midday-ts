/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListBankAccountsRequest = {
  enabled?: boolean | undefined;
  manual?: boolean | undefined;
};

/**
 * A single bank account object response.
 */
export type ListBankAccountsData = {
  /**
   * Unique identifier for the bank account.
   */
  id: string;
  /**
   * Name of the bank account.
   */
  name: string | null;
  /**
   * Currency code of the bank account (e.g., USD, EUR).
   */
  currency: string | null;
  /**
   * Type of the bank account (e.g., depository, credit).
   */
  type: string | null;
  /**
   * Whether the bank account is enabled.
   */
  enabled: boolean;
  /**
   * Current balance of the bank account.
   */
  balance: number | null;
  /**
   * Whether the bank account is a manual account.
   */
  manual: boolean | null;
};

/**
 * Response containing a list of bank accounts.
 */
export type ListBankAccountsResponse = {
  /**
   * Array of bank account objects.
   */
  data: Array<ListBankAccountsData>;
};

/** @internal */
export const ListBankAccountsRequest$inboundSchema: z.ZodType<
  ListBankAccountsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
  manual: z.boolean().optional(),
});

/** @internal */
export type ListBankAccountsRequest$Outbound = {
  enabled?: boolean | undefined;
  manual?: boolean | undefined;
};

/** @internal */
export const ListBankAccountsRequest$outboundSchema: z.ZodType<
  ListBankAccountsRequest$Outbound,
  z.ZodTypeDef,
  ListBankAccountsRequest
> = z.object({
  enabled: z.boolean().optional(),
  manual: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBankAccountsRequest$ {
  /** @deprecated use `ListBankAccountsRequest$inboundSchema` instead. */
  export const inboundSchema = ListBankAccountsRequest$inboundSchema;
  /** @deprecated use `ListBankAccountsRequest$outboundSchema` instead. */
  export const outboundSchema = ListBankAccountsRequest$outboundSchema;
  /** @deprecated use `ListBankAccountsRequest$Outbound` instead. */
  export type Outbound = ListBankAccountsRequest$Outbound;
}

export function listBankAccountsRequestToJSON(
  listBankAccountsRequest: ListBankAccountsRequest,
): string {
  return JSON.stringify(
    ListBankAccountsRequest$outboundSchema.parse(listBankAccountsRequest),
  );
}

export function listBankAccountsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListBankAccountsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBankAccountsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBankAccountsRequest' from JSON`,
  );
}

/** @internal */
export const ListBankAccountsData$inboundSchema: z.ZodType<
  ListBankAccountsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()),
  currency: z.nullable(z.string()),
  type: z.nullable(z.string()),
  enabled: z.boolean(),
  balance: z.nullable(z.number()),
  manual: z.nullable(z.boolean()),
});

/** @internal */
export type ListBankAccountsData$Outbound = {
  id: string;
  name: string | null;
  currency: string | null;
  type: string | null;
  enabled: boolean;
  balance: number | null;
  manual: boolean | null;
};

/** @internal */
export const ListBankAccountsData$outboundSchema: z.ZodType<
  ListBankAccountsData$Outbound,
  z.ZodTypeDef,
  ListBankAccountsData
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()),
  currency: z.nullable(z.string()),
  type: z.nullable(z.string()),
  enabled: z.boolean(),
  balance: z.nullable(z.number()),
  manual: z.nullable(z.boolean()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBankAccountsData$ {
  /** @deprecated use `ListBankAccountsData$inboundSchema` instead. */
  export const inboundSchema = ListBankAccountsData$inboundSchema;
  /** @deprecated use `ListBankAccountsData$outboundSchema` instead. */
  export const outboundSchema = ListBankAccountsData$outboundSchema;
  /** @deprecated use `ListBankAccountsData$Outbound` instead. */
  export type Outbound = ListBankAccountsData$Outbound;
}

export function listBankAccountsDataToJSON(
  listBankAccountsData: ListBankAccountsData,
): string {
  return JSON.stringify(
    ListBankAccountsData$outboundSchema.parse(listBankAccountsData),
  );
}

export function listBankAccountsDataFromJSON(
  jsonString: string,
): SafeParseResult<ListBankAccountsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBankAccountsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBankAccountsData' from JSON`,
  );
}

/** @internal */
export const ListBankAccountsResponse$inboundSchema: z.ZodType<
  ListBankAccountsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => ListBankAccountsData$inboundSchema)),
});

/** @internal */
export type ListBankAccountsResponse$Outbound = {
  data: Array<ListBankAccountsData$Outbound>;
};

/** @internal */
export const ListBankAccountsResponse$outboundSchema: z.ZodType<
  ListBankAccountsResponse$Outbound,
  z.ZodTypeDef,
  ListBankAccountsResponse
> = z.object({
  data: z.array(z.lazy(() => ListBankAccountsData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBankAccountsResponse$ {
  /** @deprecated use `ListBankAccountsResponse$inboundSchema` instead. */
  export const inboundSchema = ListBankAccountsResponse$inboundSchema;
  /** @deprecated use `ListBankAccountsResponse$outboundSchema` instead. */
  export const outboundSchema = ListBankAccountsResponse$outboundSchema;
  /** @deprecated use `ListBankAccountsResponse$Outbound` instead. */
  export type Outbound = ListBankAccountsResponse$Outbound;
}

export function listBankAccountsResponseToJSON(
  listBankAccountsResponse: ListBankAccountsResponse,
): string {
  return JSON.stringify(
    ListBankAccountsResponse$outboundSchema.parse(listBankAccountsResponse),
  );
}

export function listBankAccountsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListBankAccountsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBankAccountsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBankAccountsResponse' from JSON`,
  );
}
