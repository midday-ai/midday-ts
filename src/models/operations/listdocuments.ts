/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListDocumentsRequest = {
  cursor?: string | null | undefined;
  sort?: Array<string> | null | undefined;
  pageSize?: number | undefined;
  q?: string | null | undefined;
  tags?: Array<string> | null | undefined;
};

/**
 * Pagination metadata for the documents list.
 */
export type ListDocumentsMeta = {
  /**
   * Cursor for pagination.
   */
  cursor?: string | null | undefined;
  /**
   * Whether there is a previous page.
   */
  hasPreviousPage: boolean;
  /**
   * Whether there is a next page.
   */
  hasNextPage: boolean;
};

/**
 * Metadata about the document.
 */
export type ListDocumentsMetadata = {
  /**
   * Size of the document in bytes.
   */
  size: number | null;
  /**
   * MIME type of the document.
   */
  mimetype: string | null;
};

/**
 * A single document object response.
 */
export type ListDocumentsData = {
  /**
   * Unique identifier for the document.
   */
  id: string;
  /**
   * Title of the document.
   */
  title: string | null;
  /**
   * Array of path tokens representing the document's location.
   */
  pathTokens: Array<string>;
  /**
   * Metadata about the document.
   */
  metadata: ListDocumentsMetadata | null;
  /**
   * Processing status of the document.
   */
  processingStatus: string;
  /**
   * Summary or extracted content from the document.
   */
  summary: string | null;
  /**
   * Date associated with the document (ISO 8601).
   */
  date: string | null;
};

/**
 * Response containing a list of documents and pagination metadata.
 */
export type ListDocumentsResponse = {
  /**
   * Pagination metadata for the documents list.
   */
  meta: ListDocumentsMeta;
  /**
   * Array of document objects.
   */
  data: Array<ListDocumentsData>;
};

/** @internal */
export const ListDocumentsRequest$inboundSchema: z.ZodType<
  ListDocumentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  sort: z.nullable(z.array(z.string())).optional(),
  pageSize: z.number().optional(),
  q: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type ListDocumentsRequest$Outbound = {
  cursor?: string | null | undefined;
  sort?: Array<string> | null | undefined;
  pageSize?: number | undefined;
  q?: string | null | undefined;
  tags?: Array<string> | null | undefined;
};

/** @internal */
export const ListDocumentsRequest$outboundSchema: z.ZodType<
  ListDocumentsRequest$Outbound,
  z.ZodTypeDef,
  ListDocumentsRequest
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  sort: z.nullable(z.array(z.string())).optional(),
  pageSize: z.number().optional(),
  q: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListDocumentsRequest$ {
  /** @deprecated use `ListDocumentsRequest$inboundSchema` instead. */
  export const inboundSchema = ListDocumentsRequest$inboundSchema;
  /** @deprecated use `ListDocumentsRequest$outboundSchema` instead. */
  export const outboundSchema = ListDocumentsRequest$outboundSchema;
  /** @deprecated use `ListDocumentsRequest$Outbound` instead. */
  export type Outbound = ListDocumentsRequest$Outbound;
}

export function listDocumentsRequestToJSON(
  listDocumentsRequest: ListDocumentsRequest,
): string {
  return JSON.stringify(
    ListDocumentsRequest$outboundSchema.parse(listDocumentsRequest),
  );
}

export function listDocumentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListDocumentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListDocumentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListDocumentsRequest' from JSON`,
  );
}

/** @internal */
export const ListDocumentsMeta$inboundSchema: z.ZodType<
  ListDocumentsMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  hasPreviousPage: z.boolean(),
  hasNextPage: z.boolean(),
});

/** @internal */
export type ListDocumentsMeta$Outbound = {
  cursor?: string | null | undefined;
  hasPreviousPage: boolean;
  hasNextPage: boolean;
};

/** @internal */
export const ListDocumentsMeta$outboundSchema: z.ZodType<
  ListDocumentsMeta$Outbound,
  z.ZodTypeDef,
  ListDocumentsMeta
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  hasPreviousPage: z.boolean(),
  hasNextPage: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListDocumentsMeta$ {
  /** @deprecated use `ListDocumentsMeta$inboundSchema` instead. */
  export const inboundSchema = ListDocumentsMeta$inboundSchema;
  /** @deprecated use `ListDocumentsMeta$outboundSchema` instead. */
  export const outboundSchema = ListDocumentsMeta$outboundSchema;
  /** @deprecated use `ListDocumentsMeta$Outbound` instead. */
  export type Outbound = ListDocumentsMeta$Outbound;
}

export function listDocumentsMetaToJSON(
  listDocumentsMeta: ListDocumentsMeta,
): string {
  return JSON.stringify(
    ListDocumentsMeta$outboundSchema.parse(listDocumentsMeta),
  );
}

export function listDocumentsMetaFromJSON(
  jsonString: string,
): SafeParseResult<ListDocumentsMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListDocumentsMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListDocumentsMeta' from JSON`,
  );
}

/** @internal */
export const ListDocumentsMetadata$inboundSchema: z.ZodType<
  ListDocumentsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  size: z.nullable(z.number()),
  mimetype: z.nullable(z.string()),
});

/** @internal */
export type ListDocumentsMetadata$Outbound = {
  size: number | null;
  mimetype: string | null;
};

/** @internal */
export const ListDocumentsMetadata$outboundSchema: z.ZodType<
  ListDocumentsMetadata$Outbound,
  z.ZodTypeDef,
  ListDocumentsMetadata
> = z.object({
  size: z.nullable(z.number()),
  mimetype: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListDocumentsMetadata$ {
  /** @deprecated use `ListDocumentsMetadata$inboundSchema` instead. */
  export const inboundSchema = ListDocumentsMetadata$inboundSchema;
  /** @deprecated use `ListDocumentsMetadata$outboundSchema` instead. */
  export const outboundSchema = ListDocumentsMetadata$outboundSchema;
  /** @deprecated use `ListDocumentsMetadata$Outbound` instead. */
  export type Outbound = ListDocumentsMetadata$Outbound;
}

export function listDocumentsMetadataToJSON(
  listDocumentsMetadata: ListDocumentsMetadata,
): string {
  return JSON.stringify(
    ListDocumentsMetadata$outboundSchema.parse(listDocumentsMetadata),
  );
}

export function listDocumentsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ListDocumentsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListDocumentsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListDocumentsMetadata' from JSON`,
  );
}

/** @internal */
export const ListDocumentsData$inboundSchema: z.ZodType<
  ListDocumentsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  title: z.nullable(z.string()),
  pathTokens: z.array(z.string()),
  metadata: z.nullable(z.lazy(() => ListDocumentsMetadata$inboundSchema)),
  processingStatus: z.string(),
  summary: z.nullable(z.string()),
  date: z.nullable(z.string()),
});

/** @internal */
export type ListDocumentsData$Outbound = {
  id: string;
  title: string | null;
  pathTokens: Array<string>;
  metadata: ListDocumentsMetadata$Outbound | null;
  processingStatus: string;
  summary: string | null;
  date: string | null;
};

/** @internal */
export const ListDocumentsData$outboundSchema: z.ZodType<
  ListDocumentsData$Outbound,
  z.ZodTypeDef,
  ListDocumentsData
> = z.object({
  id: z.string(),
  title: z.nullable(z.string()),
  pathTokens: z.array(z.string()),
  metadata: z.nullable(z.lazy(() => ListDocumentsMetadata$outboundSchema)),
  processingStatus: z.string(),
  summary: z.nullable(z.string()),
  date: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListDocumentsData$ {
  /** @deprecated use `ListDocumentsData$inboundSchema` instead. */
  export const inboundSchema = ListDocumentsData$inboundSchema;
  /** @deprecated use `ListDocumentsData$outboundSchema` instead. */
  export const outboundSchema = ListDocumentsData$outboundSchema;
  /** @deprecated use `ListDocumentsData$Outbound` instead. */
  export type Outbound = ListDocumentsData$Outbound;
}

export function listDocumentsDataToJSON(
  listDocumentsData: ListDocumentsData,
): string {
  return JSON.stringify(
    ListDocumentsData$outboundSchema.parse(listDocumentsData),
  );
}

export function listDocumentsDataFromJSON(
  jsonString: string,
): SafeParseResult<ListDocumentsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListDocumentsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListDocumentsData' from JSON`,
  );
}

/** @internal */
export const ListDocumentsResponse$inboundSchema: z.ZodType<
  ListDocumentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  meta: z.lazy(() => ListDocumentsMeta$inboundSchema),
  data: z.array(z.lazy(() => ListDocumentsData$inboundSchema)),
});

/** @internal */
export type ListDocumentsResponse$Outbound = {
  meta: ListDocumentsMeta$Outbound;
  data: Array<ListDocumentsData$Outbound>;
};

/** @internal */
export const ListDocumentsResponse$outboundSchema: z.ZodType<
  ListDocumentsResponse$Outbound,
  z.ZodTypeDef,
  ListDocumentsResponse
> = z.object({
  meta: z.lazy(() => ListDocumentsMeta$outboundSchema),
  data: z.array(z.lazy(() => ListDocumentsData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListDocumentsResponse$ {
  /** @deprecated use `ListDocumentsResponse$inboundSchema` instead. */
  export const inboundSchema = ListDocumentsResponse$inboundSchema;
  /** @deprecated use `ListDocumentsResponse$outboundSchema` instead. */
  export const outboundSchema = ListDocumentsResponse$outboundSchema;
  /** @deprecated use `ListDocumentsResponse$Outbound` instead. */
  export type Outbound = ListDocumentsResponse$Outbound;
}

export function listDocumentsResponseToJSON(
  listDocumentsResponse: ListDocumentsResponse,
): string {
  return JSON.stringify(
    ListDocumentsResponse$outboundSchema.parse(listDocumentsResponse),
  );
}

export function listDocumentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListDocumentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListDocumentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListDocumentsResponse' from JSON`,
  );
}
