/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ListInboxItemsStatus = {
  Done: "done",
  Pending: "pending",
} as const;
export type ListInboxItemsStatus = ClosedEnum<typeof ListInboxItemsStatus>;

export type ListInboxItemsRequest = {
  cursor?: string | null | undefined;
  order?: string | null | undefined;
  pageSize?: number | undefined;
  q?: string | null | undefined;
  status?: ListInboxItemsStatus | null | undefined;
};

/**
 * Pagination metadata for the inbox list response.
 */
export type ListInboxItemsMeta = {
  /**
   * A cursor for pagination, representing the last item from the previous page.
   */
  cursor?: string | null | undefined;
  /**
   * Whether there is a previous page of results.
   */
  hasPreviousPage: boolean;
  /**
   * Whether there is a next page of results.
   */
  hasNextPage: boolean;
};

/**
 * Matched transaction for this inbox item, if any
 */
export type ListInboxItemsTransaction = {
  /**
   * Transaction ID (UUID)
   */
  id: string;
  /**
   * Transaction amount
   */
  amount: number;
  /**
   * Transaction currency (ISO 4217)
   */
  currency: string;
  /**
   * Transaction name or payee
   */
  name: string;
  /**
   * Transaction date (ISO 8601)
   */
  date: string;
};

/**
 * Inbox item object
 */
export type ListInboxItemsData = {
  /**
   * Inbox item ID (UUID)
   */
  id: string;
  /**
   * Original file name of the uploaded document
   */
  fileName: string;
  /**
   * Path segments to the file in storage
   */
  filePath: Array<string>;
  /**
   * Display name for the inbox item
   */
  displayName: string;
  /**
   * Amount detected or entered for the inbox item
   */
  amount: number | null;
  /**
   * Currency code (ISO 4217) for the amount
   */
  currency: string | null;
  /**
   * MIME type of the uploaded file
   */
  contentType: string | null;
  /**
   * Date associated with the inbox item (ISO 8601)
   */
  date: string | null;
  /**
   * Status of the inbox item
   */
  status: string;
  /**
   * Date and time when the inbox item was created (ISO 8601)
   */
  createdAt: string;
  /**
   * Website associated with the inbox item, if any
   */
  website: string | null;
  /**
   * Description or notes for the inbox item
   */
  description: string | null;
  /**
   * Matched transaction for this inbox item, if any
   */
  transaction: ListInboxItemsTransaction | null;
};

/**
 * Retrieve a list of inbox items for the authenticated team.
 */
export type ListInboxItemsResponse = {
  /**
   * Pagination metadata for the inbox list response.
   */
  meta: ListInboxItemsMeta;
  /**
   * List of inbox items
   */
  data: Array<ListInboxItemsData>;
};

/** @internal */
export const ListInboxItemsStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListInboxItemsStatus
> = z.nativeEnum(ListInboxItemsStatus);

/** @internal */
export const ListInboxItemsStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListInboxItemsStatus
> = ListInboxItemsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInboxItemsStatus$ {
  /** @deprecated use `ListInboxItemsStatus$inboundSchema` instead. */
  export const inboundSchema = ListInboxItemsStatus$inboundSchema;
  /** @deprecated use `ListInboxItemsStatus$outboundSchema` instead. */
  export const outboundSchema = ListInboxItemsStatus$outboundSchema;
}

/** @internal */
export const ListInboxItemsRequest$inboundSchema: z.ZodType<
  ListInboxItemsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  order: z.nullable(z.string()).optional(),
  pageSize: z.number().optional(),
  q: z.nullable(z.string()).optional(),
  status: z.nullable(ListInboxItemsStatus$inboundSchema).optional(),
});

/** @internal */
export type ListInboxItemsRequest$Outbound = {
  cursor?: string | null | undefined;
  order?: string | null | undefined;
  pageSize?: number | undefined;
  q?: string | null | undefined;
  status?: string | null | undefined;
};

/** @internal */
export const ListInboxItemsRequest$outboundSchema: z.ZodType<
  ListInboxItemsRequest$Outbound,
  z.ZodTypeDef,
  ListInboxItemsRequest
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  order: z.nullable(z.string()).optional(),
  pageSize: z.number().optional(),
  q: z.nullable(z.string()).optional(),
  status: z.nullable(ListInboxItemsStatus$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInboxItemsRequest$ {
  /** @deprecated use `ListInboxItemsRequest$inboundSchema` instead. */
  export const inboundSchema = ListInboxItemsRequest$inboundSchema;
  /** @deprecated use `ListInboxItemsRequest$outboundSchema` instead. */
  export const outboundSchema = ListInboxItemsRequest$outboundSchema;
  /** @deprecated use `ListInboxItemsRequest$Outbound` instead. */
  export type Outbound = ListInboxItemsRequest$Outbound;
}

export function listInboxItemsRequestToJSON(
  listInboxItemsRequest: ListInboxItemsRequest,
): string {
  return JSON.stringify(
    ListInboxItemsRequest$outboundSchema.parse(listInboxItemsRequest),
  );
}

export function listInboxItemsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListInboxItemsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInboxItemsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInboxItemsRequest' from JSON`,
  );
}

/** @internal */
export const ListInboxItemsMeta$inboundSchema: z.ZodType<
  ListInboxItemsMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  hasPreviousPage: z.boolean(),
  hasNextPage: z.boolean(),
});

/** @internal */
export type ListInboxItemsMeta$Outbound = {
  cursor?: string | null | undefined;
  hasPreviousPage: boolean;
  hasNextPage: boolean;
};

/** @internal */
export const ListInboxItemsMeta$outboundSchema: z.ZodType<
  ListInboxItemsMeta$Outbound,
  z.ZodTypeDef,
  ListInboxItemsMeta
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  hasPreviousPage: z.boolean(),
  hasNextPage: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInboxItemsMeta$ {
  /** @deprecated use `ListInboxItemsMeta$inboundSchema` instead. */
  export const inboundSchema = ListInboxItemsMeta$inboundSchema;
  /** @deprecated use `ListInboxItemsMeta$outboundSchema` instead. */
  export const outboundSchema = ListInboxItemsMeta$outboundSchema;
  /** @deprecated use `ListInboxItemsMeta$Outbound` instead. */
  export type Outbound = ListInboxItemsMeta$Outbound;
}

export function listInboxItemsMetaToJSON(
  listInboxItemsMeta: ListInboxItemsMeta,
): string {
  return JSON.stringify(
    ListInboxItemsMeta$outboundSchema.parse(listInboxItemsMeta),
  );
}

export function listInboxItemsMetaFromJSON(
  jsonString: string,
): SafeParseResult<ListInboxItemsMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInboxItemsMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInboxItemsMeta' from JSON`,
  );
}

/** @internal */
export const ListInboxItemsTransaction$inboundSchema: z.ZodType<
  ListInboxItemsTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  amount: z.number(),
  currency: z.string(),
  name: z.string(),
  date: z.string(),
});

/** @internal */
export type ListInboxItemsTransaction$Outbound = {
  id: string;
  amount: number;
  currency: string;
  name: string;
  date: string;
};

/** @internal */
export const ListInboxItemsTransaction$outboundSchema: z.ZodType<
  ListInboxItemsTransaction$Outbound,
  z.ZodTypeDef,
  ListInboxItemsTransaction
> = z.object({
  id: z.string(),
  amount: z.number(),
  currency: z.string(),
  name: z.string(),
  date: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInboxItemsTransaction$ {
  /** @deprecated use `ListInboxItemsTransaction$inboundSchema` instead. */
  export const inboundSchema = ListInboxItemsTransaction$inboundSchema;
  /** @deprecated use `ListInboxItemsTransaction$outboundSchema` instead. */
  export const outboundSchema = ListInboxItemsTransaction$outboundSchema;
  /** @deprecated use `ListInboxItemsTransaction$Outbound` instead. */
  export type Outbound = ListInboxItemsTransaction$Outbound;
}

export function listInboxItemsTransactionToJSON(
  listInboxItemsTransaction: ListInboxItemsTransaction,
): string {
  return JSON.stringify(
    ListInboxItemsTransaction$outboundSchema.parse(listInboxItemsTransaction),
  );
}

export function listInboxItemsTransactionFromJSON(
  jsonString: string,
): SafeParseResult<ListInboxItemsTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInboxItemsTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInboxItemsTransaction' from JSON`,
  );
}

/** @internal */
export const ListInboxItemsData$inboundSchema: z.ZodType<
  ListInboxItemsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  fileName: z.string(),
  filePath: z.array(z.string()),
  displayName: z.string(),
  amount: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  contentType: z.nullable(z.string()),
  date: z.nullable(z.string()),
  status: z.string(),
  createdAt: z.string(),
  website: z.nullable(z.string()),
  description: z.nullable(z.string()),
  transaction: z.nullable(
    z.lazy(() => ListInboxItemsTransaction$inboundSchema),
  ),
});

/** @internal */
export type ListInboxItemsData$Outbound = {
  id: string;
  fileName: string;
  filePath: Array<string>;
  displayName: string;
  amount: number | null;
  currency: string | null;
  contentType: string | null;
  date: string | null;
  status: string;
  createdAt: string;
  website: string | null;
  description: string | null;
  transaction: ListInboxItemsTransaction$Outbound | null;
};

/** @internal */
export const ListInboxItemsData$outboundSchema: z.ZodType<
  ListInboxItemsData$Outbound,
  z.ZodTypeDef,
  ListInboxItemsData
> = z.object({
  id: z.string(),
  fileName: z.string(),
  filePath: z.array(z.string()),
  displayName: z.string(),
  amount: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  contentType: z.nullable(z.string()),
  date: z.nullable(z.string()),
  status: z.string(),
  createdAt: z.string(),
  website: z.nullable(z.string()),
  description: z.nullable(z.string()),
  transaction: z.nullable(
    z.lazy(() => ListInboxItemsTransaction$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInboxItemsData$ {
  /** @deprecated use `ListInboxItemsData$inboundSchema` instead. */
  export const inboundSchema = ListInboxItemsData$inboundSchema;
  /** @deprecated use `ListInboxItemsData$outboundSchema` instead. */
  export const outboundSchema = ListInboxItemsData$outboundSchema;
  /** @deprecated use `ListInboxItemsData$Outbound` instead. */
  export type Outbound = ListInboxItemsData$Outbound;
}

export function listInboxItemsDataToJSON(
  listInboxItemsData: ListInboxItemsData,
): string {
  return JSON.stringify(
    ListInboxItemsData$outboundSchema.parse(listInboxItemsData),
  );
}

export function listInboxItemsDataFromJSON(
  jsonString: string,
): SafeParseResult<ListInboxItemsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInboxItemsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInboxItemsData' from JSON`,
  );
}

/** @internal */
export const ListInboxItemsResponse$inboundSchema: z.ZodType<
  ListInboxItemsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  meta: z.lazy(() => ListInboxItemsMeta$inboundSchema),
  data: z.array(z.lazy(() => ListInboxItemsData$inboundSchema)),
});

/** @internal */
export type ListInboxItemsResponse$Outbound = {
  meta: ListInboxItemsMeta$Outbound;
  data: Array<ListInboxItemsData$Outbound>;
};

/** @internal */
export const ListInboxItemsResponse$outboundSchema: z.ZodType<
  ListInboxItemsResponse$Outbound,
  z.ZodTypeDef,
  ListInboxItemsResponse
> = z.object({
  meta: z.lazy(() => ListInboxItemsMeta$outboundSchema),
  data: z.array(z.lazy(() => ListInboxItemsData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInboxItemsResponse$ {
  /** @deprecated use `ListInboxItemsResponse$inboundSchema` instead. */
  export const inboundSchema = ListInboxItemsResponse$inboundSchema;
  /** @deprecated use `ListInboxItemsResponse$outboundSchema` instead. */
  export const outboundSchema = ListInboxItemsResponse$outboundSchema;
  /** @deprecated use `ListInboxItemsResponse$Outbound` instead. */
  export type Outbound = ListInboxItemsResponse$Outbound;
}

export function listInboxItemsResponseToJSON(
  listInboxItemsResponse: ListInboxItemsResponse,
): string {
  return JSON.stringify(
    ListInboxItemsResponse$outboundSchema.parse(listInboxItemsResponse),
  );
}

export function listInboxItemsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListInboxItemsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInboxItemsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInboxItemsResponse' from JSON`,
  );
}
