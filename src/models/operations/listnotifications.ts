/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ListNotificationsStatusEnum2 = {
  Unread: "unread",
  Read: "read",
  Archived: "archived",
} as const;
export type ListNotificationsStatusEnum2 = ClosedEnum<
  typeof ListNotificationsStatusEnum2
>;

export const ListNotificationsStatusEnum1 = {
  Unread: "unread",
  Read: "read",
  Archived: "archived",
} as const;
export type ListNotificationsStatusEnum1 = ClosedEnum<
  typeof ListNotificationsStatusEnum1
>;

/**
 * Filter by notification status. Can be a single status or array of statuses. unread = new notifications, read = viewed but not dismissed, archived = dismissed from view
 */
export type Status =
  | ListNotificationsStatusEnum1
  | Array<ListNotificationsStatusEnum2>;

export type ListNotificationsRequest = {
  cursor?: string | null | undefined;
  pageSize?: number | undefined;
  /**
   * Filter by notification status. Can be a single status or array of statuses. unread = new notifications, read = viewed but not dismissed, archived = dismissed from view
   */
  status?:
    | ListNotificationsStatusEnum1
    | Array<ListNotificationsStatusEnum2>
    | undefined;
  userId?: string | null | undefined;
  priority?: number | null | undefined;
  maxPriority?: number | null | undefined;
};

/** @internal */
export const ListNotificationsStatusEnum2$inboundSchema: z.ZodNativeEnum<
  typeof ListNotificationsStatusEnum2
> = z.nativeEnum(ListNotificationsStatusEnum2);

/** @internal */
export const ListNotificationsStatusEnum2$outboundSchema: z.ZodNativeEnum<
  typeof ListNotificationsStatusEnum2
> = ListNotificationsStatusEnum2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListNotificationsStatusEnum2$ {
  /** @deprecated use `ListNotificationsStatusEnum2$inboundSchema` instead. */
  export const inboundSchema = ListNotificationsStatusEnum2$inboundSchema;
  /** @deprecated use `ListNotificationsStatusEnum2$outboundSchema` instead. */
  export const outboundSchema = ListNotificationsStatusEnum2$outboundSchema;
}

/** @internal */
export const ListNotificationsStatusEnum1$inboundSchema: z.ZodNativeEnum<
  typeof ListNotificationsStatusEnum1
> = z.nativeEnum(ListNotificationsStatusEnum1);

/** @internal */
export const ListNotificationsStatusEnum1$outboundSchema: z.ZodNativeEnum<
  typeof ListNotificationsStatusEnum1
> = ListNotificationsStatusEnum1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListNotificationsStatusEnum1$ {
  /** @deprecated use `ListNotificationsStatusEnum1$inboundSchema` instead. */
  export const inboundSchema = ListNotificationsStatusEnum1$inboundSchema;
  /** @deprecated use `ListNotificationsStatusEnum1$outboundSchema` instead. */
  export const outboundSchema = ListNotificationsStatusEnum1$outboundSchema;
}

/** @internal */
export const Status$inboundSchema: z.ZodType<Status, z.ZodTypeDef, unknown> = z
  .union([
    ListNotificationsStatusEnum1$inboundSchema,
    z.array(ListNotificationsStatusEnum2$inboundSchema),
  ]);

/** @internal */
export type Status$Outbound = string | Array<string>;

/** @internal */
export const Status$outboundSchema: z.ZodType<
  Status$Outbound,
  z.ZodTypeDef,
  Status
> = z.union([
  ListNotificationsStatusEnum1$outboundSchema,
  z.array(ListNotificationsStatusEnum2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
  /** @deprecated use `Status$Outbound` instead. */
  export type Outbound = Status$Outbound;
}

export function statusToJSON(status: Status): string {
  return JSON.stringify(Status$outboundSchema.parse(status));
}

export function statusFromJSON(
  jsonString: string,
): SafeParseResult<Status, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Status$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Status' from JSON`,
  );
}

/** @internal */
export const ListNotificationsRequest$inboundSchema: z.ZodType<
  ListNotificationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  pageSize: z.number().optional(),
  status: z.union([
    ListNotificationsStatusEnum1$inboundSchema,
    z.array(ListNotificationsStatusEnum2$inboundSchema),
  ]).optional(),
  userId: z.nullable(z.string()).optional(),
  priority: z.nullable(z.number().int()).optional(),
  maxPriority: z.nullable(z.number().int()).optional(),
});

/** @internal */
export type ListNotificationsRequest$Outbound = {
  cursor?: string | null | undefined;
  pageSize?: number | undefined;
  status?: string | Array<string> | undefined;
  userId?: string | null | undefined;
  priority?: number | null | undefined;
  maxPriority?: number | null | undefined;
};

/** @internal */
export const ListNotificationsRequest$outboundSchema: z.ZodType<
  ListNotificationsRequest$Outbound,
  z.ZodTypeDef,
  ListNotificationsRequest
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  pageSize: z.number().optional(),
  status: z.union([
    ListNotificationsStatusEnum1$outboundSchema,
    z.array(ListNotificationsStatusEnum2$outboundSchema),
  ]).optional(),
  userId: z.nullable(z.string()).optional(),
  priority: z.nullable(z.number().int()).optional(),
  maxPriority: z.nullable(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListNotificationsRequest$ {
  /** @deprecated use `ListNotificationsRequest$inboundSchema` instead. */
  export const inboundSchema = ListNotificationsRequest$inboundSchema;
  /** @deprecated use `ListNotificationsRequest$outboundSchema` instead. */
  export const outboundSchema = ListNotificationsRequest$outboundSchema;
  /** @deprecated use `ListNotificationsRequest$Outbound` instead. */
  export type Outbound = ListNotificationsRequest$Outbound;
}

export function listNotificationsRequestToJSON(
  listNotificationsRequest: ListNotificationsRequest,
): string {
  return JSON.stringify(
    ListNotificationsRequest$outboundSchema.parse(listNotificationsRequest),
  );
}

export function listNotificationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListNotificationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListNotificationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListNotificationsRequest' from JSON`,
  );
}
