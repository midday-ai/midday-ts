/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListTeamMembersRequest = {
  id: string;
};

/**
 * Role of the team member. 'owner' has full permissions, 'member' has limited permissions
 */
export const Role = {
  Owner: "owner",
  Member: "member",
} as const;
/**
 * Role of the team member. 'owner' has full permissions, 'member' has limited permissions
 */
export type Role = ClosedEnum<typeof Role>;

export type ListTeamMembersData = {
  /**
   * Unique identifier of the user
   */
  id: string;
  /**
   * Role of the team member. 'owner' has full permissions, 'member' has limited permissions
   */
  role: Role;
  /**
   * Full name of the team member
   */
  fullName: string;
  /**
   * URL to the team member's avatar image
   */
  avatarUrl: string | null;
};

/**
 * Team members
 */
export type ListTeamMembersResponse = {
  /**
   * Array of team members with their roles and information
   */
  data: Array<ListTeamMembersData>;
};

/** @internal */
export const ListTeamMembersRequest$inboundSchema: z.ZodType<
  ListTeamMembersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type ListTeamMembersRequest$Outbound = {
  id: string;
};

/** @internal */
export const ListTeamMembersRequest$outboundSchema: z.ZodType<
  ListTeamMembersRequest$Outbound,
  z.ZodTypeDef,
  ListTeamMembersRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTeamMembersRequest$ {
  /** @deprecated use `ListTeamMembersRequest$inboundSchema` instead. */
  export const inboundSchema = ListTeamMembersRequest$inboundSchema;
  /** @deprecated use `ListTeamMembersRequest$outboundSchema` instead. */
  export const outboundSchema = ListTeamMembersRequest$outboundSchema;
  /** @deprecated use `ListTeamMembersRequest$Outbound` instead. */
  export type Outbound = ListTeamMembersRequest$Outbound;
}

export function listTeamMembersRequestToJSON(
  listTeamMembersRequest: ListTeamMembersRequest,
): string {
  return JSON.stringify(
    ListTeamMembersRequest$outboundSchema.parse(listTeamMembersRequest),
  );
}

export function listTeamMembersRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTeamMembersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTeamMembersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTeamMembersRequest' from JSON`,
  );
}

/** @internal */
export const Role$inboundSchema: z.ZodNativeEnum<typeof Role> = z.nativeEnum(
  Role,
);

/** @internal */
export const Role$outboundSchema: z.ZodNativeEnum<typeof Role> =
  Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Role$ {
  /** @deprecated use `Role$inboundSchema` instead. */
  export const inboundSchema = Role$inboundSchema;
  /** @deprecated use `Role$outboundSchema` instead. */
  export const outboundSchema = Role$outboundSchema;
}

/** @internal */
export const ListTeamMembersData$inboundSchema: z.ZodType<
  ListTeamMembersData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  role: Role$inboundSchema,
  fullName: z.string(),
  avatarUrl: z.nullable(z.string()),
});

/** @internal */
export type ListTeamMembersData$Outbound = {
  id: string;
  role: string;
  fullName: string;
  avatarUrl: string | null;
};

/** @internal */
export const ListTeamMembersData$outboundSchema: z.ZodType<
  ListTeamMembersData$Outbound,
  z.ZodTypeDef,
  ListTeamMembersData
> = z.object({
  id: z.string(),
  role: Role$outboundSchema,
  fullName: z.string(),
  avatarUrl: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTeamMembersData$ {
  /** @deprecated use `ListTeamMembersData$inboundSchema` instead. */
  export const inboundSchema = ListTeamMembersData$inboundSchema;
  /** @deprecated use `ListTeamMembersData$outboundSchema` instead. */
  export const outboundSchema = ListTeamMembersData$outboundSchema;
  /** @deprecated use `ListTeamMembersData$Outbound` instead. */
  export type Outbound = ListTeamMembersData$Outbound;
}

export function listTeamMembersDataToJSON(
  listTeamMembersData: ListTeamMembersData,
): string {
  return JSON.stringify(
    ListTeamMembersData$outboundSchema.parse(listTeamMembersData),
  );
}

export function listTeamMembersDataFromJSON(
  jsonString: string,
): SafeParseResult<ListTeamMembersData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTeamMembersData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTeamMembersData' from JSON`,
  );
}

/** @internal */
export const ListTeamMembersResponse$inboundSchema: z.ZodType<
  ListTeamMembersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => ListTeamMembersData$inboundSchema)),
});

/** @internal */
export type ListTeamMembersResponse$Outbound = {
  data: Array<ListTeamMembersData$Outbound>;
};

/** @internal */
export const ListTeamMembersResponse$outboundSchema: z.ZodType<
  ListTeamMembersResponse$Outbound,
  z.ZodTypeDef,
  ListTeamMembersResponse
> = z.object({
  data: z.array(z.lazy(() => ListTeamMembersData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTeamMembersResponse$ {
  /** @deprecated use `ListTeamMembersResponse$inboundSchema` instead. */
  export const inboundSchema = ListTeamMembersResponse$inboundSchema;
  /** @deprecated use `ListTeamMembersResponse$outboundSchema` instead. */
  export const outboundSchema = ListTeamMembersResponse$outboundSchema;
  /** @deprecated use `ListTeamMembersResponse$Outbound` instead. */
  export type Outbound = ListTeamMembersResponse$Outbound;
}

export function listTeamMembersResponseToJSON(
  listTeamMembersResponse: ListTeamMembersResponse,
): string {
  return JSON.stringify(
    ListTeamMembersResponse$outboundSchema.parse(listTeamMembersResponse),
  );
}

export function listTeamMembersResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListTeamMembersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTeamMembersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTeamMembersResponse' from JSON`,
  );
}
