/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Current subscription plan of the team
 */
export const ListTeamsPlan = {
  Trial: "trial",
  Starter: "starter",
  Pro: "pro",
} as const;
/**
 * Current subscription plan of the team
 */
export type ListTeamsPlan = ClosedEnum<typeof ListTeamsPlan>;

export type ListTeamsData = {
  /**
   * Unique identifier of the team
   */
  id: string;
  /**
   * Name of the team or organization
   */
  name: string;
  /**
   * URL to the team's logo image
   */
  logoUrl: string | null;
  /**
   * Current subscription plan of the team
   */
  plan: ListTeamsPlan;
};

/**
 * Retrieve a list of teams for the authenticated user.
 */
export type ListTeamsResponse = {
  /**
   * Array of teams that the user has access to
   */
  data: Array<ListTeamsData>;
};

/** @internal */
export const ListTeamsPlan$inboundSchema: z.ZodNativeEnum<
  typeof ListTeamsPlan
> = z.nativeEnum(ListTeamsPlan);

/** @internal */
export const ListTeamsPlan$outboundSchema: z.ZodNativeEnum<
  typeof ListTeamsPlan
> = ListTeamsPlan$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTeamsPlan$ {
  /** @deprecated use `ListTeamsPlan$inboundSchema` instead. */
  export const inboundSchema = ListTeamsPlan$inboundSchema;
  /** @deprecated use `ListTeamsPlan$outboundSchema` instead. */
  export const outboundSchema = ListTeamsPlan$outboundSchema;
}

/** @internal */
export const ListTeamsData$inboundSchema: z.ZodType<
  ListTeamsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  logoUrl: z.nullable(z.string()),
  plan: ListTeamsPlan$inboundSchema,
});

/** @internal */
export type ListTeamsData$Outbound = {
  id: string;
  name: string;
  logoUrl: string | null;
  plan: string;
};

/** @internal */
export const ListTeamsData$outboundSchema: z.ZodType<
  ListTeamsData$Outbound,
  z.ZodTypeDef,
  ListTeamsData
> = z.object({
  id: z.string(),
  name: z.string(),
  logoUrl: z.nullable(z.string()),
  plan: ListTeamsPlan$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTeamsData$ {
  /** @deprecated use `ListTeamsData$inboundSchema` instead. */
  export const inboundSchema = ListTeamsData$inboundSchema;
  /** @deprecated use `ListTeamsData$outboundSchema` instead. */
  export const outboundSchema = ListTeamsData$outboundSchema;
  /** @deprecated use `ListTeamsData$Outbound` instead. */
  export type Outbound = ListTeamsData$Outbound;
}

export function listTeamsDataToJSON(listTeamsData: ListTeamsData): string {
  return JSON.stringify(ListTeamsData$outboundSchema.parse(listTeamsData));
}

export function listTeamsDataFromJSON(
  jsonString: string,
): SafeParseResult<ListTeamsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTeamsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTeamsData' from JSON`,
  );
}

/** @internal */
export const ListTeamsResponse$inboundSchema: z.ZodType<
  ListTeamsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => ListTeamsData$inboundSchema)),
});

/** @internal */
export type ListTeamsResponse$Outbound = {
  data: Array<ListTeamsData$Outbound>;
};

/** @internal */
export const ListTeamsResponse$outboundSchema: z.ZodType<
  ListTeamsResponse$Outbound,
  z.ZodTypeDef,
  ListTeamsResponse
> = z.object({
  data: z.array(z.lazy(() => ListTeamsData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTeamsResponse$ {
  /** @deprecated use `ListTeamsResponse$inboundSchema` instead. */
  export const inboundSchema = ListTeamsResponse$inboundSchema;
  /** @deprecated use `ListTeamsResponse$outboundSchema` instead. */
  export const outboundSchema = ListTeamsResponse$outboundSchema;
  /** @deprecated use `ListTeamsResponse$Outbound` instead. */
  export type Outbound = ListTeamsResponse$Outbound;
}

export function listTeamsResponseToJSON(
  listTeamsResponse: ListTeamsResponse,
): string {
  return JSON.stringify(
    ListTeamsResponse$outboundSchema.parse(listTeamsResponse),
  );
}

export function listTeamsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListTeamsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTeamsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTeamsResponse' from JSON`,
  );
}
