/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter projects by status
 */
export const ListTrackerProjectsStatus = {
  InProgress: "in_progress",
  Completed: "completed",
} as const;
/**
 * Filter projects by status
 */
export type ListTrackerProjectsStatus = ClosedEnum<
  typeof ListTrackerProjectsStatus
>;

export type ListTrackerProjectsRequest = {
  cursor?: string | null | undefined;
  pageSize?: number | undefined;
  q?: string | null | undefined;
  start?: string | null | undefined;
  end?: string | null | undefined;
  /**
   * Filter projects by status
   */
  status?: ListTrackerProjectsStatus | null | undefined;
  customers?: Array<string> | null | undefined;
  tags?: Array<string> | null | undefined;
  sort?: Array<string> | null | undefined;
};

/** @internal */
export const ListTrackerProjectsStatus$inboundSchema: z.ZodNativeEnum<
  typeof ListTrackerProjectsStatus
> = z.nativeEnum(ListTrackerProjectsStatus);

/** @internal */
export const ListTrackerProjectsStatus$outboundSchema: z.ZodNativeEnum<
  typeof ListTrackerProjectsStatus
> = ListTrackerProjectsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTrackerProjectsStatus$ {
  /** @deprecated use `ListTrackerProjectsStatus$inboundSchema` instead. */
  export const inboundSchema = ListTrackerProjectsStatus$inboundSchema;
  /** @deprecated use `ListTrackerProjectsStatus$outboundSchema` instead. */
  export const outboundSchema = ListTrackerProjectsStatus$outboundSchema;
}

/** @internal */
export const ListTrackerProjectsRequest$inboundSchema: z.ZodType<
  ListTrackerProjectsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  pageSize: z.number().optional(),
  q: z.nullable(z.string()).optional(),
  start: z.nullable(z.string()).optional(),
  end: z.nullable(z.string()).optional(),
  status: z.nullable(ListTrackerProjectsStatus$inboundSchema).optional(),
  customers: z.nullable(z.array(z.string())).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  sort: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type ListTrackerProjectsRequest$Outbound = {
  cursor?: string | null | undefined;
  pageSize?: number | undefined;
  q?: string | null | undefined;
  start?: string | null | undefined;
  end?: string | null | undefined;
  status?: string | null | undefined;
  customers?: Array<string> | null | undefined;
  tags?: Array<string> | null | undefined;
  sort?: Array<string> | null | undefined;
};

/** @internal */
export const ListTrackerProjectsRequest$outboundSchema: z.ZodType<
  ListTrackerProjectsRequest$Outbound,
  z.ZodTypeDef,
  ListTrackerProjectsRequest
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  pageSize: z.number().optional(),
  q: z.nullable(z.string()).optional(),
  start: z.nullable(z.string()).optional(),
  end: z.nullable(z.string()).optional(),
  status: z.nullable(ListTrackerProjectsStatus$outboundSchema).optional(),
  customers: z.nullable(z.array(z.string())).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  sort: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTrackerProjectsRequest$ {
  /** @deprecated use `ListTrackerProjectsRequest$inboundSchema` instead. */
  export const inboundSchema = ListTrackerProjectsRequest$inboundSchema;
  /** @deprecated use `ListTrackerProjectsRequest$outboundSchema` instead. */
  export const outboundSchema = ListTrackerProjectsRequest$outboundSchema;
  /** @deprecated use `ListTrackerProjectsRequest$Outbound` instead. */
  export type Outbound = ListTrackerProjectsRequest$Outbound;
}

export function listTrackerProjectsRequestToJSON(
  listTrackerProjectsRequest: ListTrackerProjectsRequest,
): string {
  return JSON.stringify(
    ListTrackerProjectsRequest$outboundSchema.parse(listTrackerProjectsRequest),
  );
}

export function listTrackerProjectsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTrackerProjectsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTrackerProjectsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTrackerProjectsRequest' from JSON`,
  );
}
