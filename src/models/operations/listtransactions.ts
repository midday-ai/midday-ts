/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Filter transactions based on attachment presence. 'include' returns only transactions with attachments, 'exclude' returns only transactions without attachments
 */
export const Attachments = {
  Include: "include",
  Exclude: "exclude",
} as const;
/**
 * Filter transactions based on attachment presence. 'include' returns only transactions with attachments, 'exclude' returns only transactions without attachments
 */
export type Attachments = ClosedEnum<typeof Attachments>;

/**
 * Transaction type to filter by. 'income' for money received, 'expense' for money spent
 */
export const ListTransactionsType = {
  Income: "income",
  Expense: "expense",
} as const;
/**
 * Transaction type to filter by. 'income' for money received, 'expense' for money spent
 */
export type ListTransactionsType = ClosedEnum<typeof ListTransactionsType>;

export type ListTransactionsRequest = {
  cursor?: string | null | undefined;
  sort?: Array<string> | null | undefined;
  pageSize?: number | undefined;
  q?: string | null | undefined;
  categories?: Array<string> | null | undefined;
  tags?: Array<string> | null | undefined;
  start?: string | null | undefined;
  end?: string | null | undefined;
  accounts?: Array<string> | null | undefined;
  assignees?: Array<string> | null | undefined;
  statuses?: Array<string> | null | undefined;
  recurring?: Array<string> | null | undefined;
  /**
   * Filter transactions based on attachment presence. 'include' returns only transactions with attachments, 'exclude' returns only transactions without attachments
   */
  attachments?: Attachments | null | undefined;
  amountRange?: Array<number | null> | null | undefined;
  amount?: Array<string> | null | undefined;
  /**
   * Transaction type to filter by. 'income' for money received, 'expense' for money spent
   */
  type?: ListTransactionsType | null | undefined;
};

/**
 * Pagination metadata for the transactions response
 */
export type ListTransactionsMeta = {
  /**
   * Cursor for the next page of results, undefined if no more pages
   */
  cursor?: string | undefined;
  /**
   * Whether there are more transactions available on the previous page
   */
  hasPreviousPage: boolean;
  /**
   * Whether there are more transactions available on the next page
   */
  hasNextPage: boolean;
};

/**
 * Retrieve a list of transactions for the authenticated team.
 */
export type ListTransactionsResponse = {
  /**
   * Pagination metadata for the transactions response
   */
  meta: ListTransactionsMeta;
  /**
   * Array of transactions matching the query criteria
   */
  data: Array<models.TransactionResponse>;
};

/** @internal */
export const Attachments$inboundSchema: z.ZodNativeEnum<typeof Attachments> = z
  .nativeEnum(Attachments);

/** @internal */
export const Attachments$outboundSchema: z.ZodNativeEnum<typeof Attachments> =
  Attachments$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Attachments$ {
  /** @deprecated use `Attachments$inboundSchema` instead. */
  export const inboundSchema = Attachments$inboundSchema;
  /** @deprecated use `Attachments$outboundSchema` instead. */
  export const outboundSchema = Attachments$outboundSchema;
}

/** @internal */
export const ListTransactionsType$inboundSchema: z.ZodNativeEnum<
  typeof ListTransactionsType
> = z.nativeEnum(ListTransactionsType);

/** @internal */
export const ListTransactionsType$outboundSchema: z.ZodNativeEnum<
  typeof ListTransactionsType
> = ListTransactionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTransactionsType$ {
  /** @deprecated use `ListTransactionsType$inboundSchema` instead. */
  export const inboundSchema = ListTransactionsType$inboundSchema;
  /** @deprecated use `ListTransactionsType$outboundSchema` instead. */
  export const outboundSchema = ListTransactionsType$outboundSchema;
}

/** @internal */
export const ListTransactionsRequest$inboundSchema: z.ZodType<
  ListTransactionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  sort: z.nullable(z.array(z.string())).optional(),
  pageSize: z.number().optional(),
  q: z.nullable(z.string()).optional(),
  categories: z.nullable(z.array(z.string())).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  start: z.nullable(z.string()).optional(),
  end: z.nullable(z.string()).optional(),
  accounts: z.nullable(z.array(z.string())).optional(),
  assignees: z.nullable(z.array(z.string())).optional(),
  statuses: z.nullable(z.array(z.string())).optional(),
  recurring: z.nullable(z.array(z.string())).optional(),
  attachments: z.nullable(Attachments$inboundSchema).optional(),
  amountRange: z.nullable(z.array(z.nullable(z.number()))).optional(),
  amount: z.nullable(z.array(z.string())).optional(),
  type: z.nullable(ListTransactionsType$inboundSchema).optional(),
});

/** @internal */
export type ListTransactionsRequest$Outbound = {
  cursor?: string | null | undefined;
  sort?: Array<string> | null | undefined;
  pageSize?: number | undefined;
  q?: string | null | undefined;
  categories?: Array<string> | null | undefined;
  tags?: Array<string> | null | undefined;
  start?: string | null | undefined;
  end?: string | null | undefined;
  accounts?: Array<string> | null | undefined;
  assignees?: Array<string> | null | undefined;
  statuses?: Array<string> | null | undefined;
  recurring?: Array<string> | null | undefined;
  attachments?: string | null | undefined;
  amountRange?: Array<number | null> | null | undefined;
  amount?: Array<string> | null | undefined;
  type?: string | null | undefined;
};

/** @internal */
export const ListTransactionsRequest$outboundSchema: z.ZodType<
  ListTransactionsRequest$Outbound,
  z.ZodTypeDef,
  ListTransactionsRequest
> = z.object({
  cursor: z.nullable(z.string()).optional(),
  sort: z.nullable(z.array(z.string())).optional(),
  pageSize: z.number().optional(),
  q: z.nullable(z.string()).optional(),
  categories: z.nullable(z.array(z.string())).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  start: z.nullable(z.string()).optional(),
  end: z.nullable(z.string()).optional(),
  accounts: z.nullable(z.array(z.string())).optional(),
  assignees: z.nullable(z.array(z.string())).optional(),
  statuses: z.nullable(z.array(z.string())).optional(),
  recurring: z.nullable(z.array(z.string())).optional(),
  attachments: z.nullable(Attachments$outboundSchema).optional(),
  amountRange: z.nullable(z.array(z.nullable(z.number()))).optional(),
  amount: z.nullable(z.array(z.string())).optional(),
  type: z.nullable(ListTransactionsType$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTransactionsRequest$ {
  /** @deprecated use `ListTransactionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListTransactionsRequest$inboundSchema;
  /** @deprecated use `ListTransactionsRequest$outboundSchema` instead. */
  export const outboundSchema = ListTransactionsRequest$outboundSchema;
  /** @deprecated use `ListTransactionsRequest$Outbound` instead. */
  export type Outbound = ListTransactionsRequest$Outbound;
}

export function listTransactionsRequestToJSON(
  listTransactionsRequest: ListTransactionsRequest,
): string {
  return JSON.stringify(
    ListTransactionsRequest$outboundSchema.parse(listTransactionsRequest),
  );
}

export function listTransactionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTransactionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTransactionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTransactionsRequest' from JSON`,
  );
}

/** @internal */
export const ListTransactionsMeta$inboundSchema: z.ZodType<
  ListTransactionsMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  hasPreviousPage: z.boolean(),
  hasNextPage: z.boolean(),
});

/** @internal */
export type ListTransactionsMeta$Outbound = {
  cursor?: string | undefined;
  hasPreviousPage: boolean;
  hasNextPage: boolean;
};

/** @internal */
export const ListTransactionsMeta$outboundSchema: z.ZodType<
  ListTransactionsMeta$Outbound,
  z.ZodTypeDef,
  ListTransactionsMeta
> = z.object({
  cursor: z.string().optional(),
  hasPreviousPage: z.boolean(),
  hasNextPage: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTransactionsMeta$ {
  /** @deprecated use `ListTransactionsMeta$inboundSchema` instead. */
  export const inboundSchema = ListTransactionsMeta$inboundSchema;
  /** @deprecated use `ListTransactionsMeta$outboundSchema` instead. */
  export const outboundSchema = ListTransactionsMeta$outboundSchema;
  /** @deprecated use `ListTransactionsMeta$Outbound` instead. */
  export type Outbound = ListTransactionsMeta$Outbound;
}

export function listTransactionsMetaToJSON(
  listTransactionsMeta: ListTransactionsMeta,
): string {
  return JSON.stringify(
    ListTransactionsMeta$outboundSchema.parse(listTransactionsMeta),
  );
}

export function listTransactionsMetaFromJSON(
  jsonString: string,
): SafeParseResult<ListTransactionsMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTransactionsMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTransactionsMeta' from JSON`,
  );
}

/** @internal */
export const ListTransactionsResponse$inboundSchema: z.ZodType<
  ListTransactionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  meta: z.lazy(() => ListTransactionsMeta$inboundSchema),
  data: z.array(models.TransactionResponse$inboundSchema),
});

/** @internal */
export type ListTransactionsResponse$Outbound = {
  meta: ListTransactionsMeta$Outbound;
  data: Array<models.TransactionResponse$Outbound>;
};

/** @internal */
export const ListTransactionsResponse$outboundSchema: z.ZodType<
  ListTransactionsResponse$Outbound,
  z.ZodTypeDef,
  ListTransactionsResponse
> = z.object({
  meta: z.lazy(() => ListTransactionsMeta$outboundSchema),
  data: z.array(models.TransactionResponse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTransactionsResponse$ {
  /** @deprecated use `ListTransactionsResponse$inboundSchema` instead. */
  export const inboundSchema = ListTransactionsResponse$inboundSchema;
  /** @deprecated use `ListTransactionsResponse$outboundSchema` instead. */
  export const outboundSchema = ListTransactionsResponse$outboundSchema;
  /** @deprecated use `ListTransactionsResponse$Outbound` instead. */
  export type Outbound = ListTransactionsResponse$Outbound;
}

export function listTransactionsResponseToJSON(
  listTransactionsResponse: ListTransactionsResponse,
): string {
  return JSON.stringify(
    ListTransactionsResponse$outboundSchema.parse(listTransactionsResponse),
  );
}

export function listTransactionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListTransactionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTransactionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTransactionsResponse' from JSON`,
  );
}
