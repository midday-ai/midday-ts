/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Type of the bank account.
 */
export const PatchV1BankAccountsIdType = {
  Depository: "depository",
  Credit: "credit",
  OtherAsset: "other_asset",
  Loan: "loan",
  OtherLiability: "other_liability",
} as const;
/**
 * Type of the bank account.
 */
export type PatchV1BankAccountsIdType = ClosedEnum<
  typeof PatchV1BankAccountsIdType
>;

/**
 * Schema for updating a bank account.
 */
export type PatchV1BankAccountsIdRequestBody = {
  /**
   * The unique identifier of the bank account.
   */
  id?: string | undefined;
  /**
   * The name of the bank account.
   */
  name?: string | undefined;
  /**
   * Whether the bank account is enabled.
   */
  enabled?: boolean | undefined;
  /**
   * Current balance of the bank account.
   */
  balance?: number | undefined;
  /**
   * The currency code for the bank account (ISO 4217).
   */
  currency?: string | undefined;
  /**
   * Type of the bank account.
   */
  type?: PatchV1BankAccountsIdType | undefined;
};

export type PatchV1BankAccountsIdRequest = {
  id: string;
  requestBody?: PatchV1BankAccountsIdRequestBody | undefined;
};

/**
 * A single bank account object response.
 */
export type PatchV1BankAccountsIdResponse = {
  /**
   * Unique identifier for the bank account.
   */
  id: string;
  /**
   * Name of the bank account.
   */
  name: string | null;
  /**
   * Currency code of the bank account (e.g., USD, EUR).
   */
  currency: string | null;
  /**
   * Type of the bank account (e.g., depository, credit).
   */
  type: string | null;
  /**
   * Whether the bank account is enabled.
   */
  enabled: boolean;
  /**
   * Current balance of the bank account.
   */
  balance: number | null;
  /**
   * Whether the bank account is a manual account.
   */
  manual: boolean | null;
};

/** @internal */
export const PatchV1BankAccountsIdType$inboundSchema: z.ZodNativeEnum<
  typeof PatchV1BankAccountsIdType
> = z.nativeEnum(PatchV1BankAccountsIdType);

/** @internal */
export const PatchV1BankAccountsIdType$outboundSchema: z.ZodNativeEnum<
  typeof PatchV1BankAccountsIdType
> = PatchV1BankAccountsIdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1BankAccountsIdType$ {
  /** @deprecated use `PatchV1BankAccountsIdType$inboundSchema` instead. */
  export const inboundSchema = PatchV1BankAccountsIdType$inboundSchema;
  /** @deprecated use `PatchV1BankAccountsIdType$outboundSchema` instead. */
  export const outboundSchema = PatchV1BankAccountsIdType$outboundSchema;
}

/** @internal */
export const PatchV1BankAccountsIdRequestBody$inboundSchema: z.ZodType<
  PatchV1BankAccountsIdRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  enabled: z.boolean().optional(),
  balance: z.number().optional(),
  currency: z.string().optional(),
  type: PatchV1BankAccountsIdType$inboundSchema.optional(),
});

/** @internal */
export type PatchV1BankAccountsIdRequestBody$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  enabled?: boolean | undefined;
  balance?: number | undefined;
  currency?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const PatchV1BankAccountsIdRequestBody$outboundSchema: z.ZodType<
  PatchV1BankAccountsIdRequestBody$Outbound,
  z.ZodTypeDef,
  PatchV1BankAccountsIdRequestBody
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  enabled: z.boolean().optional(),
  balance: z.number().optional(),
  currency: z.string().optional(),
  type: PatchV1BankAccountsIdType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1BankAccountsIdRequestBody$ {
  /** @deprecated use `PatchV1BankAccountsIdRequestBody$inboundSchema` instead. */
  export const inboundSchema = PatchV1BankAccountsIdRequestBody$inboundSchema;
  /** @deprecated use `PatchV1BankAccountsIdRequestBody$outboundSchema` instead. */
  export const outboundSchema = PatchV1BankAccountsIdRequestBody$outboundSchema;
  /** @deprecated use `PatchV1BankAccountsIdRequestBody$Outbound` instead. */
  export type Outbound = PatchV1BankAccountsIdRequestBody$Outbound;
}

export function patchV1BankAccountsIdRequestBodyToJSON(
  patchV1BankAccountsIdRequestBody: PatchV1BankAccountsIdRequestBody,
): string {
  return JSON.stringify(
    PatchV1BankAccountsIdRequestBody$outboundSchema.parse(
      patchV1BankAccountsIdRequestBody,
    ),
  );
}

export function patchV1BankAccountsIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1BankAccountsIdRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1BankAccountsIdRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1BankAccountsIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PatchV1BankAccountsIdRequest$inboundSchema: z.ZodType<
  PatchV1BankAccountsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => PatchV1BankAccountsIdRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchV1BankAccountsIdRequest$Outbound = {
  id: string;
  RequestBody?: PatchV1BankAccountsIdRequestBody$Outbound | undefined;
};

/** @internal */
export const PatchV1BankAccountsIdRequest$outboundSchema: z.ZodType<
  PatchV1BankAccountsIdRequest$Outbound,
  z.ZodTypeDef,
  PatchV1BankAccountsIdRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => PatchV1BankAccountsIdRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1BankAccountsIdRequest$ {
  /** @deprecated use `PatchV1BankAccountsIdRequest$inboundSchema` instead. */
  export const inboundSchema = PatchV1BankAccountsIdRequest$inboundSchema;
  /** @deprecated use `PatchV1BankAccountsIdRequest$outboundSchema` instead. */
  export const outboundSchema = PatchV1BankAccountsIdRequest$outboundSchema;
  /** @deprecated use `PatchV1BankAccountsIdRequest$Outbound` instead. */
  export type Outbound = PatchV1BankAccountsIdRequest$Outbound;
}

export function patchV1BankAccountsIdRequestToJSON(
  patchV1BankAccountsIdRequest: PatchV1BankAccountsIdRequest,
): string {
  return JSON.stringify(
    PatchV1BankAccountsIdRequest$outboundSchema.parse(
      patchV1BankAccountsIdRequest,
    ),
  );
}

export function patchV1BankAccountsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1BankAccountsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1BankAccountsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1BankAccountsIdRequest' from JSON`,
  );
}

/** @internal */
export const PatchV1BankAccountsIdResponse$inboundSchema: z.ZodType<
  PatchV1BankAccountsIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()),
  currency: z.nullable(z.string()),
  type: z.nullable(z.string()),
  enabled: z.boolean(),
  balance: z.nullable(z.number()),
  manual: z.nullable(z.boolean()),
});

/** @internal */
export type PatchV1BankAccountsIdResponse$Outbound = {
  id: string;
  name: string | null;
  currency: string | null;
  type: string | null;
  enabled: boolean;
  balance: number | null;
  manual: boolean | null;
};

/** @internal */
export const PatchV1BankAccountsIdResponse$outboundSchema: z.ZodType<
  PatchV1BankAccountsIdResponse$Outbound,
  z.ZodTypeDef,
  PatchV1BankAccountsIdResponse
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()),
  currency: z.nullable(z.string()),
  type: z.nullable(z.string()),
  enabled: z.boolean(),
  balance: z.nullable(z.number()),
  manual: z.nullable(z.boolean()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1BankAccountsIdResponse$ {
  /** @deprecated use `PatchV1BankAccountsIdResponse$inboundSchema` instead. */
  export const inboundSchema = PatchV1BankAccountsIdResponse$inboundSchema;
  /** @deprecated use `PatchV1BankAccountsIdResponse$outboundSchema` instead. */
  export const outboundSchema = PatchV1BankAccountsIdResponse$outboundSchema;
  /** @deprecated use `PatchV1BankAccountsIdResponse$Outbound` instead. */
  export type Outbound = PatchV1BankAccountsIdResponse$Outbound;
}

export function patchV1BankAccountsIdResponseToJSON(
  patchV1BankAccountsIdResponse: PatchV1BankAccountsIdResponse,
): string {
  return JSON.stringify(
    PatchV1BankAccountsIdResponse$outboundSchema.parse(
      patchV1BankAccountsIdResponse,
    ),
  );
}

export function patchV1BankAccountsIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1BankAccountsIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1BankAccountsIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1BankAccountsIdResponse' from JSON`,
  );
}
