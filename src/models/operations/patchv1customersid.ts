/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchV1CustomersIdTagRequest = {
  /**
   * Unique identifier of the tag
   */
  id: string;
  /**
   * Display name of the tag
   */
  name: string;
};

export type PatchV1CustomersIdRequestBody = {
  /**
   * Unique identifier of the customer. Required for updates, omit for new customers
   */
  id?: string | undefined;
  /**
   * Name of the customer or organization
   */
  name: string;
  /**
   * Primary email address of the customer
   */
  email: string;
  /**
   * Country name where the customer is located
   */
  country?: string | null | undefined;
  /**
   * First line of the customer's address
   */
  addressLine1?: string | null | undefined;
  /**
   * Second line of the customer's address (suite, apartment, etc.)
   */
  addressLine2?: string | null | undefined;
  /**
   * City where the customer is located
   */
  city?: string | null | undefined;
  /**
   * State or province where the customer is located
   */
  state?: string | null | undefined;
  /**
   * ZIP or postal code of the customer's address
   */
  zip?: string | null | undefined;
  /**
   * Primary phone number of the customer
   */
  phone?: string | null | undefined;
  /**
   * Website URL of the customer
   */
  website?: string | null | undefined;
  /**
   * Internal notes about the customer for team reference
   */
  note?: string | null | undefined;
  /**
   * VAT (Value Added Tax) number of the customer
   */
  vatNumber?: string | null | undefined;
  /**
   * Country code in ISO 3166-1 alpha-2 format
   */
  countryCode?: string | null | undefined;
  /**
   * Primary contact person's name at the customer organization
   */
  contact?: string | null | undefined;
  /**
   * Array of tags to associate with the customer for categorization
   */
  tags?: Array<PatchV1CustomersIdTagRequest> | undefined;
};

export type PatchV1CustomersIdRequest = {
  id: string;
  requestBody?: PatchV1CustomersIdRequestBody | undefined;
};

export type PatchV1CustomersIdTagResponse = {
  /**
   * Unique identifier of the tag
   */
  id: string;
  /**
   * Display name of the tag
   */
  name: string;
};

/**
 * Customer updated
 */
export type PatchV1CustomersIdResponse = {
  /**
   * Unique identifier of the customer
   */
  id: string;
  /**
   * Name of the customer or organization
   */
  name: string;
  /**
   * Primary email address of the customer
   */
  email: string;
  /**
   * Primary phone number of the customer
   */
  phone: string | null;
  /**
   * Website URL of the customer
   */
  website: string | null;
  /**
   * Date and time when the customer was created in ISO 8601 format
   */
  createdAt: string;
  /**
   * Country name where the customer is located
   */
  country: string | null;
  /**
   * First line of the customer's address
   */
  addressLine1: string | null;
  /**
   * Second line of the customer's address (suite, apartment, etc.)
   */
  addressLine2: string | null;
  /**
   * City where the customer is located
   */
  city: string | null;
  /**
   * State or province where the customer is located
   */
  state: string | null;
  /**
   * ZIP or postal code of the customer's address
   */
  zip: string | null;
  /**
   * Internal notes about the customer for team reference
   */
  note: string | null;
  /**
   * VAT (Value Added Tax) number of the customer
   */
  vatNumber: string | null;
  /**
   * Country code in ISO 3166-1 alpha-2 format
   */
  countryCode: string | null;
  /**
   * Unique token for the customer (used for internal identification)
   */
  token: string;
  /**
   * Primary contact person's name at the customer organization
   */
  contact: string | null;
  /**
   * Total number of invoices created for this customer
   */
  invoiceCount: number;
  /**
   * Total number of projects associated with this customer
   */
  projectCount: number;
  /**
   * Array of tags associated with the customer for categorization
   */
  tags: Array<PatchV1CustomersIdTagResponse>;
};

/** @internal */
export const PatchV1CustomersIdTagRequest$inboundSchema: z.ZodType<
  PatchV1CustomersIdTagRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
});

/** @internal */
export type PatchV1CustomersIdTagRequest$Outbound = {
  id: string;
  name: string;
};

/** @internal */
export const PatchV1CustomersIdTagRequest$outboundSchema: z.ZodType<
  PatchV1CustomersIdTagRequest$Outbound,
  z.ZodTypeDef,
  PatchV1CustomersIdTagRequest
> = z.object({
  id: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1CustomersIdTagRequest$ {
  /** @deprecated use `PatchV1CustomersIdTagRequest$inboundSchema` instead. */
  export const inboundSchema = PatchV1CustomersIdTagRequest$inboundSchema;
  /** @deprecated use `PatchV1CustomersIdTagRequest$outboundSchema` instead. */
  export const outboundSchema = PatchV1CustomersIdTagRequest$outboundSchema;
  /** @deprecated use `PatchV1CustomersIdTagRequest$Outbound` instead. */
  export type Outbound = PatchV1CustomersIdTagRequest$Outbound;
}

export function patchV1CustomersIdTagRequestToJSON(
  patchV1CustomersIdTagRequest: PatchV1CustomersIdTagRequest,
): string {
  return JSON.stringify(
    PatchV1CustomersIdTagRequest$outboundSchema.parse(
      patchV1CustomersIdTagRequest,
    ),
  );
}

export function patchV1CustomersIdTagRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1CustomersIdTagRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1CustomersIdTagRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1CustomersIdTagRequest' from JSON`,
  );
}

/** @internal */
export const PatchV1CustomersIdRequestBody$inboundSchema: z.ZodType<
  PatchV1CustomersIdRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  country: z.nullable(z.string()).optional(),
  addressLine1: z.nullable(z.string()).optional(),
  addressLine2: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  zip: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  contact: z.nullable(z.string()).optional(),
  tags: z.array(z.lazy(() => PatchV1CustomersIdTagRequest$inboundSchema))
    .optional(),
});

/** @internal */
export type PatchV1CustomersIdRequestBody$Outbound = {
  id?: string | undefined;
  name: string;
  email: string;
  country?: string | null | undefined;
  addressLine1?: string | null | undefined;
  addressLine2?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  zip?: string | null | undefined;
  phone?: string | null | undefined;
  website?: string | null | undefined;
  note?: string | null | undefined;
  vatNumber?: string | null | undefined;
  countryCode?: string | null | undefined;
  contact?: string | null | undefined;
  tags?: Array<PatchV1CustomersIdTagRequest$Outbound> | undefined;
};

/** @internal */
export const PatchV1CustomersIdRequestBody$outboundSchema: z.ZodType<
  PatchV1CustomersIdRequestBody$Outbound,
  z.ZodTypeDef,
  PatchV1CustomersIdRequestBody
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  country: z.nullable(z.string()).optional(),
  addressLine1: z.nullable(z.string()).optional(),
  addressLine2: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  zip: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  contact: z.nullable(z.string()).optional(),
  tags: z.array(z.lazy(() => PatchV1CustomersIdTagRequest$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1CustomersIdRequestBody$ {
  /** @deprecated use `PatchV1CustomersIdRequestBody$inboundSchema` instead. */
  export const inboundSchema = PatchV1CustomersIdRequestBody$inboundSchema;
  /** @deprecated use `PatchV1CustomersIdRequestBody$outboundSchema` instead. */
  export const outboundSchema = PatchV1CustomersIdRequestBody$outboundSchema;
  /** @deprecated use `PatchV1CustomersIdRequestBody$Outbound` instead. */
  export type Outbound = PatchV1CustomersIdRequestBody$Outbound;
}

export function patchV1CustomersIdRequestBodyToJSON(
  patchV1CustomersIdRequestBody: PatchV1CustomersIdRequestBody,
): string {
  return JSON.stringify(
    PatchV1CustomersIdRequestBody$outboundSchema.parse(
      patchV1CustomersIdRequestBody,
    ),
  );
}

export function patchV1CustomersIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1CustomersIdRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1CustomersIdRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1CustomersIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PatchV1CustomersIdRequest$inboundSchema: z.ZodType<
  PatchV1CustomersIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => PatchV1CustomersIdRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchV1CustomersIdRequest$Outbound = {
  id: string;
  RequestBody?: PatchV1CustomersIdRequestBody$Outbound | undefined;
};

/** @internal */
export const PatchV1CustomersIdRequest$outboundSchema: z.ZodType<
  PatchV1CustomersIdRequest$Outbound,
  z.ZodTypeDef,
  PatchV1CustomersIdRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => PatchV1CustomersIdRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1CustomersIdRequest$ {
  /** @deprecated use `PatchV1CustomersIdRequest$inboundSchema` instead. */
  export const inboundSchema = PatchV1CustomersIdRequest$inboundSchema;
  /** @deprecated use `PatchV1CustomersIdRequest$outboundSchema` instead. */
  export const outboundSchema = PatchV1CustomersIdRequest$outboundSchema;
  /** @deprecated use `PatchV1CustomersIdRequest$Outbound` instead. */
  export type Outbound = PatchV1CustomersIdRequest$Outbound;
}

export function patchV1CustomersIdRequestToJSON(
  patchV1CustomersIdRequest: PatchV1CustomersIdRequest,
): string {
  return JSON.stringify(
    PatchV1CustomersIdRequest$outboundSchema.parse(patchV1CustomersIdRequest),
  );
}

export function patchV1CustomersIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1CustomersIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1CustomersIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1CustomersIdRequest' from JSON`,
  );
}

/** @internal */
export const PatchV1CustomersIdTagResponse$inboundSchema: z.ZodType<
  PatchV1CustomersIdTagResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
});

/** @internal */
export type PatchV1CustomersIdTagResponse$Outbound = {
  id: string;
  name: string;
};

/** @internal */
export const PatchV1CustomersIdTagResponse$outboundSchema: z.ZodType<
  PatchV1CustomersIdTagResponse$Outbound,
  z.ZodTypeDef,
  PatchV1CustomersIdTagResponse
> = z.object({
  id: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1CustomersIdTagResponse$ {
  /** @deprecated use `PatchV1CustomersIdTagResponse$inboundSchema` instead. */
  export const inboundSchema = PatchV1CustomersIdTagResponse$inboundSchema;
  /** @deprecated use `PatchV1CustomersIdTagResponse$outboundSchema` instead. */
  export const outboundSchema = PatchV1CustomersIdTagResponse$outboundSchema;
  /** @deprecated use `PatchV1CustomersIdTagResponse$Outbound` instead. */
  export type Outbound = PatchV1CustomersIdTagResponse$Outbound;
}

export function patchV1CustomersIdTagResponseToJSON(
  patchV1CustomersIdTagResponse: PatchV1CustomersIdTagResponse,
): string {
  return JSON.stringify(
    PatchV1CustomersIdTagResponse$outboundSchema.parse(
      patchV1CustomersIdTagResponse,
    ),
  );
}

export function patchV1CustomersIdTagResponseFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1CustomersIdTagResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1CustomersIdTagResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1CustomersIdTagResponse' from JSON`,
  );
}

/** @internal */
export const PatchV1CustomersIdResponse$inboundSchema: z.ZodType<
  PatchV1CustomersIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  phone: z.nullable(z.string()),
  website: z.nullable(z.string()),
  createdAt: z.string(),
  country: z.nullable(z.string()),
  addressLine1: z.nullable(z.string()),
  addressLine2: z.nullable(z.string()),
  city: z.nullable(z.string()),
  state: z.nullable(z.string()),
  zip: z.nullable(z.string()),
  note: z.nullable(z.string()),
  vatNumber: z.nullable(z.string()),
  countryCode: z.nullable(z.string()),
  token: z.string(),
  contact: z.nullable(z.string()),
  invoiceCount: z.number(),
  projectCount: z.number(),
  tags: z.array(z.lazy(() => PatchV1CustomersIdTagResponse$inboundSchema)),
});

/** @internal */
export type PatchV1CustomersIdResponse$Outbound = {
  id: string;
  name: string;
  email: string;
  phone: string | null;
  website: string | null;
  createdAt: string;
  country: string | null;
  addressLine1: string | null;
  addressLine2: string | null;
  city: string | null;
  state: string | null;
  zip: string | null;
  note: string | null;
  vatNumber: string | null;
  countryCode: string | null;
  token: string;
  contact: string | null;
  invoiceCount: number;
  projectCount: number;
  tags: Array<PatchV1CustomersIdTagResponse$Outbound>;
};

/** @internal */
export const PatchV1CustomersIdResponse$outboundSchema: z.ZodType<
  PatchV1CustomersIdResponse$Outbound,
  z.ZodTypeDef,
  PatchV1CustomersIdResponse
> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  phone: z.nullable(z.string()),
  website: z.nullable(z.string()),
  createdAt: z.string(),
  country: z.nullable(z.string()),
  addressLine1: z.nullable(z.string()),
  addressLine2: z.nullable(z.string()),
  city: z.nullable(z.string()),
  state: z.nullable(z.string()),
  zip: z.nullable(z.string()),
  note: z.nullable(z.string()),
  vatNumber: z.nullable(z.string()),
  countryCode: z.nullable(z.string()),
  token: z.string(),
  contact: z.nullable(z.string()),
  invoiceCount: z.number(),
  projectCount: z.number(),
  tags: z.array(z.lazy(() => PatchV1CustomersIdTagResponse$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1CustomersIdResponse$ {
  /** @deprecated use `PatchV1CustomersIdResponse$inboundSchema` instead. */
  export const inboundSchema = PatchV1CustomersIdResponse$inboundSchema;
  /** @deprecated use `PatchV1CustomersIdResponse$outboundSchema` instead. */
  export const outboundSchema = PatchV1CustomersIdResponse$outboundSchema;
  /** @deprecated use `PatchV1CustomersIdResponse$Outbound` instead. */
  export type Outbound = PatchV1CustomersIdResponse$Outbound;
}

export function patchV1CustomersIdResponseToJSON(
  patchV1CustomersIdResponse: PatchV1CustomersIdResponse,
): string {
  return JSON.stringify(
    PatchV1CustomersIdResponse$outboundSchema.parse(patchV1CustomersIdResponse),
  );
}

export function patchV1CustomersIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1CustomersIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1CustomersIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1CustomersIdResponse' from JSON`,
  );
}
