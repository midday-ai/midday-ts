/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PatchV1InboxIdStatus = {
  New: "new",
  Archived: "archived",
  Processing: "processing",
  Done: "done",
  Pending: "pending",
} as const;
export type PatchV1InboxIdStatus = ClosedEnum<typeof PatchV1InboxIdStatus>;

export type PatchV1InboxIdRequestBody = {
  status: PatchV1InboxIdStatus;
};

export type PatchV1InboxIdRequest = {
  id: string;
  requestBody: PatchV1InboxIdRequestBody;
};

/**
 * Matched transaction for this inbox item, if any
 */
export type PatchV1InboxIdTransaction = {
  /**
   * Transaction ID (UUID)
   */
  id: string;
  /**
   * Transaction amount
   */
  amount: number;
  /**
   * Transaction currency (ISO 4217)
   */
  currency: string;
  /**
   * Transaction name or payee
   */
  name: string;
  /**
   * Transaction date (ISO 8601)
   */
  date: string;
};

/**
 * Inbox item object
 */
export type PatchV1InboxIdResponse = {
  /**
   * Inbox item ID (UUID)
   */
  id: string;
  /**
   * Original file name of the uploaded document
   */
  fileName: string;
  /**
   * Path segments to the file in storage
   */
  filePath: Array<string>;
  /**
   * Display name for the inbox item
   */
  displayName: string;
  /**
   * Amount detected or entered for the inbox item
   */
  amount: number | null;
  /**
   * Currency code (ISO 4217) for the amount
   */
  currency: string | null;
  /**
   * MIME type of the uploaded file
   */
  contentType: string | null;
  /**
   * Date associated with the inbox item (ISO 8601)
   */
  date: string | null;
  /**
   * Status of the inbox item
   */
  status: string;
  /**
   * Date and time when the inbox item was created (ISO 8601)
   */
  createdAt: string;
  /**
   * Website associated with the inbox item, if any
   */
  website: string | null;
  /**
   * Description or notes for the inbox item
   */
  description: string | null;
  /**
   * Matched transaction for this inbox item, if any
   */
  transaction: PatchV1InboxIdTransaction | null;
};

/** @internal */
export const PatchV1InboxIdStatus$inboundSchema: z.ZodNativeEnum<
  typeof PatchV1InboxIdStatus
> = z.nativeEnum(PatchV1InboxIdStatus);

/** @internal */
export const PatchV1InboxIdStatus$outboundSchema: z.ZodNativeEnum<
  typeof PatchV1InboxIdStatus
> = PatchV1InboxIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1InboxIdStatus$ {
  /** @deprecated use `PatchV1InboxIdStatus$inboundSchema` instead. */
  export const inboundSchema = PatchV1InboxIdStatus$inboundSchema;
  /** @deprecated use `PatchV1InboxIdStatus$outboundSchema` instead. */
  export const outboundSchema = PatchV1InboxIdStatus$outboundSchema;
}

/** @internal */
export const PatchV1InboxIdRequestBody$inboundSchema: z.ZodType<
  PatchV1InboxIdRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: PatchV1InboxIdStatus$inboundSchema,
});

/** @internal */
export type PatchV1InboxIdRequestBody$Outbound = {
  status: string;
};

/** @internal */
export const PatchV1InboxIdRequestBody$outboundSchema: z.ZodType<
  PatchV1InboxIdRequestBody$Outbound,
  z.ZodTypeDef,
  PatchV1InboxIdRequestBody
> = z.object({
  status: PatchV1InboxIdStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1InboxIdRequestBody$ {
  /** @deprecated use `PatchV1InboxIdRequestBody$inboundSchema` instead. */
  export const inboundSchema = PatchV1InboxIdRequestBody$inboundSchema;
  /** @deprecated use `PatchV1InboxIdRequestBody$outboundSchema` instead. */
  export const outboundSchema = PatchV1InboxIdRequestBody$outboundSchema;
  /** @deprecated use `PatchV1InboxIdRequestBody$Outbound` instead. */
  export type Outbound = PatchV1InboxIdRequestBody$Outbound;
}

export function patchV1InboxIdRequestBodyToJSON(
  patchV1InboxIdRequestBody: PatchV1InboxIdRequestBody,
): string {
  return JSON.stringify(
    PatchV1InboxIdRequestBody$outboundSchema.parse(patchV1InboxIdRequestBody),
  );
}

export function patchV1InboxIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1InboxIdRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1InboxIdRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1InboxIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PatchV1InboxIdRequest$inboundSchema: z.ZodType<
  PatchV1InboxIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => PatchV1InboxIdRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchV1InboxIdRequest$Outbound = {
  id: string;
  RequestBody: PatchV1InboxIdRequestBody$Outbound;
};

/** @internal */
export const PatchV1InboxIdRequest$outboundSchema: z.ZodType<
  PatchV1InboxIdRequest$Outbound,
  z.ZodTypeDef,
  PatchV1InboxIdRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => PatchV1InboxIdRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1InboxIdRequest$ {
  /** @deprecated use `PatchV1InboxIdRequest$inboundSchema` instead. */
  export const inboundSchema = PatchV1InboxIdRequest$inboundSchema;
  /** @deprecated use `PatchV1InboxIdRequest$outboundSchema` instead. */
  export const outboundSchema = PatchV1InboxIdRequest$outboundSchema;
  /** @deprecated use `PatchV1InboxIdRequest$Outbound` instead. */
  export type Outbound = PatchV1InboxIdRequest$Outbound;
}

export function patchV1InboxIdRequestToJSON(
  patchV1InboxIdRequest: PatchV1InboxIdRequest,
): string {
  return JSON.stringify(
    PatchV1InboxIdRequest$outboundSchema.parse(patchV1InboxIdRequest),
  );
}

export function patchV1InboxIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1InboxIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1InboxIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1InboxIdRequest' from JSON`,
  );
}

/** @internal */
export const PatchV1InboxIdTransaction$inboundSchema: z.ZodType<
  PatchV1InboxIdTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  amount: z.number(),
  currency: z.string(),
  name: z.string(),
  date: z.string(),
});

/** @internal */
export type PatchV1InboxIdTransaction$Outbound = {
  id: string;
  amount: number;
  currency: string;
  name: string;
  date: string;
};

/** @internal */
export const PatchV1InboxIdTransaction$outboundSchema: z.ZodType<
  PatchV1InboxIdTransaction$Outbound,
  z.ZodTypeDef,
  PatchV1InboxIdTransaction
> = z.object({
  id: z.string(),
  amount: z.number(),
  currency: z.string(),
  name: z.string(),
  date: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1InboxIdTransaction$ {
  /** @deprecated use `PatchV1InboxIdTransaction$inboundSchema` instead. */
  export const inboundSchema = PatchV1InboxIdTransaction$inboundSchema;
  /** @deprecated use `PatchV1InboxIdTransaction$outboundSchema` instead. */
  export const outboundSchema = PatchV1InboxIdTransaction$outboundSchema;
  /** @deprecated use `PatchV1InboxIdTransaction$Outbound` instead. */
  export type Outbound = PatchV1InboxIdTransaction$Outbound;
}

export function patchV1InboxIdTransactionToJSON(
  patchV1InboxIdTransaction: PatchV1InboxIdTransaction,
): string {
  return JSON.stringify(
    PatchV1InboxIdTransaction$outboundSchema.parse(patchV1InboxIdTransaction),
  );
}

export function patchV1InboxIdTransactionFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1InboxIdTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1InboxIdTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1InboxIdTransaction' from JSON`,
  );
}

/** @internal */
export const PatchV1InboxIdResponse$inboundSchema: z.ZodType<
  PatchV1InboxIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  fileName: z.string(),
  filePath: z.array(z.string()),
  displayName: z.string(),
  amount: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  contentType: z.nullable(z.string()),
  date: z.nullable(z.string()),
  status: z.string(),
  createdAt: z.string(),
  website: z.nullable(z.string()),
  description: z.nullable(z.string()),
  transaction: z.nullable(
    z.lazy(() => PatchV1InboxIdTransaction$inboundSchema),
  ),
});

/** @internal */
export type PatchV1InboxIdResponse$Outbound = {
  id: string;
  fileName: string;
  filePath: Array<string>;
  displayName: string;
  amount: number | null;
  currency: string | null;
  contentType: string | null;
  date: string | null;
  status: string;
  createdAt: string;
  website: string | null;
  description: string | null;
  transaction: PatchV1InboxIdTransaction$Outbound | null;
};

/** @internal */
export const PatchV1InboxIdResponse$outboundSchema: z.ZodType<
  PatchV1InboxIdResponse$Outbound,
  z.ZodTypeDef,
  PatchV1InboxIdResponse
> = z.object({
  id: z.string(),
  fileName: z.string(),
  filePath: z.array(z.string()),
  displayName: z.string(),
  amount: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  contentType: z.nullable(z.string()),
  date: z.nullable(z.string()),
  status: z.string(),
  createdAt: z.string(),
  website: z.nullable(z.string()),
  description: z.nullable(z.string()),
  transaction: z.nullable(
    z.lazy(() => PatchV1InboxIdTransaction$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1InboxIdResponse$ {
  /** @deprecated use `PatchV1InboxIdResponse$inboundSchema` instead. */
  export const inboundSchema = PatchV1InboxIdResponse$inboundSchema;
  /** @deprecated use `PatchV1InboxIdResponse$outboundSchema` instead. */
  export const outboundSchema = PatchV1InboxIdResponse$outboundSchema;
  /** @deprecated use `PatchV1InboxIdResponse$Outbound` instead. */
  export type Outbound = PatchV1InboxIdResponse$Outbound;
}

export function patchV1InboxIdResponseToJSON(
  patchV1InboxIdResponse: PatchV1InboxIdResponse,
): string {
  return JSON.stringify(
    PatchV1InboxIdResponse$outboundSchema.parse(patchV1InboxIdResponse),
  );
}

export function patchV1InboxIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1InboxIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1InboxIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1InboxIdResponse' from JSON`,
  );
}
