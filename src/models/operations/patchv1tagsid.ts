/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchV1TagsIdRequestBody = {
  /**
   * The new name of the tag.
   */
  name: string;
};

export type PatchV1TagsIdRequest = {
  id: string;
  requestBody?: PatchV1TagsIdRequestBody | undefined;
};

/** @internal */
export const PatchV1TagsIdRequestBody$inboundSchema: z.ZodType<
  PatchV1TagsIdRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type PatchV1TagsIdRequestBody$Outbound = {
  name: string;
};

/** @internal */
export const PatchV1TagsIdRequestBody$outboundSchema: z.ZodType<
  PatchV1TagsIdRequestBody$Outbound,
  z.ZodTypeDef,
  PatchV1TagsIdRequestBody
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TagsIdRequestBody$ {
  /** @deprecated use `PatchV1TagsIdRequestBody$inboundSchema` instead. */
  export const inboundSchema = PatchV1TagsIdRequestBody$inboundSchema;
  /** @deprecated use `PatchV1TagsIdRequestBody$outboundSchema` instead. */
  export const outboundSchema = PatchV1TagsIdRequestBody$outboundSchema;
  /** @deprecated use `PatchV1TagsIdRequestBody$Outbound` instead. */
  export type Outbound = PatchV1TagsIdRequestBody$Outbound;
}

export function patchV1TagsIdRequestBodyToJSON(
  patchV1TagsIdRequestBody: PatchV1TagsIdRequestBody,
): string {
  return JSON.stringify(
    PatchV1TagsIdRequestBody$outboundSchema.parse(patchV1TagsIdRequestBody),
  );
}

export function patchV1TagsIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1TagsIdRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1TagsIdRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1TagsIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PatchV1TagsIdRequest$inboundSchema: z.ZodType<
  PatchV1TagsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => PatchV1TagsIdRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchV1TagsIdRequest$Outbound = {
  id: string;
  RequestBody?: PatchV1TagsIdRequestBody$Outbound | undefined;
};

/** @internal */
export const PatchV1TagsIdRequest$outboundSchema: z.ZodType<
  PatchV1TagsIdRequest$Outbound,
  z.ZodTypeDef,
  PatchV1TagsIdRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => PatchV1TagsIdRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TagsIdRequest$ {
  /** @deprecated use `PatchV1TagsIdRequest$inboundSchema` instead. */
  export const inboundSchema = PatchV1TagsIdRequest$inboundSchema;
  /** @deprecated use `PatchV1TagsIdRequest$outboundSchema` instead. */
  export const outboundSchema = PatchV1TagsIdRequest$outboundSchema;
  /** @deprecated use `PatchV1TagsIdRequest$Outbound` instead. */
  export type Outbound = PatchV1TagsIdRequest$Outbound;
}

export function patchV1TagsIdRequestToJSON(
  patchV1TagsIdRequest: PatchV1TagsIdRequest,
): string {
  return JSON.stringify(
    PatchV1TagsIdRequest$outboundSchema.parse(patchV1TagsIdRequest),
  );
}

export function patchV1TagsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1TagsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1TagsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1TagsIdRequest' from JSON`,
  );
}
