/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PatchV1TeamsIdRequestBody = {
  /**
   * Name of the team or organization. Must be between 2 and 32 characters
   */
  name?: string | undefined;
  /**
   * Primary contact email address for the team
   */
  email?: string | undefined;
  /**
   * URL to the team's logo image. Must be hosted on midday.ai domain
   */
  logoUrl?: string | undefined;
  /**
   * Base currency for the team in ISO 4217 format (3-letter currency code)
   */
  baseCurrency?: string | undefined;
};

export type PatchV1TeamsIdRequest = {
  id: string;
  requestBody?: PatchV1TeamsIdRequestBody | undefined;
};

/**
 * Current subscription plan of the team
 */
export const PatchV1TeamsIdPlan = {
  Trial: "trial",
  Starter: "starter",
  Pro: "pro",
} as const;
/**
 * Current subscription plan of the team
 */
export type PatchV1TeamsIdPlan = ClosedEnum<typeof PatchV1TeamsIdPlan>;

/**
 * Team updated
 */
export type PatchV1TeamsIdResponse = {
  /**
   * Unique identifier of the team
   */
  id: string;
  /**
   * Name of the team or organization
   */
  name: string;
  /**
   * URL to the team's logo image
   */
  logoUrl: string | null;
  /**
   * Current subscription plan of the team
   */
  plan: PatchV1TeamsIdPlan;
};

/** @internal */
export const PatchV1TeamsIdRequestBody$inboundSchema: z.ZodType<
  PatchV1TeamsIdRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  email: z.string().optional(),
  logoUrl: z.string().optional(),
  baseCurrency: z.string().optional(),
});

/** @internal */
export type PatchV1TeamsIdRequestBody$Outbound = {
  name?: string | undefined;
  email?: string | undefined;
  logoUrl?: string | undefined;
  baseCurrency?: string | undefined;
};

/** @internal */
export const PatchV1TeamsIdRequestBody$outboundSchema: z.ZodType<
  PatchV1TeamsIdRequestBody$Outbound,
  z.ZodTypeDef,
  PatchV1TeamsIdRequestBody
> = z.object({
  name: z.string().optional(),
  email: z.string().optional(),
  logoUrl: z.string().optional(),
  baseCurrency: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TeamsIdRequestBody$ {
  /** @deprecated use `PatchV1TeamsIdRequestBody$inboundSchema` instead. */
  export const inboundSchema = PatchV1TeamsIdRequestBody$inboundSchema;
  /** @deprecated use `PatchV1TeamsIdRequestBody$outboundSchema` instead. */
  export const outboundSchema = PatchV1TeamsIdRequestBody$outboundSchema;
  /** @deprecated use `PatchV1TeamsIdRequestBody$Outbound` instead. */
  export type Outbound = PatchV1TeamsIdRequestBody$Outbound;
}

export function patchV1TeamsIdRequestBodyToJSON(
  patchV1TeamsIdRequestBody: PatchV1TeamsIdRequestBody,
): string {
  return JSON.stringify(
    PatchV1TeamsIdRequestBody$outboundSchema.parse(patchV1TeamsIdRequestBody),
  );
}

export function patchV1TeamsIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1TeamsIdRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1TeamsIdRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1TeamsIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PatchV1TeamsIdRequest$inboundSchema: z.ZodType<
  PatchV1TeamsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => PatchV1TeamsIdRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchV1TeamsIdRequest$Outbound = {
  id: string;
  RequestBody?: PatchV1TeamsIdRequestBody$Outbound | undefined;
};

/** @internal */
export const PatchV1TeamsIdRequest$outboundSchema: z.ZodType<
  PatchV1TeamsIdRequest$Outbound,
  z.ZodTypeDef,
  PatchV1TeamsIdRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => PatchV1TeamsIdRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TeamsIdRequest$ {
  /** @deprecated use `PatchV1TeamsIdRequest$inboundSchema` instead. */
  export const inboundSchema = PatchV1TeamsIdRequest$inboundSchema;
  /** @deprecated use `PatchV1TeamsIdRequest$outboundSchema` instead. */
  export const outboundSchema = PatchV1TeamsIdRequest$outboundSchema;
  /** @deprecated use `PatchV1TeamsIdRequest$Outbound` instead. */
  export type Outbound = PatchV1TeamsIdRequest$Outbound;
}

export function patchV1TeamsIdRequestToJSON(
  patchV1TeamsIdRequest: PatchV1TeamsIdRequest,
): string {
  return JSON.stringify(
    PatchV1TeamsIdRequest$outboundSchema.parse(patchV1TeamsIdRequest),
  );
}

export function patchV1TeamsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1TeamsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1TeamsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1TeamsIdRequest' from JSON`,
  );
}

/** @internal */
export const PatchV1TeamsIdPlan$inboundSchema: z.ZodNativeEnum<
  typeof PatchV1TeamsIdPlan
> = z.nativeEnum(PatchV1TeamsIdPlan);

/** @internal */
export const PatchV1TeamsIdPlan$outboundSchema: z.ZodNativeEnum<
  typeof PatchV1TeamsIdPlan
> = PatchV1TeamsIdPlan$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TeamsIdPlan$ {
  /** @deprecated use `PatchV1TeamsIdPlan$inboundSchema` instead. */
  export const inboundSchema = PatchV1TeamsIdPlan$inboundSchema;
  /** @deprecated use `PatchV1TeamsIdPlan$outboundSchema` instead. */
  export const outboundSchema = PatchV1TeamsIdPlan$outboundSchema;
}

/** @internal */
export const PatchV1TeamsIdResponse$inboundSchema: z.ZodType<
  PatchV1TeamsIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  logoUrl: z.nullable(z.string()),
  plan: PatchV1TeamsIdPlan$inboundSchema,
});

/** @internal */
export type PatchV1TeamsIdResponse$Outbound = {
  id: string;
  name: string;
  logoUrl: string | null;
  plan: string;
};

/** @internal */
export const PatchV1TeamsIdResponse$outboundSchema: z.ZodType<
  PatchV1TeamsIdResponse$Outbound,
  z.ZodTypeDef,
  PatchV1TeamsIdResponse
> = z.object({
  id: z.string(),
  name: z.string(),
  logoUrl: z.nullable(z.string()),
  plan: PatchV1TeamsIdPlan$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TeamsIdResponse$ {
  /** @deprecated use `PatchV1TeamsIdResponse$inboundSchema` instead. */
  export const inboundSchema = PatchV1TeamsIdResponse$inboundSchema;
  /** @deprecated use `PatchV1TeamsIdResponse$outboundSchema` instead. */
  export const outboundSchema = PatchV1TeamsIdResponse$outboundSchema;
  /** @deprecated use `PatchV1TeamsIdResponse$Outbound` instead. */
  export type Outbound = PatchV1TeamsIdResponse$Outbound;
}

export function patchV1TeamsIdResponseToJSON(
  patchV1TeamsIdResponse: PatchV1TeamsIdResponse,
): string {
  return JSON.stringify(
    PatchV1TeamsIdResponse$outboundSchema.parse(patchV1TeamsIdResponse),
  );
}

export function patchV1TeamsIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1TeamsIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1TeamsIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1TeamsIdResponse' from JSON`,
  );
}
