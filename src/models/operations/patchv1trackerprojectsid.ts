/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Current status of the project
 */
export const PatchV1TrackerProjectsIdStatus = {
  InProgress: "in_progress",
  Completed: "completed",
} as const;
/**
 * Current status of the project
 */
export type PatchV1TrackerProjectsIdStatus = ClosedEnum<
  typeof PatchV1TrackerProjectsIdStatus
>;

export type PatchV1TrackerProjectsIdTag = {
  /**
   * Unique identifier of the tag
   */
  id: string;
  /**
   * Display value of the tag
   */
  value: string;
};

export type PatchV1TrackerProjectsIdRequestBody = {
  /**
   * Name of the project
   */
  name: string;
  /**
   * Detailed description of the project
   */
  description?: string | null | undefined;
  /**
   * Estimated total hours required to complete the project
   */
  estimate?: number | null | undefined;
  /**
   * Whether the project is billable to the customer
   */
  billable?: boolean | null | undefined;
  /**
   * Hourly rate for the project in the specified currency
   */
  rate?: number | null | undefined;
  /**
   * Currency code for the project rate in ISO 4217 format
   */
  currency?: string | null | undefined;
  /**
   * Current status of the project
   */
  status?: PatchV1TrackerProjectsIdStatus | undefined;
  /**
   * Unique identifier of the customer associated with this project
   */
  customerId?: string | null | undefined;
  /**
   * Array of tags to associate with the project
   */
  tags?: Array<PatchV1TrackerProjectsIdTag> | null | undefined;
};

export type PatchV1TrackerProjectsIdRequest = {
  id: string;
  requestBody?: PatchV1TrackerProjectsIdRequestBody | undefined;
};

/** @internal */
export const PatchV1TrackerProjectsIdStatus$inboundSchema: z.ZodNativeEnum<
  typeof PatchV1TrackerProjectsIdStatus
> = z.nativeEnum(PatchV1TrackerProjectsIdStatus);

/** @internal */
export const PatchV1TrackerProjectsIdStatus$outboundSchema: z.ZodNativeEnum<
  typeof PatchV1TrackerProjectsIdStatus
> = PatchV1TrackerProjectsIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TrackerProjectsIdStatus$ {
  /** @deprecated use `PatchV1TrackerProjectsIdStatus$inboundSchema` instead. */
  export const inboundSchema = PatchV1TrackerProjectsIdStatus$inboundSchema;
  /** @deprecated use `PatchV1TrackerProjectsIdStatus$outboundSchema` instead. */
  export const outboundSchema = PatchV1TrackerProjectsIdStatus$outboundSchema;
}

/** @internal */
export const PatchV1TrackerProjectsIdTag$inboundSchema: z.ZodType<
  PatchV1TrackerProjectsIdTag,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  value: z.string(),
});

/** @internal */
export type PatchV1TrackerProjectsIdTag$Outbound = {
  id: string;
  value: string;
};

/** @internal */
export const PatchV1TrackerProjectsIdTag$outboundSchema: z.ZodType<
  PatchV1TrackerProjectsIdTag$Outbound,
  z.ZodTypeDef,
  PatchV1TrackerProjectsIdTag
> = z.object({
  id: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TrackerProjectsIdTag$ {
  /** @deprecated use `PatchV1TrackerProjectsIdTag$inboundSchema` instead. */
  export const inboundSchema = PatchV1TrackerProjectsIdTag$inboundSchema;
  /** @deprecated use `PatchV1TrackerProjectsIdTag$outboundSchema` instead. */
  export const outboundSchema = PatchV1TrackerProjectsIdTag$outboundSchema;
  /** @deprecated use `PatchV1TrackerProjectsIdTag$Outbound` instead. */
  export type Outbound = PatchV1TrackerProjectsIdTag$Outbound;
}

export function patchV1TrackerProjectsIdTagToJSON(
  patchV1TrackerProjectsIdTag: PatchV1TrackerProjectsIdTag,
): string {
  return JSON.stringify(
    PatchV1TrackerProjectsIdTag$outboundSchema.parse(
      patchV1TrackerProjectsIdTag,
    ),
  );
}

export function patchV1TrackerProjectsIdTagFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1TrackerProjectsIdTag, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1TrackerProjectsIdTag$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1TrackerProjectsIdTag' from JSON`,
  );
}

/** @internal */
export const PatchV1TrackerProjectsIdRequestBody$inboundSchema: z.ZodType<
  PatchV1TrackerProjectsIdRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  estimate: z.nullable(z.number()).optional(),
  billable: z.nullable(z.boolean().default(false)),
  rate: z.nullable(z.number()).optional(),
  currency: z.nullable(z.string()).optional(),
  status: PatchV1TrackerProjectsIdStatus$inboundSchema.optional(),
  customerId: z.nullable(z.string()).optional(),
  tags: z.nullable(
    z.array(z.lazy(() => PatchV1TrackerProjectsIdTag$inboundSchema)),
  ).optional(),
});

/** @internal */
export type PatchV1TrackerProjectsIdRequestBody$Outbound = {
  name: string;
  description?: string | null | undefined;
  estimate?: number | null | undefined;
  billable: boolean | null;
  rate?: number | null | undefined;
  currency?: string | null | undefined;
  status?: string | undefined;
  customerId?: string | null | undefined;
  tags?: Array<PatchV1TrackerProjectsIdTag$Outbound> | null | undefined;
};

/** @internal */
export const PatchV1TrackerProjectsIdRequestBody$outboundSchema: z.ZodType<
  PatchV1TrackerProjectsIdRequestBody$Outbound,
  z.ZodTypeDef,
  PatchV1TrackerProjectsIdRequestBody
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  estimate: z.nullable(z.number()).optional(),
  billable: z.nullable(z.boolean().default(false)),
  rate: z.nullable(z.number()).optional(),
  currency: z.nullable(z.string()).optional(),
  status: PatchV1TrackerProjectsIdStatus$outboundSchema.optional(),
  customerId: z.nullable(z.string()).optional(),
  tags: z.nullable(
    z.array(z.lazy(() => PatchV1TrackerProjectsIdTag$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TrackerProjectsIdRequestBody$ {
  /** @deprecated use `PatchV1TrackerProjectsIdRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1TrackerProjectsIdRequestBody$inboundSchema;
  /** @deprecated use `PatchV1TrackerProjectsIdRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1TrackerProjectsIdRequestBody$outboundSchema;
  /** @deprecated use `PatchV1TrackerProjectsIdRequestBody$Outbound` instead. */
  export type Outbound = PatchV1TrackerProjectsIdRequestBody$Outbound;
}

export function patchV1TrackerProjectsIdRequestBodyToJSON(
  patchV1TrackerProjectsIdRequestBody: PatchV1TrackerProjectsIdRequestBody,
): string {
  return JSON.stringify(
    PatchV1TrackerProjectsIdRequestBody$outboundSchema.parse(
      patchV1TrackerProjectsIdRequestBody,
    ),
  );
}

export function patchV1TrackerProjectsIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1TrackerProjectsIdRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1TrackerProjectsIdRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1TrackerProjectsIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PatchV1TrackerProjectsIdRequest$inboundSchema: z.ZodType<
  PatchV1TrackerProjectsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => PatchV1TrackerProjectsIdRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchV1TrackerProjectsIdRequest$Outbound = {
  id: string;
  RequestBody?: PatchV1TrackerProjectsIdRequestBody$Outbound | undefined;
};

/** @internal */
export const PatchV1TrackerProjectsIdRequest$outboundSchema: z.ZodType<
  PatchV1TrackerProjectsIdRequest$Outbound,
  z.ZodTypeDef,
  PatchV1TrackerProjectsIdRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => PatchV1TrackerProjectsIdRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TrackerProjectsIdRequest$ {
  /** @deprecated use `PatchV1TrackerProjectsIdRequest$inboundSchema` instead. */
  export const inboundSchema = PatchV1TrackerProjectsIdRequest$inboundSchema;
  /** @deprecated use `PatchV1TrackerProjectsIdRequest$outboundSchema` instead. */
  export const outboundSchema = PatchV1TrackerProjectsIdRequest$outboundSchema;
  /** @deprecated use `PatchV1TrackerProjectsIdRequest$Outbound` instead. */
  export type Outbound = PatchV1TrackerProjectsIdRequest$Outbound;
}

export function patchV1TrackerProjectsIdRequestToJSON(
  patchV1TrackerProjectsIdRequest: PatchV1TrackerProjectsIdRequest,
): string {
  return JSON.stringify(
    PatchV1TrackerProjectsIdRequest$outboundSchema.parse(
      patchV1TrackerProjectsIdRequest,
    ),
  );
}

export function patchV1TrackerProjectsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1TrackerProjectsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1TrackerProjectsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1TrackerProjectsIdRequest' from JSON`,
  );
}
