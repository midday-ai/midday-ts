/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Status to set for the transactions.
 */
export const PatchV1TransactionsBulkStatus = {
  Pending: "pending",
  Archived: "archived",
  Completed: "completed",
  Posted: "posted",
  Excluded: "excluded",
} as const;
/**
 * Status to set for the transactions.
 */
export type PatchV1TransactionsBulkStatus = ClosedEnum<
  typeof PatchV1TransactionsBulkStatus
>;

/**
 * Recurring frequency to set for the transactions.
 */
export const PatchV1TransactionsBulkFrequency = {
  Weekly: "weekly",
  Monthly: "monthly",
  Annually: "annually",
  Irregular: "irregular",
} as const;
/**
 * Recurring frequency to set for the transactions.
 */
export type PatchV1TransactionsBulkFrequency = ClosedEnum<
  typeof PatchV1TransactionsBulkFrequency
>;

export type PatchV1TransactionsBulkRequest = {
  /**
   * Array of transaction IDs to update.
   */
  ids: Array<string>;
  /**
   * Category slug for the transactions.
   */
  categorySlug?: string | null | undefined;
  /**
   * Status to set for the transactions.
   */
  status?: PatchV1TransactionsBulkStatus | null | undefined;
  /**
   * Recurring frequency to set for the transactions.
   */
  frequency?: PatchV1TransactionsBulkFrequency | null | undefined;
  /**
   * Whether the transactions are internal.
   */
  internal?: boolean | undefined;
  /**
   * Note to set for the transactions.
   */
  note?: string | null | undefined;
  /**
   * Assigned user ID for the transactions.
   */
  assignedId?: string | null | undefined;
  /**
   * Whether the transactions are recurring.
   */
  recurring?: boolean | undefined;
  /**
   * Tag ID to set for the transactions.
   */
  tagId?: string | null | undefined;
};

/**
 * Pagination metadata for the transactions response
 */
export type PatchV1TransactionsBulkMeta = {
  /**
   * Cursor for the next page of results, undefined if no more pages
   */
  cursor?: string | undefined;
  /**
   * Whether there are more transactions available on the previous page
   */
  hasPreviousPage: boolean;
  /**
   * Whether there are more transactions available on the next page
   */
  hasNextPage: boolean;
};

/**
 * Transactions updated
 */
export type PatchV1TransactionsBulkResponse = {
  /**
   * Pagination metadata for the transactions response
   */
  meta: PatchV1TransactionsBulkMeta;
  /**
   * Array of transactions matching the query criteria
   */
  data: Array<models.TransactionResponse>;
};

/** @internal */
export const PatchV1TransactionsBulkStatus$inboundSchema: z.ZodNativeEnum<
  typeof PatchV1TransactionsBulkStatus
> = z.nativeEnum(PatchV1TransactionsBulkStatus);

/** @internal */
export const PatchV1TransactionsBulkStatus$outboundSchema: z.ZodNativeEnum<
  typeof PatchV1TransactionsBulkStatus
> = PatchV1TransactionsBulkStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TransactionsBulkStatus$ {
  /** @deprecated use `PatchV1TransactionsBulkStatus$inboundSchema` instead. */
  export const inboundSchema = PatchV1TransactionsBulkStatus$inboundSchema;
  /** @deprecated use `PatchV1TransactionsBulkStatus$outboundSchema` instead. */
  export const outboundSchema = PatchV1TransactionsBulkStatus$outboundSchema;
}

/** @internal */
export const PatchV1TransactionsBulkFrequency$inboundSchema: z.ZodNativeEnum<
  typeof PatchV1TransactionsBulkFrequency
> = z.nativeEnum(PatchV1TransactionsBulkFrequency);

/** @internal */
export const PatchV1TransactionsBulkFrequency$outboundSchema: z.ZodNativeEnum<
  typeof PatchV1TransactionsBulkFrequency
> = PatchV1TransactionsBulkFrequency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TransactionsBulkFrequency$ {
  /** @deprecated use `PatchV1TransactionsBulkFrequency$inboundSchema` instead. */
  export const inboundSchema = PatchV1TransactionsBulkFrequency$inboundSchema;
  /** @deprecated use `PatchV1TransactionsBulkFrequency$outboundSchema` instead. */
  export const outboundSchema = PatchV1TransactionsBulkFrequency$outboundSchema;
}

/** @internal */
export const PatchV1TransactionsBulkRequest$inboundSchema: z.ZodType<
  PatchV1TransactionsBulkRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ids: z.array(z.string()),
  categorySlug: z.nullable(z.string()).optional(),
  status: z.nullable(PatchV1TransactionsBulkStatus$inboundSchema).optional(),
  frequency: z.nullable(PatchV1TransactionsBulkFrequency$inboundSchema)
    .optional(),
  internal: z.boolean().optional(),
  note: z.nullable(z.string()).optional(),
  assignedId: z.nullable(z.string()).optional(),
  recurring: z.boolean().optional(),
  tagId: z.nullable(z.string()).optional(),
});

/** @internal */
export type PatchV1TransactionsBulkRequest$Outbound = {
  ids: Array<string>;
  categorySlug?: string | null | undefined;
  status?: string | null | undefined;
  frequency?: string | null | undefined;
  internal?: boolean | undefined;
  note?: string | null | undefined;
  assignedId?: string | null | undefined;
  recurring?: boolean | undefined;
  tagId?: string | null | undefined;
};

/** @internal */
export const PatchV1TransactionsBulkRequest$outboundSchema: z.ZodType<
  PatchV1TransactionsBulkRequest$Outbound,
  z.ZodTypeDef,
  PatchV1TransactionsBulkRequest
> = z.object({
  ids: z.array(z.string()),
  categorySlug: z.nullable(z.string()).optional(),
  status: z.nullable(PatchV1TransactionsBulkStatus$outboundSchema).optional(),
  frequency: z.nullable(PatchV1TransactionsBulkFrequency$outboundSchema)
    .optional(),
  internal: z.boolean().optional(),
  note: z.nullable(z.string()).optional(),
  assignedId: z.nullable(z.string()).optional(),
  recurring: z.boolean().optional(),
  tagId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TransactionsBulkRequest$ {
  /** @deprecated use `PatchV1TransactionsBulkRequest$inboundSchema` instead. */
  export const inboundSchema = PatchV1TransactionsBulkRequest$inboundSchema;
  /** @deprecated use `PatchV1TransactionsBulkRequest$outboundSchema` instead. */
  export const outboundSchema = PatchV1TransactionsBulkRequest$outboundSchema;
  /** @deprecated use `PatchV1TransactionsBulkRequest$Outbound` instead. */
  export type Outbound = PatchV1TransactionsBulkRequest$Outbound;
}

export function patchV1TransactionsBulkRequestToJSON(
  patchV1TransactionsBulkRequest: PatchV1TransactionsBulkRequest,
): string {
  return JSON.stringify(
    PatchV1TransactionsBulkRequest$outboundSchema.parse(
      patchV1TransactionsBulkRequest,
    ),
  );
}

export function patchV1TransactionsBulkRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1TransactionsBulkRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1TransactionsBulkRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1TransactionsBulkRequest' from JSON`,
  );
}

/** @internal */
export const PatchV1TransactionsBulkMeta$inboundSchema: z.ZodType<
  PatchV1TransactionsBulkMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  hasPreviousPage: z.boolean(),
  hasNextPage: z.boolean(),
});

/** @internal */
export type PatchV1TransactionsBulkMeta$Outbound = {
  cursor?: string | undefined;
  hasPreviousPage: boolean;
  hasNextPage: boolean;
};

/** @internal */
export const PatchV1TransactionsBulkMeta$outboundSchema: z.ZodType<
  PatchV1TransactionsBulkMeta$Outbound,
  z.ZodTypeDef,
  PatchV1TransactionsBulkMeta
> = z.object({
  cursor: z.string().optional(),
  hasPreviousPage: z.boolean(),
  hasNextPage: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TransactionsBulkMeta$ {
  /** @deprecated use `PatchV1TransactionsBulkMeta$inboundSchema` instead. */
  export const inboundSchema = PatchV1TransactionsBulkMeta$inboundSchema;
  /** @deprecated use `PatchV1TransactionsBulkMeta$outboundSchema` instead. */
  export const outboundSchema = PatchV1TransactionsBulkMeta$outboundSchema;
  /** @deprecated use `PatchV1TransactionsBulkMeta$Outbound` instead. */
  export type Outbound = PatchV1TransactionsBulkMeta$Outbound;
}

export function patchV1TransactionsBulkMetaToJSON(
  patchV1TransactionsBulkMeta: PatchV1TransactionsBulkMeta,
): string {
  return JSON.stringify(
    PatchV1TransactionsBulkMeta$outboundSchema.parse(
      patchV1TransactionsBulkMeta,
    ),
  );
}

export function patchV1TransactionsBulkMetaFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1TransactionsBulkMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1TransactionsBulkMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1TransactionsBulkMeta' from JSON`,
  );
}

/** @internal */
export const PatchV1TransactionsBulkResponse$inboundSchema: z.ZodType<
  PatchV1TransactionsBulkResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  meta: z.lazy(() => PatchV1TransactionsBulkMeta$inboundSchema),
  data: z.array(models.TransactionResponse$inboundSchema),
});

/** @internal */
export type PatchV1TransactionsBulkResponse$Outbound = {
  meta: PatchV1TransactionsBulkMeta$Outbound;
  data: Array<models.TransactionResponse$Outbound>;
};

/** @internal */
export const PatchV1TransactionsBulkResponse$outboundSchema: z.ZodType<
  PatchV1TransactionsBulkResponse$Outbound,
  z.ZodTypeDef,
  PatchV1TransactionsBulkResponse
> = z.object({
  meta: z.lazy(() => PatchV1TransactionsBulkMeta$outboundSchema),
  data: z.array(models.TransactionResponse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TransactionsBulkResponse$ {
  /** @deprecated use `PatchV1TransactionsBulkResponse$inboundSchema` instead. */
  export const inboundSchema = PatchV1TransactionsBulkResponse$inboundSchema;
  /** @deprecated use `PatchV1TransactionsBulkResponse$outboundSchema` instead. */
  export const outboundSchema = PatchV1TransactionsBulkResponse$outboundSchema;
  /** @deprecated use `PatchV1TransactionsBulkResponse$Outbound` instead. */
  export type Outbound = PatchV1TransactionsBulkResponse$Outbound;
}

export function patchV1TransactionsBulkResponseToJSON(
  patchV1TransactionsBulkResponse: PatchV1TransactionsBulkResponse,
): string {
  return JSON.stringify(
    PatchV1TransactionsBulkResponse$outboundSchema.parse(
      patchV1TransactionsBulkResponse,
    ),
  );
}

export function patchV1TransactionsBulkResponseFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1TransactionsBulkResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1TransactionsBulkResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1TransactionsBulkResponse' from JSON`,
  );
}
