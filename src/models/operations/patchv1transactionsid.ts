/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Status of the transaction.
 */
export const PatchV1TransactionsIdStatus = {
  Pending: "pending",
  Archived: "archived",
  Completed: "completed",
  Posted: "posted",
  Excluded: "excluded",
} as const;
/**
 * Status of the transaction.
 */
export type PatchV1TransactionsIdStatus = ClosedEnum<
  typeof PatchV1TransactionsIdStatus
>;

/**
 * Recurring frequency of the transaction.
 */
export const PatchV1TransactionsIdFrequency = {
  Weekly: "weekly",
  Monthly: "monthly",
  Annually: "annually",
  Irregular: "irregular",
} as const;
/**
 * Recurring frequency of the transaction.
 */
export type PatchV1TransactionsIdFrequency = ClosedEnum<
  typeof PatchV1TransactionsIdFrequency
>;

export type PatchV1TransactionsIdRequestBody = {
  /**
   * Category slug for the transaction.
   */
  categorySlug?: string | null | undefined;
  /**
   * Status of the transaction.
   */
  status?: PatchV1TransactionsIdStatus | null | undefined;
  /**
   * Whether the transaction is internal.
   */
  internal?: boolean | undefined;
  /**
   * Whether the transaction is recurring.
   */
  recurring?: boolean | undefined;
  /**
   * Recurring frequency of the transaction.
   */
  frequency?: PatchV1TransactionsIdFrequency | null | undefined;
  /**
   * Note for the transaction.
   */
  note?: string | null | undefined;
  /**
   * Assigned user ID for the transaction.
   */
  assignedId?: string | null | undefined;
};

export type PatchV1TransactionsIdRequest = {
  id: string;
  requestBody?: PatchV1TransactionsIdRequestBody | undefined;
};

/** @internal */
export const PatchV1TransactionsIdStatus$inboundSchema: z.ZodNativeEnum<
  typeof PatchV1TransactionsIdStatus
> = z.nativeEnum(PatchV1TransactionsIdStatus);

/** @internal */
export const PatchV1TransactionsIdStatus$outboundSchema: z.ZodNativeEnum<
  typeof PatchV1TransactionsIdStatus
> = PatchV1TransactionsIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TransactionsIdStatus$ {
  /** @deprecated use `PatchV1TransactionsIdStatus$inboundSchema` instead. */
  export const inboundSchema = PatchV1TransactionsIdStatus$inboundSchema;
  /** @deprecated use `PatchV1TransactionsIdStatus$outboundSchema` instead. */
  export const outboundSchema = PatchV1TransactionsIdStatus$outboundSchema;
}

/** @internal */
export const PatchV1TransactionsIdFrequency$inboundSchema: z.ZodNativeEnum<
  typeof PatchV1TransactionsIdFrequency
> = z.nativeEnum(PatchV1TransactionsIdFrequency);

/** @internal */
export const PatchV1TransactionsIdFrequency$outboundSchema: z.ZodNativeEnum<
  typeof PatchV1TransactionsIdFrequency
> = PatchV1TransactionsIdFrequency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TransactionsIdFrequency$ {
  /** @deprecated use `PatchV1TransactionsIdFrequency$inboundSchema` instead. */
  export const inboundSchema = PatchV1TransactionsIdFrequency$inboundSchema;
  /** @deprecated use `PatchV1TransactionsIdFrequency$outboundSchema` instead. */
  export const outboundSchema = PatchV1TransactionsIdFrequency$outboundSchema;
}

/** @internal */
export const PatchV1TransactionsIdRequestBody$inboundSchema: z.ZodType<
  PatchV1TransactionsIdRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  categorySlug: z.nullable(z.string()).optional(),
  status: z.nullable(PatchV1TransactionsIdStatus$inboundSchema).optional(),
  internal: z.boolean().optional(),
  recurring: z.boolean().optional(),
  frequency: z.nullable(PatchV1TransactionsIdFrequency$inboundSchema)
    .optional(),
  note: z.nullable(z.string()).optional(),
  assignedId: z.nullable(z.string()).optional(),
});

/** @internal */
export type PatchV1TransactionsIdRequestBody$Outbound = {
  categorySlug?: string | null | undefined;
  status?: string | null | undefined;
  internal?: boolean | undefined;
  recurring?: boolean | undefined;
  frequency?: string | null | undefined;
  note?: string | null | undefined;
  assignedId?: string | null | undefined;
};

/** @internal */
export const PatchV1TransactionsIdRequestBody$outboundSchema: z.ZodType<
  PatchV1TransactionsIdRequestBody$Outbound,
  z.ZodTypeDef,
  PatchV1TransactionsIdRequestBody
> = z.object({
  categorySlug: z.nullable(z.string()).optional(),
  status: z.nullable(PatchV1TransactionsIdStatus$outboundSchema).optional(),
  internal: z.boolean().optional(),
  recurring: z.boolean().optional(),
  frequency: z.nullable(PatchV1TransactionsIdFrequency$outboundSchema)
    .optional(),
  note: z.nullable(z.string()).optional(),
  assignedId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TransactionsIdRequestBody$ {
  /** @deprecated use `PatchV1TransactionsIdRequestBody$inboundSchema` instead. */
  export const inboundSchema = PatchV1TransactionsIdRequestBody$inboundSchema;
  /** @deprecated use `PatchV1TransactionsIdRequestBody$outboundSchema` instead. */
  export const outboundSchema = PatchV1TransactionsIdRequestBody$outboundSchema;
  /** @deprecated use `PatchV1TransactionsIdRequestBody$Outbound` instead. */
  export type Outbound = PatchV1TransactionsIdRequestBody$Outbound;
}

export function patchV1TransactionsIdRequestBodyToJSON(
  patchV1TransactionsIdRequestBody: PatchV1TransactionsIdRequestBody,
): string {
  return JSON.stringify(
    PatchV1TransactionsIdRequestBody$outboundSchema.parse(
      patchV1TransactionsIdRequestBody,
    ),
  );
}

export function patchV1TransactionsIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1TransactionsIdRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1TransactionsIdRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1TransactionsIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PatchV1TransactionsIdRequest$inboundSchema: z.ZodType<
  PatchV1TransactionsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => PatchV1TransactionsIdRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchV1TransactionsIdRequest$Outbound = {
  id: string;
  RequestBody?: PatchV1TransactionsIdRequestBody$Outbound | undefined;
};

/** @internal */
export const PatchV1TransactionsIdRequest$outboundSchema: z.ZodType<
  PatchV1TransactionsIdRequest$Outbound,
  z.ZodTypeDef,
  PatchV1TransactionsIdRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => PatchV1TransactionsIdRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1TransactionsIdRequest$ {
  /** @deprecated use `PatchV1TransactionsIdRequest$inboundSchema` instead. */
  export const inboundSchema = PatchV1TransactionsIdRequest$inboundSchema;
  /** @deprecated use `PatchV1TransactionsIdRequest$outboundSchema` instead. */
  export const outboundSchema = PatchV1TransactionsIdRequest$outboundSchema;
  /** @deprecated use `PatchV1TransactionsIdRequest$Outbound` instead. */
  export type Outbound = PatchV1TransactionsIdRequest$Outbound;
}

export function patchV1TransactionsIdRequestToJSON(
  patchV1TransactionsIdRequest: PatchV1TransactionsIdRequest,
): string {
  return JSON.stringify(
    PatchV1TransactionsIdRequest$outboundSchema.parse(
      patchV1TransactionsIdRequest,
    ),
  );
}

export function patchV1TransactionsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1TransactionsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1TransactionsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1TransactionsIdRequest' from JSON`,
  );
}
