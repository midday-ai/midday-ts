/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * User's preferred date format. Available options: 'dd/MM/yyyy', 'MM/dd/yyyy', 'yyyy-MM-dd', 'dd.MM.yyyy'
 */
export const DateFormatRequest = {
  DdSlashMMSlashyyyy: "dd/MM/yyyy",
  MMSlashddSlashyyyy: "MM/dd/yyyy",
  YyyyDashMMDashdd: "yyyy-MM-dd",
  DdDotMMDotyyyy: "dd.MM.yyyy",
} as const;
/**
 * User's preferred date format. Available options: 'dd/MM/yyyy', 'MM/dd/yyyy', 'yyyy-MM-dd', 'dd.MM.yyyy'
 */
export type DateFormatRequest = ClosedEnum<typeof DateFormatRequest>;

export type PatchV1UsersMeRequest = {
  /**
   * Full name of the user. Must be between 2 and 32 characters
   */
  fullName?: string | undefined;
  /**
   * Unique identifier of the team the user belongs to
   */
  teamId?: string | undefined;
  /**
   * Email address of the user
   */
  email?: string | undefined;
  /**
   * URL to the user's avatar image. Must be hosted on midday.ai domain
   */
  avatarUrl?: string | undefined;
  /**
   * User's preferred locale for internationalization (language and region)
   */
  locale?: string | undefined;
  /**
   * Whether the user's calendar week starts on Monday (true) or Sunday (false)
   */
  weekStartsOnMonday?: boolean | undefined;
  /**
   * User's timezone identifier in IANA Time Zone Database format
   */
  timezone?: string | undefined;
  /**
   * User's preferred time format: 12 for 12-hour format, 24 for 24-hour format
   */
  timeFormat?: number | undefined;
  /**
   * User's preferred date format. Available options: 'dd/MM/yyyy', 'MM/dd/yyyy', 'yyyy-MM-dd', 'dd.MM.yyyy'
   */
  dateFormat?: DateFormatRequest | undefined;
};

/**
 * User's preferred date format. Available options: 'dd/MM/yyyy', 'MM/dd/yyyy', 'yyyy-MM-dd', 'dd.MM.yyyy'
 */
export const PatchV1UsersMeDateFormatResponse = {
  DdSlashMMSlashyyyy: "dd/MM/yyyy",
  MMSlashddSlashyyyy: "MM/dd/yyyy",
  YyyyDashMMDashdd: "yyyy-MM-dd",
  DdDotMMDotyyyy: "dd.MM.yyyy",
} as const;
/**
 * User's preferred date format. Available options: 'dd/MM/yyyy', 'MM/dd/yyyy', 'yyyy-MM-dd', 'dd.MM.yyyy'
 */
export type PatchV1UsersMeDateFormatResponse = ClosedEnum<
  typeof PatchV1UsersMeDateFormatResponse
>;

/**
 * Team information that the user belongs to
 */
export type PatchV1UsersMeTeam = {
  /**
   * Unique identifier of the team
   */
  id: string;
  /**
   * Name of the team or organization
   */
  name: string;
  /**
   * URL to the team's logo image
   */
  logoUrl: string;
  /**
   * Current subscription plan of the team
   */
  plan: string;
};

/**
 * The updated user
 */
export type PatchV1UsersMeResponse = {
  /**
   * Unique identifier of the user
   */
  id: string;
  /**
   * Full name of the user
   */
  fullName: string;
  /**
   * Email address of the user
   */
  email: string;
  /**
   * URL to the user's avatar image
   */
  avatarUrl: string | null;
  /**
   * User's preferred locale for internationalization (language and region)
   */
  locale: string | null;
  /**
   * Whether the user's calendar week starts on Monday (true) or Sunday (false)
   */
  weekStartsOnMonday: boolean | null;
  /**
   * User's timezone identifier in IANA Time Zone Database format
   */
  timezone: string | null;
  /**
   * User's preferred time format: 12 for 12-hour format, 24 for 24-hour format
   */
  timeFormat: number | null;
  /**
   * User's preferred date format. Available options: 'dd/MM/yyyy', 'MM/dd/yyyy', 'yyyy-MM-dd', 'dd.MM.yyyy'
   */
  dateFormat: PatchV1UsersMeDateFormatResponse | null;
  /**
   * Team information that the user belongs to
   */
  team: PatchV1UsersMeTeam | null;
};

/** @internal */
export const DateFormatRequest$inboundSchema: z.ZodNativeEnum<
  typeof DateFormatRequest
> = z.nativeEnum(DateFormatRequest);

/** @internal */
export const DateFormatRequest$outboundSchema: z.ZodNativeEnum<
  typeof DateFormatRequest
> = DateFormatRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DateFormatRequest$ {
  /** @deprecated use `DateFormatRequest$inboundSchema` instead. */
  export const inboundSchema = DateFormatRequest$inboundSchema;
  /** @deprecated use `DateFormatRequest$outboundSchema` instead. */
  export const outboundSchema = DateFormatRequest$outboundSchema;
}

/** @internal */
export const PatchV1UsersMeRequest$inboundSchema: z.ZodType<
  PatchV1UsersMeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fullName: z.string().optional(),
  teamId: z.string().optional(),
  email: z.string().optional(),
  avatarUrl: z.string().optional(),
  locale: z.string().optional(),
  weekStartsOnMonday: z.boolean().optional(),
  timezone: z.string().optional(),
  timeFormat: z.number().optional(),
  dateFormat: DateFormatRequest$inboundSchema.optional(),
});

/** @internal */
export type PatchV1UsersMeRequest$Outbound = {
  fullName?: string | undefined;
  teamId?: string | undefined;
  email?: string | undefined;
  avatarUrl?: string | undefined;
  locale?: string | undefined;
  weekStartsOnMonday?: boolean | undefined;
  timezone?: string | undefined;
  timeFormat?: number | undefined;
  dateFormat?: string | undefined;
};

/** @internal */
export const PatchV1UsersMeRequest$outboundSchema: z.ZodType<
  PatchV1UsersMeRequest$Outbound,
  z.ZodTypeDef,
  PatchV1UsersMeRequest
> = z.object({
  fullName: z.string().optional(),
  teamId: z.string().optional(),
  email: z.string().optional(),
  avatarUrl: z.string().optional(),
  locale: z.string().optional(),
  weekStartsOnMonday: z.boolean().optional(),
  timezone: z.string().optional(),
  timeFormat: z.number().optional(),
  dateFormat: DateFormatRequest$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1UsersMeRequest$ {
  /** @deprecated use `PatchV1UsersMeRequest$inboundSchema` instead. */
  export const inboundSchema = PatchV1UsersMeRequest$inboundSchema;
  /** @deprecated use `PatchV1UsersMeRequest$outboundSchema` instead. */
  export const outboundSchema = PatchV1UsersMeRequest$outboundSchema;
  /** @deprecated use `PatchV1UsersMeRequest$Outbound` instead. */
  export type Outbound = PatchV1UsersMeRequest$Outbound;
}

export function patchV1UsersMeRequestToJSON(
  patchV1UsersMeRequest: PatchV1UsersMeRequest,
): string {
  return JSON.stringify(
    PatchV1UsersMeRequest$outboundSchema.parse(patchV1UsersMeRequest),
  );
}

export function patchV1UsersMeRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1UsersMeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1UsersMeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1UsersMeRequest' from JSON`,
  );
}

/** @internal */
export const PatchV1UsersMeDateFormatResponse$inboundSchema: z.ZodNativeEnum<
  typeof PatchV1UsersMeDateFormatResponse
> = z.nativeEnum(PatchV1UsersMeDateFormatResponse);

/** @internal */
export const PatchV1UsersMeDateFormatResponse$outboundSchema: z.ZodNativeEnum<
  typeof PatchV1UsersMeDateFormatResponse
> = PatchV1UsersMeDateFormatResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1UsersMeDateFormatResponse$ {
  /** @deprecated use `PatchV1UsersMeDateFormatResponse$inboundSchema` instead. */
  export const inboundSchema = PatchV1UsersMeDateFormatResponse$inboundSchema;
  /** @deprecated use `PatchV1UsersMeDateFormatResponse$outboundSchema` instead. */
  export const outboundSchema = PatchV1UsersMeDateFormatResponse$outboundSchema;
}

/** @internal */
export const PatchV1UsersMeTeam$inboundSchema: z.ZodType<
  PatchV1UsersMeTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  logoUrl: z.string(),
  plan: z.string(),
});

/** @internal */
export type PatchV1UsersMeTeam$Outbound = {
  id: string;
  name: string;
  logoUrl: string;
  plan: string;
};

/** @internal */
export const PatchV1UsersMeTeam$outboundSchema: z.ZodType<
  PatchV1UsersMeTeam$Outbound,
  z.ZodTypeDef,
  PatchV1UsersMeTeam
> = z.object({
  id: z.string(),
  name: z.string(),
  logoUrl: z.string(),
  plan: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1UsersMeTeam$ {
  /** @deprecated use `PatchV1UsersMeTeam$inboundSchema` instead. */
  export const inboundSchema = PatchV1UsersMeTeam$inboundSchema;
  /** @deprecated use `PatchV1UsersMeTeam$outboundSchema` instead. */
  export const outboundSchema = PatchV1UsersMeTeam$outboundSchema;
  /** @deprecated use `PatchV1UsersMeTeam$Outbound` instead. */
  export type Outbound = PatchV1UsersMeTeam$Outbound;
}

export function patchV1UsersMeTeamToJSON(
  patchV1UsersMeTeam: PatchV1UsersMeTeam,
): string {
  return JSON.stringify(
    PatchV1UsersMeTeam$outboundSchema.parse(patchV1UsersMeTeam),
  );
}

export function patchV1UsersMeTeamFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1UsersMeTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1UsersMeTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1UsersMeTeam' from JSON`,
  );
}

/** @internal */
export const PatchV1UsersMeResponse$inboundSchema: z.ZodType<
  PatchV1UsersMeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  fullName: z.string(),
  email: z.string(),
  avatarUrl: z.nullable(z.string()),
  locale: z.nullable(z.string()),
  weekStartsOnMonday: z.nullable(z.boolean()),
  timezone: z.nullable(z.string()),
  timeFormat: z.nullable(z.number()),
  dateFormat: z.nullable(PatchV1UsersMeDateFormatResponse$inboundSchema),
  team: z.nullable(z.lazy(() => PatchV1UsersMeTeam$inboundSchema)),
});

/** @internal */
export type PatchV1UsersMeResponse$Outbound = {
  id: string;
  fullName: string;
  email: string;
  avatarUrl: string | null;
  locale: string | null;
  weekStartsOnMonday: boolean | null;
  timezone: string | null;
  timeFormat: number | null;
  dateFormat: string | null;
  team: PatchV1UsersMeTeam$Outbound | null;
};

/** @internal */
export const PatchV1UsersMeResponse$outboundSchema: z.ZodType<
  PatchV1UsersMeResponse$Outbound,
  z.ZodTypeDef,
  PatchV1UsersMeResponse
> = z.object({
  id: z.string(),
  fullName: z.string(),
  email: z.string(),
  avatarUrl: z.nullable(z.string()),
  locale: z.nullable(z.string()),
  weekStartsOnMonday: z.nullable(z.boolean()),
  timezone: z.nullable(z.string()),
  timeFormat: z.nullable(z.number()),
  dateFormat: z.nullable(PatchV1UsersMeDateFormatResponse$outboundSchema),
  team: z.nullable(z.lazy(() => PatchV1UsersMeTeam$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1UsersMeResponse$ {
  /** @deprecated use `PatchV1UsersMeResponse$inboundSchema` instead. */
  export const inboundSchema = PatchV1UsersMeResponse$inboundSchema;
  /** @deprecated use `PatchV1UsersMeResponse$outboundSchema` instead. */
  export const outboundSchema = PatchV1UsersMeResponse$outboundSchema;
  /** @deprecated use `PatchV1UsersMeResponse$Outbound` instead. */
  export type Outbound = PatchV1UsersMeResponse$Outbound;
}

export function patchV1UsersMeResponseToJSON(
  patchV1UsersMeResponse: PatchV1UsersMeResponse,
): string {
  return JSON.stringify(
    PatchV1UsersMeResponse$outboundSchema.parse(patchV1UsersMeResponse),
  );
}

export function patchV1UsersMeResponseFromJSON(
  jsonString: string,
): SafeParseResult<PatchV1UsersMeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchV1UsersMeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchV1UsersMeResponse' from JSON`,
  );
}
