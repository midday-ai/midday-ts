/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * User's authorization decision
 */
export const Decision = {
  Allow: "allow",
  Deny: "deny",
} as const;
/**
 * User's authorization decision
 */
export type Decision = ClosedEnum<typeof Decision>;

export const Scope = {
  BankAccountsRead: "bank-accounts.read",
  BankAccountsWrite: "bank-accounts.write",
  CustomersRead: "customers.read",
  CustomersWrite: "customers.write",
  DocumentsRead: "documents.read",
  DocumentsWrite: "documents.write",
  InboxRead: "inbox.read",
  InboxWrite: "inbox.write",
  InvoicesRead: "invoices.read",
  InvoicesWrite: "invoices.write",
  ReportsRead: "reports.read",
  SearchRead: "search.read",
  TagsRead: "tags.read",
  TagsWrite: "tags.write",
  TeamsRead: "teams.read",
  TeamsWrite: "teams.write",
  TrackerEntriesRead: "tracker-entries.read",
  TrackerEntriesWrite: "tracker-entries.write",
  TrackerProjectsRead: "tracker-projects.read",
  TrackerProjectsWrite: "tracker-projects.write",
  TransactionsRead: "transactions.read",
  TransactionsWrite: "transactions.write",
  UsersRead: "users.read",
  UsersWrite: "users.write",
  NotificationsRead: "notifications.read",
  NotificationsWrite: "notifications.write",
  ApisAll: "apis.all",
  ApisRead: "apis.read",
} as const;
export type Scope = ClosedEnum<typeof Scope>;

export type PostOAuthAuthorizationRequest = {
  /**
   * Client ID of the OAuth application
   */
  clientId: string;
  /**
   * User's authorization decision
   */
  decision: Decision;
  /**
   * Scopes the user has approved
   */
  scopes: Array<Scope>;
  /**
   * Redirect URI for OAuth callback
   */
  redirectUri: string;
  /**
   * State parameter for CSRF protection (min 32 chars, alphanumeric + _.-)
   */
  state: string;
  /**
   * Code challenge for PKCE (S256 method assumed)
   */
  codeChallenge?: string | undefined;
  /**
   * Team ID to authorize the application for
   */
  teamId: string;
};

/**
 * Authorization decision processed, returns redirect URL
 */
export type PostOAuthAuthorizationResponse = {
  redirectUrl: string;
};

/** @internal */
export const Decision$inboundSchema: z.ZodNativeEnum<typeof Decision> = z
  .nativeEnum(Decision);

/** @internal */
export const Decision$outboundSchema: z.ZodNativeEnum<typeof Decision> =
  Decision$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Decision$ {
  /** @deprecated use `Decision$inboundSchema` instead. */
  export const inboundSchema = Decision$inboundSchema;
  /** @deprecated use `Decision$outboundSchema` instead. */
  export const outboundSchema = Decision$outboundSchema;
}

/** @internal */
export const Scope$inboundSchema: z.ZodNativeEnum<typeof Scope> = z.nativeEnum(
  Scope,
);

/** @internal */
export const Scope$outboundSchema: z.ZodNativeEnum<typeof Scope> =
  Scope$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Scope$ {
  /** @deprecated use `Scope$inboundSchema` instead. */
  export const inboundSchema = Scope$inboundSchema;
  /** @deprecated use `Scope$outboundSchema` instead. */
  export const outboundSchema = Scope$outboundSchema;
}

/** @internal */
export const PostOAuthAuthorizationRequest$inboundSchema: z.ZodType<
  PostOAuthAuthorizationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  client_id: z.string(),
  decision: Decision$inboundSchema,
  scopes: z.array(Scope$inboundSchema),
  redirect_uri: z.string(),
  state: z.string(),
  code_challenge: z.string().optional(),
  teamId: z.string(),
}).transform((v) => {
  return remap$(v, {
    "client_id": "clientId",
    "redirect_uri": "redirectUri",
    "code_challenge": "codeChallenge",
  });
});

/** @internal */
export type PostOAuthAuthorizationRequest$Outbound = {
  client_id: string;
  decision: string;
  scopes: Array<string>;
  redirect_uri: string;
  state: string;
  code_challenge?: string | undefined;
  teamId: string;
};

/** @internal */
export const PostOAuthAuthorizationRequest$outboundSchema: z.ZodType<
  PostOAuthAuthorizationRequest$Outbound,
  z.ZodTypeDef,
  PostOAuthAuthorizationRequest
> = z.object({
  clientId: z.string(),
  decision: Decision$outboundSchema,
  scopes: z.array(Scope$outboundSchema),
  redirectUri: z.string(),
  state: z.string(),
  codeChallenge: z.string().optional(),
  teamId: z.string(),
}).transform((v) => {
  return remap$(v, {
    clientId: "client_id",
    redirectUri: "redirect_uri",
    codeChallenge: "code_challenge",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOAuthAuthorizationRequest$ {
  /** @deprecated use `PostOAuthAuthorizationRequest$inboundSchema` instead. */
  export const inboundSchema = PostOAuthAuthorizationRequest$inboundSchema;
  /** @deprecated use `PostOAuthAuthorizationRequest$outboundSchema` instead. */
  export const outboundSchema = PostOAuthAuthorizationRequest$outboundSchema;
  /** @deprecated use `PostOAuthAuthorizationRequest$Outbound` instead. */
  export type Outbound = PostOAuthAuthorizationRequest$Outbound;
}

export function postOAuthAuthorizationRequestToJSON(
  postOAuthAuthorizationRequest: PostOAuthAuthorizationRequest,
): string {
  return JSON.stringify(
    PostOAuthAuthorizationRequest$outboundSchema.parse(
      postOAuthAuthorizationRequest,
    ),
  );
}

export function postOAuthAuthorizationRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostOAuthAuthorizationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOAuthAuthorizationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOAuthAuthorizationRequest' from JSON`,
  );
}

/** @internal */
export const PostOAuthAuthorizationResponse$inboundSchema: z.ZodType<
  PostOAuthAuthorizationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  redirect_url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "redirect_url": "redirectUrl",
  });
});

/** @internal */
export type PostOAuthAuthorizationResponse$Outbound = {
  redirect_url: string;
};

/** @internal */
export const PostOAuthAuthorizationResponse$outboundSchema: z.ZodType<
  PostOAuthAuthorizationResponse$Outbound,
  z.ZodTypeDef,
  PostOAuthAuthorizationResponse
> = z.object({
  redirectUrl: z.string(),
}).transform((v) => {
  return remap$(v, {
    redirectUrl: "redirect_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOAuthAuthorizationResponse$ {
  /** @deprecated use `PostOAuthAuthorizationResponse$inboundSchema` instead. */
  export const inboundSchema = PostOAuthAuthorizationResponse$inboundSchema;
  /** @deprecated use `PostOAuthAuthorizationResponse$outboundSchema` instead. */
  export const outboundSchema = PostOAuthAuthorizationResponse$outboundSchema;
  /** @deprecated use `PostOAuthAuthorizationResponse$Outbound` instead. */
  export type Outbound = PostOAuthAuthorizationResponse$Outbound;
}

export function postOAuthAuthorizationResponseToJSON(
  postOAuthAuthorizationResponse: PostOAuthAuthorizationResponse,
): string {
  return JSON.stringify(
    PostOAuthAuthorizationResponse$outboundSchema.parse(
      postOAuthAuthorizationResponse,
    ),
  );
}

export function postOAuthAuthorizationResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostOAuthAuthorizationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOAuthAuthorizationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOAuthAuthorizationResponse' from JSON`,
  );
}
