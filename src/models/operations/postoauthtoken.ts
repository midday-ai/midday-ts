/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * OAuth grant type, must be 'refresh_token'
 */
export const GrantTypeRefreshToken = {
  RefreshToken: "refresh_token",
} as const;
/**
 * OAuth grant type, must be 'refresh_token'
 */
export type GrantTypeRefreshToken = ClosedEnum<typeof GrantTypeRefreshToken>;

export type RefreshToken = {
  /**
   * OAuth grant type, must be 'refresh_token'
   */
  grantType: GrantTypeRefreshToken;
  /**
   * Refresh token received from token endpoint
   */
  refreshToken: string;
  /**
   * Client ID of the OAuth application
   */
  clientId: string;
  /**
   * Client secret of the OAuth application
   */
  clientSecret: string;
  /**
   * Space-separated list of requested scopes (optional)
   */
  scope?: string | undefined;
};

/**
 * OAuth grant type, must be 'authorization_code'
 */
export const GrantTypeAuthorizationCode = {
  AuthorizationCode: "authorization_code",
} as const;
/**
 * OAuth grant type, must be 'authorization_code'
 */
export type GrantTypeAuthorizationCode = ClosedEnum<
  typeof GrantTypeAuthorizationCode
>;

export type AuthorizationCode = {
  /**
   * OAuth grant type, must be 'authorization_code'
   */
  grantType: GrantTypeAuthorizationCode;
  /**
   * Authorization code received from authorization endpoint
   */
  code: string;
  /**
   * Redirect URI used in authorization request
   */
  redirectUri: string;
  /**
   * Client ID of the OAuth application
   */
  clientId: string;
  /**
   * Client secret of the OAuth application
   */
  clientSecret: string;
  /**
   * Code verifier for PKCE
   */
  codeVerifier?: string | undefined;
};

export type PostOAuthTokenRequest = AuthorizationCode | RefreshToken;

/**
 * Token type, always 'Bearer'
 */
export const TokenType = {
  Bearer: "Bearer",
} as const;
/**
 * Token type, always 'Bearer'
 */
export type TokenType = ClosedEnum<typeof TokenType>;

/**
 * Token exchange successful
 */
export type PostOAuthTokenResponse = {
  /**
   * Access token for API requests
   */
  accessToken: string;
  /**
   * Token type, always 'Bearer'
   */
  tokenType: TokenType;
  /**
   * Token expiration time in seconds
   */
  expiresIn: number;
  /**
   * Refresh token for obtaining new access tokens
   */
  refreshToken: string;
  /**
   * Space-separated list of granted scopes
   */
  scope: string;
};

/** @internal */
export const GrantTypeRefreshToken$inboundSchema: z.ZodNativeEnum<
  typeof GrantTypeRefreshToken
> = z.nativeEnum(GrantTypeRefreshToken);

/** @internal */
export const GrantTypeRefreshToken$outboundSchema: z.ZodNativeEnum<
  typeof GrantTypeRefreshToken
> = GrantTypeRefreshToken$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantTypeRefreshToken$ {
  /** @deprecated use `GrantTypeRefreshToken$inboundSchema` instead. */
  export const inboundSchema = GrantTypeRefreshToken$inboundSchema;
  /** @deprecated use `GrantTypeRefreshToken$outboundSchema` instead. */
  export const outboundSchema = GrantTypeRefreshToken$outboundSchema;
}

/** @internal */
export const RefreshToken$inboundSchema: z.ZodType<
  RefreshToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  grant_type: GrantTypeRefreshToken$inboundSchema,
  refresh_token: z.string(),
  client_id: z.string(),
  client_secret: z.string(),
  scope: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "grant_type": "grantType",
    "refresh_token": "refreshToken",
    "client_id": "clientId",
    "client_secret": "clientSecret",
  });
});

/** @internal */
export type RefreshToken$Outbound = {
  grant_type: string;
  refresh_token: string;
  client_id: string;
  client_secret: string;
  scope?: string | undefined;
};

/** @internal */
export const RefreshToken$outboundSchema: z.ZodType<
  RefreshToken$Outbound,
  z.ZodTypeDef,
  RefreshToken
> = z.object({
  grantType: GrantTypeRefreshToken$outboundSchema,
  refreshToken: z.string(),
  clientId: z.string(),
  clientSecret: z.string(),
  scope: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    grantType: "grant_type",
    refreshToken: "refresh_token",
    clientId: "client_id",
    clientSecret: "client_secret",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefreshToken$ {
  /** @deprecated use `RefreshToken$inboundSchema` instead. */
  export const inboundSchema = RefreshToken$inboundSchema;
  /** @deprecated use `RefreshToken$outboundSchema` instead. */
  export const outboundSchema = RefreshToken$outboundSchema;
  /** @deprecated use `RefreshToken$Outbound` instead. */
  export type Outbound = RefreshToken$Outbound;
}

export function refreshTokenToJSON(refreshToken: RefreshToken): string {
  return JSON.stringify(RefreshToken$outboundSchema.parse(refreshToken));
}

export function refreshTokenFromJSON(
  jsonString: string,
): SafeParseResult<RefreshToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefreshToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefreshToken' from JSON`,
  );
}

/** @internal */
export const GrantTypeAuthorizationCode$inboundSchema: z.ZodNativeEnum<
  typeof GrantTypeAuthorizationCode
> = z.nativeEnum(GrantTypeAuthorizationCode);

/** @internal */
export const GrantTypeAuthorizationCode$outboundSchema: z.ZodNativeEnum<
  typeof GrantTypeAuthorizationCode
> = GrantTypeAuthorizationCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantTypeAuthorizationCode$ {
  /** @deprecated use `GrantTypeAuthorizationCode$inboundSchema` instead. */
  export const inboundSchema = GrantTypeAuthorizationCode$inboundSchema;
  /** @deprecated use `GrantTypeAuthorizationCode$outboundSchema` instead. */
  export const outboundSchema = GrantTypeAuthorizationCode$outboundSchema;
}

/** @internal */
export const AuthorizationCode$inboundSchema: z.ZodType<
  AuthorizationCode,
  z.ZodTypeDef,
  unknown
> = z.object({
  grant_type: GrantTypeAuthorizationCode$inboundSchema,
  code: z.string(),
  redirect_uri: z.string(),
  client_id: z.string(),
  client_secret: z.string(),
  code_verifier: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "grant_type": "grantType",
    "redirect_uri": "redirectUri",
    "client_id": "clientId",
    "client_secret": "clientSecret",
    "code_verifier": "codeVerifier",
  });
});

/** @internal */
export type AuthorizationCode$Outbound = {
  grant_type: string;
  code: string;
  redirect_uri: string;
  client_id: string;
  client_secret: string;
  code_verifier?: string | undefined;
};

/** @internal */
export const AuthorizationCode$outboundSchema: z.ZodType<
  AuthorizationCode$Outbound,
  z.ZodTypeDef,
  AuthorizationCode
> = z.object({
  grantType: GrantTypeAuthorizationCode$outboundSchema,
  code: z.string(),
  redirectUri: z.string(),
  clientId: z.string(),
  clientSecret: z.string(),
  codeVerifier: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    grantType: "grant_type",
    redirectUri: "redirect_uri",
    clientId: "client_id",
    clientSecret: "client_secret",
    codeVerifier: "code_verifier",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorizationCode$ {
  /** @deprecated use `AuthorizationCode$inboundSchema` instead. */
  export const inboundSchema = AuthorizationCode$inboundSchema;
  /** @deprecated use `AuthorizationCode$outboundSchema` instead. */
  export const outboundSchema = AuthorizationCode$outboundSchema;
  /** @deprecated use `AuthorizationCode$Outbound` instead. */
  export type Outbound = AuthorizationCode$Outbound;
}

export function authorizationCodeToJSON(
  authorizationCode: AuthorizationCode,
): string {
  return JSON.stringify(
    AuthorizationCode$outboundSchema.parse(authorizationCode),
  );
}

export function authorizationCodeFromJSON(
  jsonString: string,
): SafeParseResult<AuthorizationCode, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthorizationCode$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthorizationCode' from JSON`,
  );
}

/** @internal */
export const PostOAuthTokenRequest$inboundSchema: z.ZodType<
  PostOAuthTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => AuthorizationCode$inboundSchema),
  z.lazy(() => RefreshToken$inboundSchema),
]);

/** @internal */
export type PostOAuthTokenRequest$Outbound =
  | AuthorizationCode$Outbound
  | RefreshToken$Outbound;

/** @internal */
export const PostOAuthTokenRequest$outboundSchema: z.ZodType<
  PostOAuthTokenRequest$Outbound,
  z.ZodTypeDef,
  PostOAuthTokenRequest
> = z.union([
  z.lazy(() => AuthorizationCode$outboundSchema),
  z.lazy(() => RefreshToken$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOAuthTokenRequest$ {
  /** @deprecated use `PostOAuthTokenRequest$inboundSchema` instead. */
  export const inboundSchema = PostOAuthTokenRequest$inboundSchema;
  /** @deprecated use `PostOAuthTokenRequest$outboundSchema` instead. */
  export const outboundSchema = PostOAuthTokenRequest$outboundSchema;
  /** @deprecated use `PostOAuthTokenRequest$Outbound` instead. */
  export type Outbound = PostOAuthTokenRequest$Outbound;
}

export function postOAuthTokenRequestToJSON(
  postOAuthTokenRequest: PostOAuthTokenRequest,
): string {
  return JSON.stringify(
    PostOAuthTokenRequest$outboundSchema.parse(postOAuthTokenRequest),
  );
}

export function postOAuthTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostOAuthTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOAuthTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOAuthTokenRequest' from JSON`,
  );
}

/** @internal */
export const TokenType$inboundSchema: z.ZodNativeEnum<typeof TokenType> = z
  .nativeEnum(TokenType);

/** @internal */
export const TokenType$outboundSchema: z.ZodNativeEnum<typeof TokenType> =
  TokenType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenType$ {
  /** @deprecated use `TokenType$inboundSchema` instead. */
  export const inboundSchema = TokenType$inboundSchema;
  /** @deprecated use `TokenType$outboundSchema` instead. */
  export const outboundSchema = TokenType$outboundSchema;
}

/** @internal */
export const PostOAuthTokenResponse$inboundSchema: z.ZodType<
  PostOAuthTokenResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  access_token: z.string(),
  token_type: TokenType$inboundSchema,
  expires_in: z.number(),
  refresh_token: z.string(),
  scope: z.string(),
}).transform((v) => {
  return remap$(v, {
    "access_token": "accessToken",
    "token_type": "tokenType",
    "expires_in": "expiresIn",
    "refresh_token": "refreshToken",
  });
});

/** @internal */
export type PostOAuthTokenResponse$Outbound = {
  access_token: string;
  token_type: string;
  expires_in: number;
  refresh_token: string;
  scope: string;
};

/** @internal */
export const PostOAuthTokenResponse$outboundSchema: z.ZodType<
  PostOAuthTokenResponse$Outbound,
  z.ZodTypeDef,
  PostOAuthTokenResponse
> = z.object({
  accessToken: z.string(),
  tokenType: TokenType$outboundSchema,
  expiresIn: z.number(),
  refreshToken: z.string(),
  scope: z.string(),
}).transform((v) => {
  return remap$(v, {
    accessToken: "access_token",
    tokenType: "token_type",
    expiresIn: "expires_in",
    refreshToken: "refresh_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostOAuthTokenResponse$ {
  /** @deprecated use `PostOAuthTokenResponse$inboundSchema` instead. */
  export const inboundSchema = PostOAuthTokenResponse$inboundSchema;
  /** @deprecated use `PostOAuthTokenResponse$outboundSchema` instead. */
  export const outboundSchema = PostOAuthTokenResponse$outboundSchema;
  /** @deprecated use `PostOAuthTokenResponse$Outbound` instead. */
  export type Outbound = PostOAuthTokenResponse$Outbound;
}

export function postOAuthTokenResponseToJSON(
  postOAuthTokenResponse: PostOAuthTokenResponse,
): string {
  return JSON.stringify(
    PostOAuthTokenResponse$outboundSchema.parse(postOAuthTokenResponse),
  );
}

export function postOAuthTokenResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostOAuthTokenResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostOAuthTokenResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostOAuthTokenResponse' from JSON`,
  );
}
