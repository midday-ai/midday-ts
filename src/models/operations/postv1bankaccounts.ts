/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Schema for creating a new bank account.
 */
export type PostV1BankAccountsRequest = {
  /**
   * The name of the bank account.
   */
  name: string;
  /**
   * The currency code for the bank account (ISO 4217).
   */
  currency?: string | undefined;
  /**
   * Whether the bank account is a manual account.
   */
  manual?: boolean | undefined;
};

/**
 * A single bank account object response.
 */
export type PostV1BankAccountsResponse = {
  /**
   * Unique identifier for the bank account.
   */
  id: string;
  /**
   * Name of the bank account.
   */
  name: string | null;
  /**
   * Currency code of the bank account (e.g., USD, EUR).
   */
  currency: string | null;
  /**
   * Type of the bank account (e.g., depository, credit).
   */
  type: string | null;
  /**
   * Whether the bank account is enabled.
   */
  enabled: boolean;
  /**
   * Current balance of the bank account.
   */
  balance: number | null;
  /**
   * Whether the bank account is a manual account.
   */
  manual: boolean | null;
};

/** @internal */
export const PostV1BankAccountsRequest$inboundSchema: z.ZodType<
  PostV1BankAccountsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  currency: z.string().optional(),
  manual: z.boolean().optional(),
});

/** @internal */
export type PostV1BankAccountsRequest$Outbound = {
  name: string;
  currency?: string | undefined;
  manual?: boolean | undefined;
};

/** @internal */
export const PostV1BankAccountsRequest$outboundSchema: z.ZodType<
  PostV1BankAccountsRequest$Outbound,
  z.ZodTypeDef,
  PostV1BankAccountsRequest
> = z.object({
  name: z.string(),
  currency: z.string().optional(),
  manual: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1BankAccountsRequest$ {
  /** @deprecated use `PostV1BankAccountsRequest$inboundSchema` instead. */
  export const inboundSchema = PostV1BankAccountsRequest$inboundSchema;
  /** @deprecated use `PostV1BankAccountsRequest$outboundSchema` instead. */
  export const outboundSchema = PostV1BankAccountsRequest$outboundSchema;
  /** @deprecated use `PostV1BankAccountsRequest$Outbound` instead. */
  export type Outbound = PostV1BankAccountsRequest$Outbound;
}

export function postV1BankAccountsRequestToJSON(
  postV1BankAccountsRequest: PostV1BankAccountsRequest,
): string {
  return JSON.stringify(
    PostV1BankAccountsRequest$outboundSchema.parse(postV1BankAccountsRequest),
  );
}

export function postV1BankAccountsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostV1BankAccountsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1BankAccountsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1BankAccountsRequest' from JSON`,
  );
}

/** @internal */
export const PostV1BankAccountsResponse$inboundSchema: z.ZodType<
  PostV1BankAccountsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()),
  currency: z.nullable(z.string()),
  type: z.nullable(z.string()),
  enabled: z.boolean(),
  balance: z.nullable(z.number()),
  manual: z.nullable(z.boolean()),
});

/** @internal */
export type PostV1BankAccountsResponse$Outbound = {
  id: string;
  name: string | null;
  currency: string | null;
  type: string | null;
  enabled: boolean;
  balance: number | null;
  manual: boolean | null;
};

/** @internal */
export const PostV1BankAccountsResponse$outboundSchema: z.ZodType<
  PostV1BankAccountsResponse$Outbound,
  z.ZodTypeDef,
  PostV1BankAccountsResponse
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()),
  currency: z.nullable(z.string()),
  type: z.nullable(z.string()),
  enabled: z.boolean(),
  balance: z.nullable(z.number()),
  manual: z.nullable(z.boolean()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1BankAccountsResponse$ {
  /** @deprecated use `PostV1BankAccountsResponse$inboundSchema` instead. */
  export const inboundSchema = PostV1BankAccountsResponse$inboundSchema;
  /** @deprecated use `PostV1BankAccountsResponse$outboundSchema` instead. */
  export const outboundSchema = PostV1BankAccountsResponse$outboundSchema;
  /** @deprecated use `PostV1BankAccountsResponse$Outbound` instead. */
  export type Outbound = PostV1BankAccountsResponse$Outbound;
}

export function postV1BankAccountsResponseToJSON(
  postV1BankAccountsResponse: PostV1BankAccountsResponse,
): string {
  return JSON.stringify(
    PostV1BankAccountsResponse$outboundSchema.parse(postV1BankAccountsResponse),
  );
}

export function postV1BankAccountsResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostV1BankAccountsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1BankAccountsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1BankAccountsResponse' from JSON`,
  );
}
