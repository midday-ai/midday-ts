/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV1CustomersTagRequest = {
  /**
   * Unique identifier of the tag
   */
  id: string;
  /**
   * Display name of the tag
   */
  name: string;
};

export type PostV1CustomersRequest = {
  /**
   * Unique identifier of the customer. Required for updates, omit for new customers
   */
  id?: string | undefined;
  /**
   * Name of the customer or organization
   */
  name: string;
  /**
   * Primary email address of the customer
   */
  email: string;
  /**
   * Country name where the customer is located
   */
  country?: string | null | undefined;
  /**
   * First line of the customer's address
   */
  addressLine1?: string | null | undefined;
  /**
   * Second line of the customer's address (suite, apartment, etc.)
   */
  addressLine2?: string | null | undefined;
  /**
   * City where the customer is located
   */
  city?: string | null | undefined;
  /**
   * State or province where the customer is located
   */
  state?: string | null | undefined;
  /**
   * ZIP or postal code of the customer's address
   */
  zip?: string | null | undefined;
  /**
   * Primary phone number of the customer
   */
  phone?: string | null | undefined;
  /**
   * Website URL of the customer
   */
  website?: string | null | undefined;
  /**
   * Internal notes about the customer for team reference
   */
  note?: string | null | undefined;
  /**
   * VAT (Value Added Tax) number of the customer
   */
  vatNumber?: string | null | undefined;
  /**
   * Country code in ISO 3166-1 alpha-2 format
   */
  countryCode?: string | null | undefined;
  /**
   * Primary contact person's name at the customer organization
   */
  contact?: string | null | undefined;
  /**
   * Array of tags to associate with the customer for categorization
   */
  tags?: Array<PostV1CustomersTagRequest> | undefined;
};

export type PostV1CustomersTagResponse = {
  /**
   * Unique identifier of the tag
   */
  id: string;
  /**
   * Display name of the tag
   */
  name: string;
};

/**
 * Customer created
 */
export type PostV1CustomersResponse = {
  /**
   * Unique identifier of the customer
   */
  id: string;
  /**
   * Name of the customer or organization
   */
  name: string;
  /**
   * Primary email address of the customer
   */
  email: string;
  /**
   * Primary phone number of the customer
   */
  phone: string | null;
  /**
   * Website URL of the customer
   */
  website: string | null;
  /**
   * Date and time when the customer was created in ISO 8601 format
   */
  createdAt: string;
  /**
   * Country name where the customer is located
   */
  country: string | null;
  /**
   * First line of the customer's address
   */
  addressLine1: string | null;
  /**
   * Second line of the customer's address (suite, apartment, etc.)
   */
  addressLine2: string | null;
  /**
   * City where the customer is located
   */
  city: string | null;
  /**
   * State or province where the customer is located
   */
  state: string | null;
  /**
   * ZIP or postal code of the customer's address
   */
  zip: string | null;
  /**
   * Internal notes about the customer for team reference
   */
  note: string | null;
  /**
   * VAT (Value Added Tax) number of the customer
   */
  vatNumber: string | null;
  /**
   * Country code in ISO 3166-1 alpha-2 format
   */
  countryCode: string | null;
  /**
   * Unique token for the customer (used for internal identification)
   */
  token: string;
  /**
   * Primary contact person's name at the customer organization
   */
  contact: string | null;
  /**
   * Total number of invoices created for this customer
   */
  invoiceCount: number;
  /**
   * Total number of projects associated with this customer
   */
  projectCount: number;
  /**
   * Array of tags associated with the customer for categorization
   */
  tags: Array<PostV1CustomersTagResponse>;
};

/** @internal */
export const PostV1CustomersTagRequest$inboundSchema: z.ZodType<
  PostV1CustomersTagRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
});

/** @internal */
export type PostV1CustomersTagRequest$Outbound = {
  id: string;
  name: string;
};

/** @internal */
export const PostV1CustomersTagRequest$outboundSchema: z.ZodType<
  PostV1CustomersTagRequest$Outbound,
  z.ZodTypeDef,
  PostV1CustomersTagRequest
> = z.object({
  id: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CustomersTagRequest$ {
  /** @deprecated use `PostV1CustomersTagRequest$inboundSchema` instead. */
  export const inboundSchema = PostV1CustomersTagRequest$inboundSchema;
  /** @deprecated use `PostV1CustomersTagRequest$outboundSchema` instead. */
  export const outboundSchema = PostV1CustomersTagRequest$outboundSchema;
  /** @deprecated use `PostV1CustomersTagRequest$Outbound` instead. */
  export type Outbound = PostV1CustomersTagRequest$Outbound;
}

export function postV1CustomersTagRequestToJSON(
  postV1CustomersTagRequest: PostV1CustomersTagRequest,
): string {
  return JSON.stringify(
    PostV1CustomersTagRequest$outboundSchema.parse(postV1CustomersTagRequest),
  );
}

export function postV1CustomersTagRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostV1CustomersTagRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1CustomersTagRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1CustomersTagRequest' from JSON`,
  );
}

/** @internal */
export const PostV1CustomersRequest$inboundSchema: z.ZodType<
  PostV1CustomersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  country: z.nullable(z.string()).optional(),
  addressLine1: z.nullable(z.string()).optional(),
  addressLine2: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  zip: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  contact: z.nullable(z.string()).optional(),
  tags: z.array(z.lazy(() => PostV1CustomersTagRequest$inboundSchema))
    .optional(),
});

/** @internal */
export type PostV1CustomersRequest$Outbound = {
  id?: string | undefined;
  name: string;
  email: string;
  country?: string | null | undefined;
  addressLine1?: string | null | undefined;
  addressLine2?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  zip?: string | null | undefined;
  phone?: string | null | undefined;
  website?: string | null | undefined;
  note?: string | null | undefined;
  vatNumber?: string | null | undefined;
  countryCode?: string | null | undefined;
  contact?: string | null | undefined;
  tags?: Array<PostV1CustomersTagRequest$Outbound> | undefined;
};

/** @internal */
export const PostV1CustomersRequest$outboundSchema: z.ZodType<
  PostV1CustomersRequest$Outbound,
  z.ZodTypeDef,
  PostV1CustomersRequest
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  country: z.nullable(z.string()).optional(),
  addressLine1: z.nullable(z.string()).optional(),
  addressLine2: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  zip: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  contact: z.nullable(z.string()).optional(),
  tags: z.array(z.lazy(() => PostV1CustomersTagRequest$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CustomersRequest$ {
  /** @deprecated use `PostV1CustomersRequest$inboundSchema` instead. */
  export const inboundSchema = PostV1CustomersRequest$inboundSchema;
  /** @deprecated use `PostV1CustomersRequest$outboundSchema` instead. */
  export const outboundSchema = PostV1CustomersRequest$outboundSchema;
  /** @deprecated use `PostV1CustomersRequest$Outbound` instead. */
  export type Outbound = PostV1CustomersRequest$Outbound;
}

export function postV1CustomersRequestToJSON(
  postV1CustomersRequest: PostV1CustomersRequest,
): string {
  return JSON.stringify(
    PostV1CustomersRequest$outboundSchema.parse(postV1CustomersRequest),
  );
}

export function postV1CustomersRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostV1CustomersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1CustomersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1CustomersRequest' from JSON`,
  );
}

/** @internal */
export const PostV1CustomersTagResponse$inboundSchema: z.ZodType<
  PostV1CustomersTagResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
});

/** @internal */
export type PostV1CustomersTagResponse$Outbound = {
  id: string;
  name: string;
};

/** @internal */
export const PostV1CustomersTagResponse$outboundSchema: z.ZodType<
  PostV1CustomersTagResponse$Outbound,
  z.ZodTypeDef,
  PostV1CustomersTagResponse
> = z.object({
  id: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CustomersTagResponse$ {
  /** @deprecated use `PostV1CustomersTagResponse$inboundSchema` instead. */
  export const inboundSchema = PostV1CustomersTagResponse$inboundSchema;
  /** @deprecated use `PostV1CustomersTagResponse$outboundSchema` instead. */
  export const outboundSchema = PostV1CustomersTagResponse$outboundSchema;
  /** @deprecated use `PostV1CustomersTagResponse$Outbound` instead. */
  export type Outbound = PostV1CustomersTagResponse$Outbound;
}

export function postV1CustomersTagResponseToJSON(
  postV1CustomersTagResponse: PostV1CustomersTagResponse,
): string {
  return JSON.stringify(
    PostV1CustomersTagResponse$outboundSchema.parse(postV1CustomersTagResponse),
  );
}

export function postV1CustomersTagResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostV1CustomersTagResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1CustomersTagResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1CustomersTagResponse' from JSON`,
  );
}

/** @internal */
export const PostV1CustomersResponse$inboundSchema: z.ZodType<
  PostV1CustomersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  phone: z.nullable(z.string()),
  website: z.nullable(z.string()),
  createdAt: z.string(),
  country: z.nullable(z.string()),
  addressLine1: z.nullable(z.string()),
  addressLine2: z.nullable(z.string()),
  city: z.nullable(z.string()),
  state: z.nullable(z.string()),
  zip: z.nullable(z.string()),
  note: z.nullable(z.string()),
  vatNumber: z.nullable(z.string()),
  countryCode: z.nullable(z.string()),
  token: z.string(),
  contact: z.nullable(z.string()),
  invoiceCount: z.number(),
  projectCount: z.number(),
  tags: z.array(z.lazy(() => PostV1CustomersTagResponse$inboundSchema)),
});

/** @internal */
export type PostV1CustomersResponse$Outbound = {
  id: string;
  name: string;
  email: string;
  phone: string | null;
  website: string | null;
  createdAt: string;
  country: string | null;
  addressLine1: string | null;
  addressLine2: string | null;
  city: string | null;
  state: string | null;
  zip: string | null;
  note: string | null;
  vatNumber: string | null;
  countryCode: string | null;
  token: string;
  contact: string | null;
  invoiceCount: number;
  projectCount: number;
  tags: Array<PostV1CustomersTagResponse$Outbound>;
};

/** @internal */
export const PostV1CustomersResponse$outboundSchema: z.ZodType<
  PostV1CustomersResponse$Outbound,
  z.ZodTypeDef,
  PostV1CustomersResponse
> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  phone: z.nullable(z.string()),
  website: z.nullable(z.string()),
  createdAt: z.string(),
  country: z.nullable(z.string()),
  addressLine1: z.nullable(z.string()),
  addressLine2: z.nullable(z.string()),
  city: z.nullable(z.string()),
  state: z.nullable(z.string()),
  zip: z.nullable(z.string()),
  note: z.nullable(z.string()),
  vatNumber: z.nullable(z.string()),
  countryCode: z.nullable(z.string()),
  token: z.string(),
  contact: z.nullable(z.string()),
  invoiceCount: z.number(),
  projectCount: z.number(),
  tags: z.array(z.lazy(() => PostV1CustomersTagResponse$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CustomersResponse$ {
  /** @deprecated use `PostV1CustomersResponse$inboundSchema` instead. */
  export const inboundSchema = PostV1CustomersResponse$inboundSchema;
  /** @deprecated use `PostV1CustomersResponse$outboundSchema` instead. */
  export const outboundSchema = PostV1CustomersResponse$outboundSchema;
  /** @deprecated use `PostV1CustomersResponse$Outbound` instead. */
  export type Outbound = PostV1CustomersResponse$Outbound;
}

export function postV1CustomersResponseToJSON(
  postV1CustomersResponse: PostV1CustomersResponse,
): string {
  return JSON.stringify(
    PostV1CustomersResponse$outboundSchema.parse(postV1CustomersResponse),
  );
}

export function postV1CustomersResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostV1CustomersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1CustomersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1CustomersResponse' from JSON`,
  );
}
