/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Current status of the project
 */
export const PostV1TrackerProjectsStatus = {
  InProgress: "in_progress",
  Completed: "completed",
} as const;
/**
 * Current status of the project
 */
export type PostV1TrackerProjectsStatus = ClosedEnum<
  typeof PostV1TrackerProjectsStatus
>;

export type PostV1TrackerProjectsTag = {
  /**
   * Unique identifier of the tag
   */
  id: string;
  /**
   * Display value of the tag
   */
  value: string;
};

/**
 * Tracker project to create
 */
export type PostV1TrackerProjectsRequest = {
  /**
   * Name of the project
   */
  name: string;
  /**
   * Detailed description of the project
   */
  description?: string | null | undefined;
  /**
   * Estimated total hours required to complete the project
   */
  estimate?: number | null | undefined;
  /**
   * Whether the project is billable to the customer
   */
  billable?: boolean | null | undefined;
  /**
   * Hourly rate for the project in the specified currency
   */
  rate?: number | null | undefined;
  /**
   * Currency code for the project rate in ISO 4217 format
   */
  currency?: string | null | undefined;
  /**
   * Current status of the project
   */
  status?: PostV1TrackerProjectsStatus | undefined;
  /**
   * Unique identifier of the customer associated with this project
   */
  customerId?: string | null | undefined;
  /**
   * Array of tags to associate with the project
   */
  tags?: Array<PostV1TrackerProjectsTag> | null | undefined;
};

/** @internal */
export const PostV1TrackerProjectsStatus$inboundSchema: z.ZodNativeEnum<
  typeof PostV1TrackerProjectsStatus
> = z.nativeEnum(PostV1TrackerProjectsStatus);

/** @internal */
export const PostV1TrackerProjectsStatus$outboundSchema: z.ZodNativeEnum<
  typeof PostV1TrackerProjectsStatus
> = PostV1TrackerProjectsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1TrackerProjectsStatus$ {
  /** @deprecated use `PostV1TrackerProjectsStatus$inboundSchema` instead. */
  export const inboundSchema = PostV1TrackerProjectsStatus$inboundSchema;
  /** @deprecated use `PostV1TrackerProjectsStatus$outboundSchema` instead. */
  export const outboundSchema = PostV1TrackerProjectsStatus$outboundSchema;
}

/** @internal */
export const PostV1TrackerProjectsTag$inboundSchema: z.ZodType<
  PostV1TrackerProjectsTag,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  value: z.string(),
});

/** @internal */
export type PostV1TrackerProjectsTag$Outbound = {
  id: string;
  value: string;
};

/** @internal */
export const PostV1TrackerProjectsTag$outboundSchema: z.ZodType<
  PostV1TrackerProjectsTag$Outbound,
  z.ZodTypeDef,
  PostV1TrackerProjectsTag
> = z.object({
  id: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1TrackerProjectsTag$ {
  /** @deprecated use `PostV1TrackerProjectsTag$inboundSchema` instead. */
  export const inboundSchema = PostV1TrackerProjectsTag$inboundSchema;
  /** @deprecated use `PostV1TrackerProjectsTag$outboundSchema` instead. */
  export const outboundSchema = PostV1TrackerProjectsTag$outboundSchema;
  /** @deprecated use `PostV1TrackerProjectsTag$Outbound` instead. */
  export type Outbound = PostV1TrackerProjectsTag$Outbound;
}

export function postV1TrackerProjectsTagToJSON(
  postV1TrackerProjectsTag: PostV1TrackerProjectsTag,
): string {
  return JSON.stringify(
    PostV1TrackerProjectsTag$outboundSchema.parse(postV1TrackerProjectsTag),
  );
}

export function postV1TrackerProjectsTagFromJSON(
  jsonString: string,
): SafeParseResult<PostV1TrackerProjectsTag, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1TrackerProjectsTag$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1TrackerProjectsTag' from JSON`,
  );
}

/** @internal */
export const PostV1TrackerProjectsRequest$inboundSchema: z.ZodType<
  PostV1TrackerProjectsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  estimate: z.nullable(z.number()).optional(),
  billable: z.nullable(z.boolean().default(false)),
  rate: z.nullable(z.number()).optional(),
  currency: z.nullable(z.string()).optional(),
  status: PostV1TrackerProjectsStatus$inboundSchema.optional(),
  customerId: z.nullable(z.string()).optional(),
  tags: z.nullable(
    z.array(z.lazy(() => PostV1TrackerProjectsTag$inboundSchema)),
  ).optional(),
});

/** @internal */
export type PostV1TrackerProjectsRequest$Outbound = {
  name: string;
  description?: string | null | undefined;
  estimate?: number | null | undefined;
  billable: boolean | null;
  rate?: number | null | undefined;
  currency?: string | null | undefined;
  status?: string | undefined;
  customerId?: string | null | undefined;
  tags?: Array<PostV1TrackerProjectsTag$Outbound> | null | undefined;
};

/** @internal */
export const PostV1TrackerProjectsRequest$outboundSchema: z.ZodType<
  PostV1TrackerProjectsRequest$Outbound,
  z.ZodTypeDef,
  PostV1TrackerProjectsRequest
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  estimate: z.nullable(z.number()).optional(),
  billable: z.nullable(z.boolean().default(false)),
  rate: z.nullable(z.number()).optional(),
  currency: z.nullable(z.string()).optional(),
  status: PostV1TrackerProjectsStatus$outboundSchema.optional(),
  customerId: z.nullable(z.string()).optional(),
  tags: z.nullable(
    z.array(z.lazy(() => PostV1TrackerProjectsTag$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1TrackerProjectsRequest$ {
  /** @deprecated use `PostV1TrackerProjectsRequest$inboundSchema` instead. */
  export const inboundSchema = PostV1TrackerProjectsRequest$inboundSchema;
  /** @deprecated use `PostV1TrackerProjectsRequest$outboundSchema` instead. */
  export const outboundSchema = PostV1TrackerProjectsRequest$outboundSchema;
  /** @deprecated use `PostV1TrackerProjectsRequest$Outbound` instead. */
  export type Outbound = PostV1TrackerProjectsRequest$Outbound;
}

export function postV1TrackerProjectsRequestToJSON(
  postV1TrackerProjectsRequest: PostV1TrackerProjectsRequest,
): string {
  return JSON.stringify(
    PostV1TrackerProjectsRequest$outboundSchema.parse(
      postV1TrackerProjectsRequest,
    ),
  );
}

export function postV1TrackerProjectsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostV1TrackerProjectsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1TrackerProjectsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1TrackerProjectsRequest' from JSON`,
  );
}
