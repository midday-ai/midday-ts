/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV1TransactionsAttachment = {
  /**
   * Path(s) of the attachment file(s).
   */
  path: Array<string>;
  /**
   * Name of the attachment file.
   */
  name: string;
  /**
   * Size of the attachment file in bytes.
   */
  size: number;
  /**
   * MIME type of the attachment file.
   */
  type: string;
};

export type PostV1TransactionsRequest = {
  /**
   * Name of the transaction.
   */
  name: string;
  /**
   * Amount of the transaction.
   */
  amount: number;
  /**
   * Currency of the transaction.
   */
  currency: string;
  /**
   * Date of the transaction (ISO 8601).
   */
  date: string;
  /**
   * Bank account ID associated with the transaction.
   */
  bankAccountId: string;
  /**
   * Assigned user ID for the transaction.
   */
  assignedId?: string | undefined;
  /**
   * Category slug for the transaction.
   */
  categorySlug?: string | undefined;
  /**
   * Note for the transaction.
   */
  note?: string | undefined;
  /**
   * Whether the transaction is internal.
   */
  internal?: boolean | undefined;
  /**
   * Array of attachments for the transaction.
   */
  attachments?: Array<PostV1TransactionsAttachment> | undefined;
};

/** @internal */
export const PostV1TransactionsAttachment$inboundSchema: z.ZodType<
  PostV1TransactionsAttachment,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.array(z.string()),
  name: z.string(),
  size: z.number(),
  type: z.string(),
});

/** @internal */
export type PostV1TransactionsAttachment$Outbound = {
  path: Array<string>;
  name: string;
  size: number;
  type: string;
};

/** @internal */
export const PostV1TransactionsAttachment$outboundSchema: z.ZodType<
  PostV1TransactionsAttachment$Outbound,
  z.ZodTypeDef,
  PostV1TransactionsAttachment
> = z.object({
  path: z.array(z.string()),
  name: z.string(),
  size: z.number(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1TransactionsAttachment$ {
  /** @deprecated use `PostV1TransactionsAttachment$inboundSchema` instead. */
  export const inboundSchema = PostV1TransactionsAttachment$inboundSchema;
  /** @deprecated use `PostV1TransactionsAttachment$outboundSchema` instead. */
  export const outboundSchema = PostV1TransactionsAttachment$outboundSchema;
  /** @deprecated use `PostV1TransactionsAttachment$Outbound` instead. */
  export type Outbound = PostV1TransactionsAttachment$Outbound;
}

export function postV1TransactionsAttachmentToJSON(
  postV1TransactionsAttachment: PostV1TransactionsAttachment,
): string {
  return JSON.stringify(
    PostV1TransactionsAttachment$outboundSchema.parse(
      postV1TransactionsAttachment,
    ),
  );
}

export function postV1TransactionsAttachmentFromJSON(
  jsonString: string,
): SafeParseResult<PostV1TransactionsAttachment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1TransactionsAttachment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1TransactionsAttachment' from JSON`,
  );
}

/** @internal */
export const PostV1TransactionsRequest$inboundSchema: z.ZodType<
  PostV1TransactionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  amount: z.number(),
  currency: z.string(),
  date: z.string(),
  bankAccountId: z.string(),
  assignedId: z.string().optional(),
  categorySlug: z.string().optional(),
  note: z.string().optional(),
  internal: z.boolean().optional(),
  attachments: z.array(z.lazy(() => PostV1TransactionsAttachment$inboundSchema))
    .optional(),
});

/** @internal */
export type PostV1TransactionsRequest$Outbound = {
  name: string;
  amount: number;
  currency: string;
  date: string;
  bankAccountId: string;
  assignedId?: string | undefined;
  categorySlug?: string | undefined;
  note?: string | undefined;
  internal?: boolean | undefined;
  attachments?: Array<PostV1TransactionsAttachment$Outbound> | undefined;
};

/** @internal */
export const PostV1TransactionsRequest$outboundSchema: z.ZodType<
  PostV1TransactionsRequest$Outbound,
  z.ZodTypeDef,
  PostV1TransactionsRequest
> = z.object({
  name: z.string(),
  amount: z.number(),
  currency: z.string(),
  date: z.string(),
  bankAccountId: z.string(),
  assignedId: z.string().optional(),
  categorySlug: z.string().optional(),
  note: z.string().optional(),
  internal: z.boolean().optional(),
  attachments: z.array(
    z.lazy(() => PostV1TransactionsAttachment$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1TransactionsRequest$ {
  /** @deprecated use `PostV1TransactionsRequest$inboundSchema` instead. */
  export const inboundSchema = PostV1TransactionsRequest$inboundSchema;
  /** @deprecated use `PostV1TransactionsRequest$outboundSchema` instead. */
  export const outboundSchema = PostV1TransactionsRequest$outboundSchema;
  /** @deprecated use `PostV1TransactionsRequest$Outbound` instead. */
  export type Outbound = PostV1TransactionsRequest$Outbound;
}

export function postV1TransactionsRequestToJSON(
  postV1TransactionsRequest: PostV1TransactionsRequest,
): string {
  return JSON.stringify(
    PostV1TransactionsRequest$outboundSchema.parse(postV1TransactionsRequest),
  );
}

export function postV1TransactionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostV1TransactionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1TransactionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1TransactionsRequest' from JSON`,
  );
}
