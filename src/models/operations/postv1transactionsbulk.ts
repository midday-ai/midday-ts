/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV1TransactionsBulkAttachment = {
  /**
   * Path(s) of the attachment file(s).
   */
  path: Array<string>;
  /**
   * Name of the attachment file.
   */
  name: string;
  /**
   * Size of the attachment file in bytes.
   */
  size: number;
  /**
   * MIME type of the attachment file.
   */
  type: string;
};

export type RequestBody = {
  /**
   * Name of the transaction.
   */
  name: string;
  /**
   * Amount of the transaction.
   */
  amount: number;
  /**
   * Currency of the transaction.
   */
  currency: string;
  /**
   * Date of the transaction (ISO 8601).
   */
  date: string;
  /**
   * Bank account ID associated with the transaction.
   */
  bankAccountId: string;
  /**
   * Assigned user ID for the transaction.
   */
  assignedId?: string | undefined;
  /**
   * Category slug for the transaction.
   */
  categorySlug?: string | undefined;
  /**
   * Note for the transaction.
   */
  note?: string | undefined;
  /**
   * Whether the transaction is internal.
   */
  internal?: boolean | undefined;
  /**
   * Array of attachments for the transaction.
   */
  attachments?: Array<PostV1TransactionsBulkAttachment> | undefined;
};

/** @internal */
export const PostV1TransactionsBulkAttachment$inboundSchema: z.ZodType<
  PostV1TransactionsBulkAttachment,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.array(z.string()),
  name: z.string(),
  size: z.number(),
  type: z.string(),
});

/** @internal */
export type PostV1TransactionsBulkAttachment$Outbound = {
  path: Array<string>;
  name: string;
  size: number;
  type: string;
};

/** @internal */
export const PostV1TransactionsBulkAttachment$outboundSchema: z.ZodType<
  PostV1TransactionsBulkAttachment$Outbound,
  z.ZodTypeDef,
  PostV1TransactionsBulkAttachment
> = z.object({
  path: z.array(z.string()),
  name: z.string(),
  size: z.number(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1TransactionsBulkAttachment$ {
  /** @deprecated use `PostV1TransactionsBulkAttachment$inboundSchema` instead. */
  export const inboundSchema = PostV1TransactionsBulkAttachment$inboundSchema;
  /** @deprecated use `PostV1TransactionsBulkAttachment$outboundSchema` instead. */
  export const outboundSchema = PostV1TransactionsBulkAttachment$outboundSchema;
  /** @deprecated use `PostV1TransactionsBulkAttachment$Outbound` instead. */
  export type Outbound = PostV1TransactionsBulkAttachment$Outbound;
}

export function postV1TransactionsBulkAttachmentToJSON(
  postV1TransactionsBulkAttachment: PostV1TransactionsBulkAttachment,
): string {
  return JSON.stringify(
    PostV1TransactionsBulkAttachment$outboundSchema.parse(
      postV1TransactionsBulkAttachment,
    ),
  );
}

export function postV1TransactionsBulkAttachmentFromJSON(
  jsonString: string,
): SafeParseResult<PostV1TransactionsBulkAttachment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1TransactionsBulkAttachment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1TransactionsBulkAttachment' from JSON`,
  );
}

/** @internal */
export const RequestBody$inboundSchema: z.ZodType<
  RequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  amount: z.number(),
  currency: z.string(),
  date: z.string(),
  bankAccountId: z.string(),
  assignedId: z.string().optional(),
  categorySlug: z.string().optional(),
  note: z.string().optional(),
  internal: z.boolean().optional(),
  attachments: z.array(
    z.lazy(() => PostV1TransactionsBulkAttachment$inboundSchema),
  ).optional(),
});

/** @internal */
export type RequestBody$Outbound = {
  name: string;
  amount: number;
  currency: string;
  date: string;
  bankAccountId: string;
  assignedId?: string | undefined;
  categorySlug?: string | undefined;
  note?: string | undefined;
  internal?: boolean | undefined;
  attachments?: Array<PostV1TransactionsBulkAttachment$Outbound> | undefined;
};

/** @internal */
export const RequestBody$outboundSchema: z.ZodType<
  RequestBody$Outbound,
  z.ZodTypeDef,
  RequestBody
> = z.object({
  name: z.string(),
  amount: z.number(),
  currency: z.string(),
  date: z.string(),
  bankAccountId: z.string(),
  assignedId: z.string().optional(),
  categorySlug: z.string().optional(),
  note: z.string().optional(),
  internal: z.boolean().optional(),
  attachments: z.array(
    z.lazy(() => PostV1TransactionsBulkAttachment$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBody$ {
  /** @deprecated use `RequestBody$inboundSchema` instead. */
  export const inboundSchema = RequestBody$inboundSchema;
  /** @deprecated use `RequestBody$outboundSchema` instead. */
  export const outboundSchema = RequestBody$outboundSchema;
  /** @deprecated use `RequestBody$Outbound` instead. */
  export type Outbound = RequestBody$Outbound;
}

export function requestBodyToJSON(requestBody: RequestBody): string {
  return JSON.stringify(RequestBody$outboundSchema.parse(requestBody));
}

export function requestBodyFromJSON(
  jsonString: string,
): SafeParseResult<RequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestBody' from JSON`,
  );
}
