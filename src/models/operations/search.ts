/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SearchRequest = {
  searchTerm?: string | undefined;
  language?: string | undefined;
  limit?: number | undefined;
  itemsPerTableLimit?: number | undefined;
  relevanceThreshold?: number | undefined;
};

export type SearchResponse = {
  /**
   * Unique identifier for the search result item.
   */
  id: string;
  /**
   * Type of the entity returned (e.g., invoice, customer, transaction).
   */
  type: string;
  /**
   * Relevance score for the search result.
   */
  relevance: number;
  /**
   * ISO 8601 timestamp when the entity was created.
   */
  createdAt: string;
  /**
   * Additional data for the search result, structure depends on the type.
   */
  data?: any | null | undefined;
};

/** @internal */
export const SearchRequest$inboundSchema: z.ZodType<
  SearchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  searchTerm: z.string().optional(),
  language: z.string().optional(),
  limit: z.number().default(30),
  itemsPerTableLimit: z.number().default(5),
  relevanceThreshold: z.number().default(0.01),
});

/** @internal */
export type SearchRequest$Outbound = {
  searchTerm?: string | undefined;
  language?: string | undefined;
  limit: number;
  itemsPerTableLimit: number;
  relevanceThreshold: number;
};

/** @internal */
export const SearchRequest$outboundSchema: z.ZodType<
  SearchRequest$Outbound,
  z.ZodTypeDef,
  SearchRequest
> = z.object({
  searchTerm: z.string().optional(),
  language: z.string().optional(),
  limit: z.number().default(30),
  itemsPerTableLimit: z.number().default(5),
  relevanceThreshold: z.number().default(0.01),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchRequest$ {
  /** @deprecated use `SearchRequest$inboundSchema` instead. */
  export const inboundSchema = SearchRequest$inboundSchema;
  /** @deprecated use `SearchRequest$outboundSchema` instead. */
  export const outboundSchema = SearchRequest$outboundSchema;
  /** @deprecated use `SearchRequest$Outbound` instead. */
  export type Outbound = SearchRequest$Outbound;
}

export function searchRequestToJSON(searchRequest: SearchRequest): string {
  return JSON.stringify(SearchRequest$outboundSchema.parse(searchRequest));
}

export function searchRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchRequest' from JSON`,
  );
}

/** @internal */
export const SearchResponse$inboundSchema: z.ZodType<
  SearchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: z.string(),
  relevance: z.number(),
  created_at: z.string(),
  data: z.nullable(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
  });
});

/** @internal */
export type SearchResponse$Outbound = {
  id: string;
  type: string;
  relevance: number;
  created_at: string;
  data?: any | null | undefined;
};

/** @internal */
export const SearchResponse$outboundSchema: z.ZodType<
  SearchResponse$Outbound,
  z.ZodTypeDef,
  SearchResponse
> = z.object({
  id: z.string(),
  type: z.string(),
  relevance: z.number(),
  createdAt: z.string(),
  data: z.nullable(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchResponse$ {
  /** @deprecated use `SearchResponse$inboundSchema` instead. */
  export const inboundSchema = SearchResponse$inboundSchema;
  /** @deprecated use `SearchResponse$outboundSchema` instead. */
  export const outboundSchema = SearchResponse$outboundSchema;
  /** @deprecated use `SearchResponse$Outbound` instead. */
  export type Outbound = SearchResponse$Outbound;
}

export function searchResponseToJSON(searchResponse: SearchResponse): string {
  return JSON.stringify(SearchResponse$outboundSchema.parse(searchResponse));
}

export function searchResponseFromJSON(
  jsonString: string,
): SafeParseResult<SearchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchResponse' from JSON`,
  );
}
