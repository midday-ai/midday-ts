/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StartTimerRequest = {
  /**
   * Unique identifier of the project to track time for
   */
  projectId: string;
  /**
   * Unique identifier of the user to assign the timer to. If not provided, will use the authenticated user
   */
  assignedId?: string | null | undefined;
  /**
   * Optional description for the timer session
   */
  description?: string | null | undefined;
  /**
   * Start time in ISO 8601 format. If not provided, will use current time
   */
  start?: Date | undefined;
  /**
   * Continue from a specific paused entry ID
   */
  continueFromEntry?: string | undefined;
};

/**
 * User information for the person who created this tracker entry
 */
export type StartTimerUser = {
  /**
   * Unique identifier of the user
   */
  id: string;
  /**
   * Full name of the user
   */
  fullName: string;
  /**
   * URL to the user's avatar image
   */
  avatarUrl: string;
};

/**
 * Customer information associated with the project
 */
export type StartTimerCustomer = {
  /**
   * Unique identifier of the customer
   */
  id: string;
  /**
   * Name of the customer or organization
   */
  name: string;
};

/**
 * Project information associated with this tracker entry
 */
export type StartTimerProject = {
  /**
   * Unique identifier of the project
   */
  id: string;
  /**
   * Date and time when the project was created in ISO 8601 format
   */
  createdAt: string;
  /**
   * Default hourly rate for the project
   */
  rate: number | null;
  /**
   * Currency code for the project rate in ISO 4217 format
   */
  currency: string | null;
  /**
   * Current status of the project
   */
  status: string;
  /**
   * Description of the project
   */
  description: string | null;
  /**
   * Name of the project
   */
  name: string;
  /**
   * Whether the project is billable to the customer
   */
  billable: boolean | null;
  /**
   * Estimated total hours for the project
   */
  estimate: number | null;
  /**
   * Customer information associated with the project
   */
  customer: StartTimerCustomer | null;
};

export type StartTimerData = {
  /**
   * Unique identifier of the tracker entry
   */
  id: string;
  /**
   * Date and time when the tracker entry was created in ISO 8601 format
   */
  createdAt: string;
  /**
   * Duration of the timer entry in seconds. -1 indicates running, null for paused, positive number for completed
   */
  duration: number | null;
  /**
   * Start time of the tracker entry in ISO 8601 format
   */
  start: string;
  /**
   * Stop time of the tracker entry in ISO 8601 format
   */
  stop: string;
  /**
   * Unique identifier of the team that owns this tracker entry
   */
  teamId: string;
  /**
   * Description or notes for the tracker entry
   */
  description: string | null;
  /**
   * Hourly rate applied to this tracker entry
   */
  rate: number | null;
  /**
   * Currency code for the rate in ISO 4217 format
   */
  currency: string | null;
  /**
   * Whether this tracker entry has been billed to the customer
   */
  billed: boolean;
  /**
   * Date of the tracker entry in YYYY-MM-DD format
   */
  date: string;
  /**
   * User information for the person who created this tracker entry
   */
  user: StartTimerUser;
  /**
   * Project information associated with this tracker entry
   */
  project: StartTimerProject;
};

/**
 * Timer started successfully.
 */
export type StartTimerResponse = {
  data: StartTimerData;
};

/** @internal */
export const StartTimerRequest$inboundSchema: z.ZodType<
  StartTimerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  assignedId: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  start: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  continueFromEntry: z.string().optional(),
});

/** @internal */
export type StartTimerRequest$Outbound = {
  projectId: string;
  assignedId?: string | null | undefined;
  description?: string | null | undefined;
  start?: string | undefined;
  continueFromEntry?: string | undefined;
};

/** @internal */
export const StartTimerRequest$outboundSchema: z.ZodType<
  StartTimerRequest$Outbound,
  z.ZodTypeDef,
  StartTimerRequest
> = z.object({
  projectId: z.string(),
  assignedId: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  start: z.date().transform(v => v.toISOString()).optional(),
  continueFromEntry: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartTimerRequest$ {
  /** @deprecated use `StartTimerRequest$inboundSchema` instead. */
  export const inboundSchema = StartTimerRequest$inboundSchema;
  /** @deprecated use `StartTimerRequest$outboundSchema` instead. */
  export const outboundSchema = StartTimerRequest$outboundSchema;
  /** @deprecated use `StartTimerRequest$Outbound` instead. */
  export type Outbound = StartTimerRequest$Outbound;
}

export function startTimerRequestToJSON(
  startTimerRequest: StartTimerRequest,
): string {
  return JSON.stringify(
    StartTimerRequest$outboundSchema.parse(startTimerRequest),
  );
}

export function startTimerRequestFromJSON(
  jsonString: string,
): SafeParseResult<StartTimerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartTimerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartTimerRequest' from JSON`,
  );
}

/** @internal */
export const StartTimerUser$inboundSchema: z.ZodType<
  StartTimerUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  fullName: z.string(),
  avatarUrl: z.string(),
});

/** @internal */
export type StartTimerUser$Outbound = {
  id: string;
  fullName: string;
  avatarUrl: string;
};

/** @internal */
export const StartTimerUser$outboundSchema: z.ZodType<
  StartTimerUser$Outbound,
  z.ZodTypeDef,
  StartTimerUser
> = z.object({
  id: z.string(),
  fullName: z.string(),
  avatarUrl: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartTimerUser$ {
  /** @deprecated use `StartTimerUser$inboundSchema` instead. */
  export const inboundSchema = StartTimerUser$inboundSchema;
  /** @deprecated use `StartTimerUser$outboundSchema` instead. */
  export const outboundSchema = StartTimerUser$outboundSchema;
  /** @deprecated use `StartTimerUser$Outbound` instead. */
  export type Outbound = StartTimerUser$Outbound;
}

export function startTimerUserToJSON(startTimerUser: StartTimerUser): string {
  return JSON.stringify(StartTimerUser$outboundSchema.parse(startTimerUser));
}

export function startTimerUserFromJSON(
  jsonString: string,
): SafeParseResult<StartTimerUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartTimerUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartTimerUser' from JSON`,
  );
}

/** @internal */
export const StartTimerCustomer$inboundSchema: z.ZodType<
  StartTimerCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
});

/** @internal */
export type StartTimerCustomer$Outbound = {
  id: string;
  name: string;
};

/** @internal */
export const StartTimerCustomer$outboundSchema: z.ZodType<
  StartTimerCustomer$Outbound,
  z.ZodTypeDef,
  StartTimerCustomer
> = z.object({
  id: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartTimerCustomer$ {
  /** @deprecated use `StartTimerCustomer$inboundSchema` instead. */
  export const inboundSchema = StartTimerCustomer$inboundSchema;
  /** @deprecated use `StartTimerCustomer$outboundSchema` instead. */
  export const outboundSchema = StartTimerCustomer$outboundSchema;
  /** @deprecated use `StartTimerCustomer$Outbound` instead. */
  export type Outbound = StartTimerCustomer$Outbound;
}

export function startTimerCustomerToJSON(
  startTimerCustomer: StartTimerCustomer,
): string {
  return JSON.stringify(
    StartTimerCustomer$outboundSchema.parse(startTimerCustomer),
  );
}

export function startTimerCustomerFromJSON(
  jsonString: string,
): SafeParseResult<StartTimerCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartTimerCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartTimerCustomer' from JSON`,
  );
}

/** @internal */
export const StartTimerProject$inboundSchema: z.ZodType<
  StartTimerProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  rate: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  status: z.string(),
  description: z.nullable(z.string()),
  name: z.string(),
  billable: z.nullable(z.boolean()),
  estimate: z.nullable(z.number()),
  customer: z.nullable(z.lazy(() => StartTimerCustomer$inboundSchema)),
});

/** @internal */
export type StartTimerProject$Outbound = {
  id: string;
  createdAt: string;
  rate: number | null;
  currency: string | null;
  status: string;
  description: string | null;
  name: string;
  billable: boolean | null;
  estimate: number | null;
  customer: StartTimerCustomer$Outbound | null;
};

/** @internal */
export const StartTimerProject$outboundSchema: z.ZodType<
  StartTimerProject$Outbound,
  z.ZodTypeDef,
  StartTimerProject
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  rate: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  status: z.string(),
  description: z.nullable(z.string()),
  name: z.string(),
  billable: z.nullable(z.boolean()),
  estimate: z.nullable(z.number()),
  customer: z.nullable(z.lazy(() => StartTimerCustomer$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartTimerProject$ {
  /** @deprecated use `StartTimerProject$inboundSchema` instead. */
  export const inboundSchema = StartTimerProject$inboundSchema;
  /** @deprecated use `StartTimerProject$outboundSchema` instead. */
  export const outboundSchema = StartTimerProject$outboundSchema;
  /** @deprecated use `StartTimerProject$Outbound` instead. */
  export type Outbound = StartTimerProject$Outbound;
}

export function startTimerProjectToJSON(
  startTimerProject: StartTimerProject,
): string {
  return JSON.stringify(
    StartTimerProject$outboundSchema.parse(startTimerProject),
  );
}

export function startTimerProjectFromJSON(
  jsonString: string,
): SafeParseResult<StartTimerProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartTimerProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartTimerProject' from JSON`,
  );
}

/** @internal */
export const StartTimerData$inboundSchema: z.ZodType<
  StartTimerData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  duration: z.nullable(z.number()),
  start: z.string(),
  stop: z.string(),
  teamId: z.string(),
  description: z.nullable(z.string()),
  rate: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  billed: z.boolean(),
  date: z.string(),
  user: z.lazy(() => StartTimerUser$inboundSchema),
  project: z.lazy(() => StartTimerProject$inboundSchema),
});

/** @internal */
export type StartTimerData$Outbound = {
  id: string;
  createdAt: string;
  duration: number | null;
  start: string;
  stop: string;
  teamId: string;
  description: string | null;
  rate: number | null;
  currency: string | null;
  billed: boolean;
  date: string;
  user: StartTimerUser$Outbound;
  project: StartTimerProject$Outbound;
};

/** @internal */
export const StartTimerData$outboundSchema: z.ZodType<
  StartTimerData$Outbound,
  z.ZodTypeDef,
  StartTimerData
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  duration: z.nullable(z.number()),
  start: z.string(),
  stop: z.string(),
  teamId: z.string(),
  description: z.nullable(z.string()),
  rate: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  billed: z.boolean(),
  date: z.string(),
  user: z.lazy(() => StartTimerUser$outboundSchema),
  project: z.lazy(() => StartTimerProject$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartTimerData$ {
  /** @deprecated use `StartTimerData$inboundSchema` instead. */
  export const inboundSchema = StartTimerData$inboundSchema;
  /** @deprecated use `StartTimerData$outboundSchema` instead. */
  export const outboundSchema = StartTimerData$outboundSchema;
  /** @deprecated use `StartTimerData$Outbound` instead. */
  export type Outbound = StartTimerData$Outbound;
}

export function startTimerDataToJSON(startTimerData: StartTimerData): string {
  return JSON.stringify(StartTimerData$outboundSchema.parse(startTimerData));
}

export function startTimerDataFromJSON(
  jsonString: string,
): SafeParseResult<StartTimerData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartTimerData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartTimerData' from JSON`,
  );
}

/** @internal */
export const StartTimerResponse$inboundSchema: z.ZodType<
  StartTimerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => StartTimerData$inboundSchema),
});

/** @internal */
export type StartTimerResponse$Outbound = {
  data: StartTimerData$Outbound;
};

/** @internal */
export const StartTimerResponse$outboundSchema: z.ZodType<
  StartTimerResponse$Outbound,
  z.ZodTypeDef,
  StartTimerResponse
> = z.object({
  data: z.lazy(() => StartTimerData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartTimerResponse$ {
  /** @deprecated use `StartTimerResponse$inboundSchema` instead. */
  export const inboundSchema = StartTimerResponse$inboundSchema;
  /** @deprecated use `StartTimerResponse$outboundSchema` instead. */
  export const outboundSchema = StartTimerResponse$outboundSchema;
  /** @deprecated use `StartTimerResponse$Outbound` instead. */
  export type Outbound = StartTimerResponse$Outbound;
}

export function startTimerResponseToJSON(
  startTimerResponse: StartTimerResponse,
): string {
  return JSON.stringify(
    StartTimerResponse$outboundSchema.parse(startTimerResponse),
  );
}

export function startTimerResponseFromJSON(
  jsonString: string,
): SafeParseResult<StartTimerResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartTimerResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartTimerResponse' from JSON`,
  );
}
