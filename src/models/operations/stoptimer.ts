/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StopTimerRequest = {
  /**
   * Unique identifier of the specific timer entry to stop. If not provided, will stop the current running timer for the user
   */
  entryId?: string | undefined;
  /**
   * Unique identifier of the user whose timer should be stopped. If not provided, will use the authenticated user
   */
  assignedId?: string | null | undefined;
  /**
   * Stop time in ISO 8601 format. If not provided, will use current time
   */
  stop?: Date | undefined;
};

/**
 * User information for the person who created this tracker entry
 */
export type StopTimerUser = {
  /**
   * Unique identifier of the user
   */
  id: string;
  /**
   * Full name of the user
   */
  fullName: string;
  /**
   * URL to the user's avatar image
   */
  avatarUrl: string;
};

/**
 * Customer information associated with the project
 */
export type StopTimerCustomer = {
  /**
   * Unique identifier of the customer
   */
  id: string;
  /**
   * Name of the customer or organization
   */
  name: string;
};

/**
 * Project information associated with this tracker entry
 */
export type StopTimerProject = {
  /**
   * Unique identifier of the project
   */
  id: string;
  /**
   * Date and time when the project was created in ISO 8601 format
   */
  createdAt: string;
  /**
   * Default hourly rate for the project
   */
  rate: number | null;
  /**
   * Currency code for the project rate in ISO 4217 format
   */
  currency: string | null;
  /**
   * Current status of the project
   */
  status: string;
  /**
   * Description of the project
   */
  description: string | null;
  /**
   * Name of the project
   */
  name: string;
  /**
   * Whether the project is billable to the customer
   */
  billable: boolean | null;
  /**
   * Estimated total hours for the project
   */
  estimate: number | null;
  /**
   * Customer information associated with the project
   */
  customer: StopTimerCustomer | null;
};

export type StopTimerData = {
  /**
   * Unique identifier of the tracker entry
   */
  id: string;
  /**
   * Date and time when the tracker entry was created in ISO 8601 format
   */
  createdAt: string;
  /**
   * Duration of the timer entry in seconds. -1 indicates running, null for paused, positive number for completed
   */
  duration: number | null;
  /**
   * Start time of the tracker entry in ISO 8601 format
   */
  start: string;
  /**
   * Stop time of the tracker entry in ISO 8601 format
   */
  stop: string;
  /**
   * Unique identifier of the team that owns this tracker entry
   */
  teamId: string;
  /**
   * Description or notes for the tracker entry
   */
  description: string | null;
  /**
   * Hourly rate applied to this tracker entry
   */
  rate: number | null;
  /**
   * Currency code for the rate in ISO 4217 format
   */
  currency: string | null;
  /**
   * Whether this tracker entry has been billed to the customer
   */
  billed: boolean;
  /**
   * Date of the tracker entry in YYYY-MM-DD format
   */
  date: string;
  /**
   * User information for the person who created this tracker entry
   */
  user: StopTimerUser;
  /**
   * Project information associated with this tracker entry
   */
  project: StopTimerProject;
};

/**
 * Timer stopped successfully.
 */
export type StopTimerResponse = {
  data: StopTimerData;
};

/** @internal */
export const StopTimerRequest$inboundSchema: z.ZodType<
  StopTimerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  entryId: z.string().optional(),
  assignedId: z.nullable(z.string()).optional(),
  stop: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type StopTimerRequest$Outbound = {
  entryId?: string | undefined;
  assignedId?: string | null | undefined;
  stop?: string | undefined;
};

/** @internal */
export const StopTimerRequest$outboundSchema: z.ZodType<
  StopTimerRequest$Outbound,
  z.ZodTypeDef,
  StopTimerRequest
> = z.object({
  entryId: z.string().optional(),
  assignedId: z.nullable(z.string()).optional(),
  stop: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StopTimerRequest$ {
  /** @deprecated use `StopTimerRequest$inboundSchema` instead. */
  export const inboundSchema = StopTimerRequest$inboundSchema;
  /** @deprecated use `StopTimerRequest$outboundSchema` instead. */
  export const outboundSchema = StopTimerRequest$outboundSchema;
  /** @deprecated use `StopTimerRequest$Outbound` instead. */
  export type Outbound = StopTimerRequest$Outbound;
}

export function stopTimerRequestToJSON(
  stopTimerRequest: StopTimerRequest,
): string {
  return JSON.stringify(
    StopTimerRequest$outboundSchema.parse(stopTimerRequest),
  );
}

export function stopTimerRequestFromJSON(
  jsonString: string,
): SafeParseResult<StopTimerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StopTimerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StopTimerRequest' from JSON`,
  );
}

/** @internal */
export const StopTimerUser$inboundSchema: z.ZodType<
  StopTimerUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  fullName: z.string(),
  avatarUrl: z.string(),
});

/** @internal */
export type StopTimerUser$Outbound = {
  id: string;
  fullName: string;
  avatarUrl: string;
};

/** @internal */
export const StopTimerUser$outboundSchema: z.ZodType<
  StopTimerUser$Outbound,
  z.ZodTypeDef,
  StopTimerUser
> = z.object({
  id: z.string(),
  fullName: z.string(),
  avatarUrl: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StopTimerUser$ {
  /** @deprecated use `StopTimerUser$inboundSchema` instead. */
  export const inboundSchema = StopTimerUser$inboundSchema;
  /** @deprecated use `StopTimerUser$outboundSchema` instead. */
  export const outboundSchema = StopTimerUser$outboundSchema;
  /** @deprecated use `StopTimerUser$Outbound` instead. */
  export type Outbound = StopTimerUser$Outbound;
}

export function stopTimerUserToJSON(stopTimerUser: StopTimerUser): string {
  return JSON.stringify(StopTimerUser$outboundSchema.parse(stopTimerUser));
}

export function stopTimerUserFromJSON(
  jsonString: string,
): SafeParseResult<StopTimerUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StopTimerUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StopTimerUser' from JSON`,
  );
}

/** @internal */
export const StopTimerCustomer$inboundSchema: z.ZodType<
  StopTimerCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
});

/** @internal */
export type StopTimerCustomer$Outbound = {
  id: string;
  name: string;
};

/** @internal */
export const StopTimerCustomer$outboundSchema: z.ZodType<
  StopTimerCustomer$Outbound,
  z.ZodTypeDef,
  StopTimerCustomer
> = z.object({
  id: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StopTimerCustomer$ {
  /** @deprecated use `StopTimerCustomer$inboundSchema` instead. */
  export const inboundSchema = StopTimerCustomer$inboundSchema;
  /** @deprecated use `StopTimerCustomer$outboundSchema` instead. */
  export const outboundSchema = StopTimerCustomer$outboundSchema;
  /** @deprecated use `StopTimerCustomer$Outbound` instead. */
  export type Outbound = StopTimerCustomer$Outbound;
}

export function stopTimerCustomerToJSON(
  stopTimerCustomer: StopTimerCustomer,
): string {
  return JSON.stringify(
    StopTimerCustomer$outboundSchema.parse(stopTimerCustomer),
  );
}

export function stopTimerCustomerFromJSON(
  jsonString: string,
): SafeParseResult<StopTimerCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StopTimerCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StopTimerCustomer' from JSON`,
  );
}

/** @internal */
export const StopTimerProject$inboundSchema: z.ZodType<
  StopTimerProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  rate: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  status: z.string(),
  description: z.nullable(z.string()),
  name: z.string(),
  billable: z.nullable(z.boolean()),
  estimate: z.nullable(z.number()),
  customer: z.nullable(z.lazy(() => StopTimerCustomer$inboundSchema)),
});

/** @internal */
export type StopTimerProject$Outbound = {
  id: string;
  createdAt: string;
  rate: number | null;
  currency: string | null;
  status: string;
  description: string | null;
  name: string;
  billable: boolean | null;
  estimate: number | null;
  customer: StopTimerCustomer$Outbound | null;
};

/** @internal */
export const StopTimerProject$outboundSchema: z.ZodType<
  StopTimerProject$Outbound,
  z.ZodTypeDef,
  StopTimerProject
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  rate: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  status: z.string(),
  description: z.nullable(z.string()),
  name: z.string(),
  billable: z.nullable(z.boolean()),
  estimate: z.nullable(z.number()),
  customer: z.nullable(z.lazy(() => StopTimerCustomer$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StopTimerProject$ {
  /** @deprecated use `StopTimerProject$inboundSchema` instead. */
  export const inboundSchema = StopTimerProject$inboundSchema;
  /** @deprecated use `StopTimerProject$outboundSchema` instead. */
  export const outboundSchema = StopTimerProject$outboundSchema;
  /** @deprecated use `StopTimerProject$Outbound` instead. */
  export type Outbound = StopTimerProject$Outbound;
}

export function stopTimerProjectToJSON(
  stopTimerProject: StopTimerProject,
): string {
  return JSON.stringify(
    StopTimerProject$outboundSchema.parse(stopTimerProject),
  );
}

export function stopTimerProjectFromJSON(
  jsonString: string,
): SafeParseResult<StopTimerProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StopTimerProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StopTimerProject' from JSON`,
  );
}

/** @internal */
export const StopTimerData$inboundSchema: z.ZodType<
  StopTimerData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  duration: z.nullable(z.number()),
  start: z.string(),
  stop: z.string(),
  teamId: z.string(),
  description: z.nullable(z.string()),
  rate: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  billed: z.boolean(),
  date: z.string(),
  user: z.lazy(() => StopTimerUser$inboundSchema),
  project: z.lazy(() => StopTimerProject$inboundSchema),
});

/** @internal */
export type StopTimerData$Outbound = {
  id: string;
  createdAt: string;
  duration: number | null;
  start: string;
  stop: string;
  teamId: string;
  description: string | null;
  rate: number | null;
  currency: string | null;
  billed: boolean;
  date: string;
  user: StopTimerUser$Outbound;
  project: StopTimerProject$Outbound;
};

/** @internal */
export const StopTimerData$outboundSchema: z.ZodType<
  StopTimerData$Outbound,
  z.ZodTypeDef,
  StopTimerData
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  duration: z.nullable(z.number()),
  start: z.string(),
  stop: z.string(),
  teamId: z.string(),
  description: z.nullable(z.string()),
  rate: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  billed: z.boolean(),
  date: z.string(),
  user: z.lazy(() => StopTimerUser$outboundSchema),
  project: z.lazy(() => StopTimerProject$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StopTimerData$ {
  /** @deprecated use `StopTimerData$inboundSchema` instead. */
  export const inboundSchema = StopTimerData$inboundSchema;
  /** @deprecated use `StopTimerData$outboundSchema` instead. */
  export const outboundSchema = StopTimerData$outboundSchema;
  /** @deprecated use `StopTimerData$Outbound` instead. */
  export type Outbound = StopTimerData$Outbound;
}

export function stopTimerDataToJSON(stopTimerData: StopTimerData): string {
  return JSON.stringify(StopTimerData$outboundSchema.parse(stopTimerData));
}

export function stopTimerDataFromJSON(
  jsonString: string,
): SafeParseResult<StopTimerData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StopTimerData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StopTimerData' from JSON`,
  );
}

/** @internal */
export const StopTimerResponse$inboundSchema: z.ZodType<
  StopTimerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => StopTimerData$inboundSchema),
});

/** @internal */
export type StopTimerResponse$Outbound = {
  data: StopTimerData$Outbound;
};

/** @internal */
export const StopTimerResponse$outboundSchema: z.ZodType<
  StopTimerResponse$Outbound,
  z.ZodTypeDef,
  StopTimerResponse
> = z.object({
  data: z.lazy(() => StopTimerData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StopTimerResponse$ {
  /** @deprecated use `StopTimerResponse$inboundSchema` instead. */
  export const inboundSchema = StopTimerResponse$inboundSchema;
  /** @deprecated use `StopTimerResponse$outboundSchema` instead. */
  export const outboundSchema = StopTimerResponse$outboundSchema;
  /** @deprecated use `StopTimerResponse$Outbound` instead. */
  export type Outbound = StopTimerResponse$Outbound;
}

export function stopTimerResponseToJSON(
  stopTimerResponse: StopTimerResponse,
): string {
  return JSON.stringify(
    StopTimerResponse$outboundSchema.parse(stopTimerResponse),
  );
}

export function stopTimerResponseFromJSON(
  jsonString: string,
): SafeParseResult<StopTimerResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StopTimerResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StopTimerResponse' from JSON`,
  );
}
