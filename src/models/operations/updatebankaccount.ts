/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Type of the bank account.
 */
export const UpdateBankAccountType = {
  Depository: "depository",
  Credit: "credit",
  OtherAsset: "other_asset",
  Loan: "loan",
  OtherLiability: "other_liability",
} as const;
/**
 * Type of the bank account.
 */
export type UpdateBankAccountType = ClosedEnum<typeof UpdateBankAccountType>;

/**
 * Schema for updating a bank account.
 */
export type UpdateBankAccountRequestBody = {
  /**
   * The unique identifier of the bank account.
   */
  id?: string | undefined;
  /**
   * The name of the bank account.
   */
  name?: string | undefined;
  /**
   * Whether the bank account is enabled.
   */
  enabled?: boolean | undefined;
  /**
   * Current balance of the bank account.
   */
  balance?: number | undefined;
  /**
   * The currency code for the bank account (ISO 4217).
   */
  currency?: string | undefined;
  /**
   * Type of the bank account.
   */
  type?: UpdateBankAccountType | undefined;
};

export type UpdateBankAccountRequest = {
  id: string;
  requestBody?: UpdateBankAccountRequestBody | undefined;
};

/**
 * A single bank account object response.
 */
export type UpdateBankAccountResponse = {
  /**
   * Unique identifier for the bank account.
   */
  id: string;
  /**
   * Name of the bank account.
   */
  name: string | null;
  /**
   * Currency code of the bank account (e.g., USD, EUR).
   */
  currency: string | null;
  /**
   * Type of the bank account (e.g., depository, credit).
   */
  type: string | null;
  /**
   * Whether the bank account is enabled.
   */
  enabled: boolean;
  /**
   * Current balance of the bank account.
   */
  balance: number | null;
  /**
   * Whether the bank account is a manual account.
   */
  manual: boolean | null;
};

/** @internal */
export const UpdateBankAccountType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateBankAccountType
> = z.nativeEnum(UpdateBankAccountType);

/** @internal */
export const UpdateBankAccountType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateBankAccountType
> = UpdateBankAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBankAccountType$ {
  /** @deprecated use `UpdateBankAccountType$inboundSchema` instead. */
  export const inboundSchema = UpdateBankAccountType$inboundSchema;
  /** @deprecated use `UpdateBankAccountType$outboundSchema` instead. */
  export const outboundSchema = UpdateBankAccountType$outboundSchema;
}

/** @internal */
export const UpdateBankAccountRequestBody$inboundSchema: z.ZodType<
  UpdateBankAccountRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  enabled: z.boolean().optional(),
  balance: z.number().optional(),
  currency: z.string().optional(),
  type: UpdateBankAccountType$inboundSchema.optional(),
});

/** @internal */
export type UpdateBankAccountRequestBody$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  enabled?: boolean | undefined;
  balance?: number | undefined;
  currency?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const UpdateBankAccountRequestBody$outboundSchema: z.ZodType<
  UpdateBankAccountRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateBankAccountRequestBody
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  enabled: z.boolean().optional(),
  balance: z.number().optional(),
  currency: z.string().optional(),
  type: UpdateBankAccountType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBankAccountRequestBody$ {
  /** @deprecated use `UpdateBankAccountRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateBankAccountRequestBody$inboundSchema;
  /** @deprecated use `UpdateBankAccountRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateBankAccountRequestBody$outboundSchema;
  /** @deprecated use `UpdateBankAccountRequestBody$Outbound` instead. */
  export type Outbound = UpdateBankAccountRequestBody$Outbound;
}

export function updateBankAccountRequestBodyToJSON(
  updateBankAccountRequestBody: UpdateBankAccountRequestBody,
): string {
  return JSON.stringify(
    UpdateBankAccountRequestBody$outboundSchema.parse(
      updateBankAccountRequestBody,
    ),
  );
}

export function updateBankAccountRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBankAccountRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateBankAccountRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBankAccountRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateBankAccountRequest$inboundSchema: z.ZodType<
  UpdateBankAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => UpdateBankAccountRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateBankAccountRequest$Outbound = {
  id: string;
  RequestBody?: UpdateBankAccountRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateBankAccountRequest$outboundSchema: z.ZodType<
  UpdateBankAccountRequest$Outbound,
  z.ZodTypeDef,
  UpdateBankAccountRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => UpdateBankAccountRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBankAccountRequest$ {
  /** @deprecated use `UpdateBankAccountRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateBankAccountRequest$inboundSchema;
  /** @deprecated use `UpdateBankAccountRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateBankAccountRequest$outboundSchema;
  /** @deprecated use `UpdateBankAccountRequest$Outbound` instead. */
  export type Outbound = UpdateBankAccountRequest$Outbound;
}

export function updateBankAccountRequestToJSON(
  updateBankAccountRequest: UpdateBankAccountRequest,
): string {
  return JSON.stringify(
    UpdateBankAccountRequest$outboundSchema.parse(updateBankAccountRequest),
  );
}

export function updateBankAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBankAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateBankAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBankAccountRequest' from JSON`,
  );
}

/** @internal */
export const UpdateBankAccountResponse$inboundSchema: z.ZodType<
  UpdateBankAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()),
  currency: z.nullable(z.string()),
  type: z.nullable(z.string()),
  enabled: z.boolean(),
  balance: z.nullable(z.number()),
  manual: z.nullable(z.boolean()),
});

/** @internal */
export type UpdateBankAccountResponse$Outbound = {
  id: string;
  name: string | null;
  currency: string | null;
  type: string | null;
  enabled: boolean;
  balance: number | null;
  manual: boolean | null;
};

/** @internal */
export const UpdateBankAccountResponse$outboundSchema: z.ZodType<
  UpdateBankAccountResponse$Outbound,
  z.ZodTypeDef,
  UpdateBankAccountResponse
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()),
  currency: z.nullable(z.string()),
  type: z.nullable(z.string()),
  enabled: z.boolean(),
  balance: z.nullable(z.number()),
  manual: z.nullable(z.boolean()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateBankAccountResponse$ {
  /** @deprecated use `UpdateBankAccountResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateBankAccountResponse$inboundSchema;
  /** @deprecated use `UpdateBankAccountResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateBankAccountResponse$outboundSchema;
  /** @deprecated use `UpdateBankAccountResponse$Outbound` instead. */
  export type Outbound = UpdateBankAccountResponse$Outbound;
}

export function updateBankAccountResponseToJSON(
  updateBankAccountResponse: UpdateBankAccountResponse,
): string {
  return JSON.stringify(
    UpdateBankAccountResponse$outboundSchema.parse(updateBankAccountResponse),
  );
}

export function updateBankAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateBankAccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateBankAccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateBankAccountResponse' from JSON`,
  );
}
