/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * User's preferred date format. Available options: 'dd/MM/yyyy', 'MM/dd/yyyy', 'yyyy-MM-dd', 'dd.MM.yyyy'
 */
export const DateFormatRequest = {
  DdSlashMMSlashyyyy: "dd/MM/yyyy",
  MMSlashddSlashyyyy: "MM/dd/yyyy",
  YyyyDashMMDashdd: "yyyy-MM-dd",
  DdDotMMDotyyyy: "dd.MM.yyyy",
} as const;
/**
 * User's preferred date format. Available options: 'dd/MM/yyyy', 'MM/dd/yyyy', 'yyyy-MM-dd', 'dd.MM.yyyy'
 */
export type DateFormatRequest = ClosedEnum<typeof DateFormatRequest>;

export type UpdateCurrentUserRequest = {
  /**
   * Full name of the user. Must be between 2 and 32 characters
   */
  fullName?: string | undefined;
  /**
   * Unique identifier of the team the user belongs to
   */
  teamId?: string | undefined;
  /**
   * Email address of the user
   */
  email?: string | undefined;
  /**
   * URL to the user's avatar image. Must be hosted on midday.ai domain
   */
  avatarUrl?: string | undefined;
  /**
   * User's preferred locale for internationalization (language and region)
   */
  locale?: string | undefined;
  /**
   * Whether the user's calendar week starts on Monday (true) or Sunday (false)
   */
  weekStartsOnMonday?: boolean | undefined;
  /**
   * User's timezone identifier in IANA Time Zone Database format
   */
  timezone?: string | undefined;
  /**
   * User's preferred time format: 12 for 12-hour format, 24 for 24-hour format
   */
  timeFormat?: number | undefined;
  /**
   * User's preferred date format. Available options: 'dd/MM/yyyy', 'MM/dd/yyyy', 'yyyy-MM-dd', 'dd.MM.yyyy'
   */
  dateFormat?: DateFormatRequest | undefined;
};

/**
 * User's preferred date format. Available options: 'dd/MM/yyyy', 'MM/dd/yyyy', 'yyyy-MM-dd', 'dd.MM.yyyy'
 */
export const UpdateCurrentUserDateFormatResponse = {
  DdSlashMMSlashyyyy: "dd/MM/yyyy",
  MMSlashddSlashyyyy: "MM/dd/yyyy",
  YyyyDashMMDashdd: "yyyy-MM-dd",
  DdDotMMDotyyyy: "dd.MM.yyyy",
} as const;
/**
 * User's preferred date format. Available options: 'dd/MM/yyyy', 'MM/dd/yyyy', 'yyyy-MM-dd', 'dd.MM.yyyy'
 */
export type UpdateCurrentUserDateFormatResponse = ClosedEnum<
  typeof UpdateCurrentUserDateFormatResponse
>;

/**
 * Team information that the user belongs to
 */
export type UpdateCurrentUserTeam = {
  /**
   * Unique identifier of the team
   */
  id: string;
  /**
   * Name of the team or organization
   */
  name: string;
  /**
   * URL to the team's logo image
   */
  logoUrl: string;
  /**
   * Current subscription plan of the team
   */
  plan: string;
};

/**
 * The updated user
 */
export type UpdateCurrentUserResponse = {
  /**
   * Unique identifier of the user
   */
  id: string;
  /**
   * Full name of the user
   */
  fullName: string;
  /**
   * Email address of the user
   */
  email: string;
  /**
   * URL to the user's avatar image
   */
  avatarUrl: string | null;
  /**
   * User's preferred locale for internationalization (language and region)
   */
  locale: string | null;
  /**
   * Whether the user's calendar week starts on Monday (true) or Sunday (false)
   */
  weekStartsOnMonday: boolean | null;
  /**
   * User's timezone identifier in IANA Time Zone Database format
   */
  timezone: string | null;
  /**
   * User's preferred time format: 12 for 12-hour format, 24 for 24-hour format
   */
  timeFormat: number | null;
  /**
   * User's preferred date format. Available options: 'dd/MM/yyyy', 'MM/dd/yyyy', 'yyyy-MM-dd', 'dd.MM.yyyy'
   */
  dateFormat: UpdateCurrentUserDateFormatResponse | null;
  /**
   * Team information that the user belongs to
   */
  team: UpdateCurrentUserTeam | null;
};

/** @internal */
export const DateFormatRequest$inboundSchema: z.ZodNativeEnum<
  typeof DateFormatRequest
> = z.nativeEnum(DateFormatRequest);

/** @internal */
export const DateFormatRequest$outboundSchema: z.ZodNativeEnum<
  typeof DateFormatRequest
> = DateFormatRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DateFormatRequest$ {
  /** @deprecated use `DateFormatRequest$inboundSchema` instead. */
  export const inboundSchema = DateFormatRequest$inboundSchema;
  /** @deprecated use `DateFormatRequest$outboundSchema` instead. */
  export const outboundSchema = DateFormatRequest$outboundSchema;
}

/** @internal */
export const UpdateCurrentUserRequest$inboundSchema: z.ZodType<
  UpdateCurrentUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fullName: z.string().optional(),
  teamId: z.string().optional(),
  email: z.string().optional(),
  avatarUrl: z.string().optional(),
  locale: z.string().optional(),
  weekStartsOnMonday: z.boolean().optional(),
  timezone: z.string().optional(),
  timeFormat: z.number().optional(),
  dateFormat: DateFormatRequest$inboundSchema.optional(),
});

/** @internal */
export type UpdateCurrentUserRequest$Outbound = {
  fullName?: string | undefined;
  teamId?: string | undefined;
  email?: string | undefined;
  avatarUrl?: string | undefined;
  locale?: string | undefined;
  weekStartsOnMonday?: boolean | undefined;
  timezone?: string | undefined;
  timeFormat?: number | undefined;
  dateFormat?: string | undefined;
};

/** @internal */
export const UpdateCurrentUserRequest$outboundSchema: z.ZodType<
  UpdateCurrentUserRequest$Outbound,
  z.ZodTypeDef,
  UpdateCurrentUserRequest
> = z.object({
  fullName: z.string().optional(),
  teamId: z.string().optional(),
  email: z.string().optional(),
  avatarUrl: z.string().optional(),
  locale: z.string().optional(),
  weekStartsOnMonday: z.boolean().optional(),
  timezone: z.string().optional(),
  timeFormat: z.number().optional(),
  dateFormat: DateFormatRequest$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCurrentUserRequest$ {
  /** @deprecated use `UpdateCurrentUserRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateCurrentUserRequest$inboundSchema;
  /** @deprecated use `UpdateCurrentUserRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateCurrentUserRequest$outboundSchema;
  /** @deprecated use `UpdateCurrentUserRequest$Outbound` instead. */
  export type Outbound = UpdateCurrentUserRequest$Outbound;
}

export function updateCurrentUserRequestToJSON(
  updateCurrentUserRequest: UpdateCurrentUserRequest,
): string {
  return JSON.stringify(
    UpdateCurrentUserRequest$outboundSchema.parse(updateCurrentUserRequest),
  );
}

export function updateCurrentUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCurrentUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCurrentUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCurrentUserRequest' from JSON`,
  );
}

/** @internal */
export const UpdateCurrentUserDateFormatResponse$inboundSchema: z.ZodNativeEnum<
  typeof UpdateCurrentUserDateFormatResponse
> = z.nativeEnum(UpdateCurrentUserDateFormatResponse);

/** @internal */
export const UpdateCurrentUserDateFormatResponse$outboundSchema:
  z.ZodNativeEnum<typeof UpdateCurrentUserDateFormatResponse> =
    UpdateCurrentUserDateFormatResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCurrentUserDateFormatResponse$ {
  /** @deprecated use `UpdateCurrentUserDateFormatResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateCurrentUserDateFormatResponse$inboundSchema;
  /** @deprecated use `UpdateCurrentUserDateFormatResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateCurrentUserDateFormatResponse$outboundSchema;
}

/** @internal */
export const UpdateCurrentUserTeam$inboundSchema: z.ZodType<
  UpdateCurrentUserTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  logoUrl: z.string(),
  plan: z.string(),
});

/** @internal */
export type UpdateCurrentUserTeam$Outbound = {
  id: string;
  name: string;
  logoUrl: string;
  plan: string;
};

/** @internal */
export const UpdateCurrentUserTeam$outboundSchema: z.ZodType<
  UpdateCurrentUserTeam$Outbound,
  z.ZodTypeDef,
  UpdateCurrentUserTeam
> = z.object({
  id: z.string(),
  name: z.string(),
  logoUrl: z.string(),
  plan: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCurrentUserTeam$ {
  /** @deprecated use `UpdateCurrentUserTeam$inboundSchema` instead. */
  export const inboundSchema = UpdateCurrentUserTeam$inboundSchema;
  /** @deprecated use `UpdateCurrentUserTeam$outboundSchema` instead. */
  export const outboundSchema = UpdateCurrentUserTeam$outboundSchema;
  /** @deprecated use `UpdateCurrentUserTeam$Outbound` instead. */
  export type Outbound = UpdateCurrentUserTeam$Outbound;
}

export function updateCurrentUserTeamToJSON(
  updateCurrentUserTeam: UpdateCurrentUserTeam,
): string {
  return JSON.stringify(
    UpdateCurrentUserTeam$outboundSchema.parse(updateCurrentUserTeam),
  );
}

export function updateCurrentUserTeamFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCurrentUserTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCurrentUserTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCurrentUserTeam' from JSON`,
  );
}

/** @internal */
export const UpdateCurrentUserResponse$inboundSchema: z.ZodType<
  UpdateCurrentUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  fullName: z.string(),
  email: z.string(),
  avatarUrl: z.nullable(z.string()),
  locale: z.nullable(z.string()),
  weekStartsOnMonday: z.nullable(z.boolean()),
  timezone: z.nullable(z.string()),
  timeFormat: z.nullable(z.number()),
  dateFormat: z.nullable(UpdateCurrentUserDateFormatResponse$inboundSchema),
  team: z.nullable(z.lazy(() => UpdateCurrentUserTeam$inboundSchema)),
});

/** @internal */
export type UpdateCurrentUserResponse$Outbound = {
  id: string;
  fullName: string;
  email: string;
  avatarUrl: string | null;
  locale: string | null;
  weekStartsOnMonday: boolean | null;
  timezone: string | null;
  timeFormat: number | null;
  dateFormat: string | null;
  team: UpdateCurrentUserTeam$Outbound | null;
};

/** @internal */
export const UpdateCurrentUserResponse$outboundSchema: z.ZodType<
  UpdateCurrentUserResponse$Outbound,
  z.ZodTypeDef,
  UpdateCurrentUserResponse
> = z.object({
  id: z.string(),
  fullName: z.string(),
  email: z.string(),
  avatarUrl: z.nullable(z.string()),
  locale: z.nullable(z.string()),
  weekStartsOnMonday: z.nullable(z.boolean()),
  timezone: z.nullable(z.string()),
  timeFormat: z.nullable(z.number()),
  dateFormat: z.nullable(UpdateCurrentUserDateFormatResponse$outboundSchema),
  team: z.nullable(z.lazy(() => UpdateCurrentUserTeam$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCurrentUserResponse$ {
  /** @deprecated use `UpdateCurrentUserResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateCurrentUserResponse$inboundSchema;
  /** @deprecated use `UpdateCurrentUserResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateCurrentUserResponse$outboundSchema;
  /** @deprecated use `UpdateCurrentUserResponse$Outbound` instead. */
  export type Outbound = UpdateCurrentUserResponse$Outbound;
}

export function updateCurrentUserResponseToJSON(
  updateCurrentUserResponse: UpdateCurrentUserResponse,
): string {
  return JSON.stringify(
    UpdateCurrentUserResponse$outboundSchema.parse(updateCurrentUserResponse),
  );
}

export function updateCurrentUserResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCurrentUserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCurrentUserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCurrentUserResponse' from JSON`,
  );
}
