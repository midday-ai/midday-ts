/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateCustomerTagRequest = {
  /**
   * Unique identifier of the tag
   */
  id: string;
  /**
   * Display name of the tag
   */
  name: string;
};

export type UpdateCustomerRequestBody = {
  /**
   * Unique identifier of the customer. Required for updates, omit for new customers
   */
  id?: string | undefined;
  /**
   * Name of the customer or organization
   */
  name: string;
  /**
   * Primary email address of the customer
   */
  email: string;
  /**
   * Country name where the customer is located
   */
  country?: string | null | undefined;
  /**
   * First line of the customer's address
   */
  addressLine1?: string | null | undefined;
  /**
   * Second line of the customer's address (suite, apartment, etc.)
   */
  addressLine2?: string | null | undefined;
  /**
   * City where the customer is located
   */
  city?: string | null | undefined;
  /**
   * State or province where the customer is located
   */
  state?: string | null | undefined;
  /**
   * ZIP or postal code of the customer's address
   */
  zip?: string | null | undefined;
  /**
   * Primary phone number of the customer
   */
  phone?: string | null | undefined;
  /**
   * Website URL of the customer
   */
  website?: string | null | undefined;
  /**
   * Internal notes about the customer for team reference
   */
  note?: string | null | undefined;
  /**
   * VAT (Value Added Tax) number of the customer
   */
  vatNumber?: string | null | undefined;
  /**
   * Country code in ISO 3166-1 alpha-2 format
   */
  countryCode?: string | null | undefined;
  /**
   * Primary contact person's name at the customer organization
   */
  contact?: string | null | undefined;
  /**
   * Array of tags to associate with the customer for categorization
   */
  tags?: Array<UpdateCustomerTagRequest> | undefined;
};

export type UpdateCustomerRequest = {
  id: string;
  requestBody?: UpdateCustomerRequestBody | undefined;
};

export type UpdateCustomerTagResponse = {
  /**
   * Unique identifier of the tag
   */
  id: string;
  /**
   * Display name of the tag
   */
  name: string;
};

/**
 * Customer updated
 */
export type UpdateCustomerResponse = {
  /**
   * Unique identifier of the customer
   */
  id: string;
  /**
   * Name of the customer or organization
   */
  name: string;
  /**
   * Primary email address of the customer
   */
  email: string;
  /**
   * Primary phone number of the customer
   */
  phone: string | null;
  /**
   * Website URL of the customer
   */
  website: string | null;
  /**
   * Date and time when the customer was created in ISO 8601 format
   */
  createdAt: string;
  /**
   * Country name where the customer is located
   */
  country: string | null;
  /**
   * First line of the customer's address
   */
  addressLine1: string | null;
  /**
   * Second line of the customer's address (suite, apartment, etc.)
   */
  addressLine2: string | null;
  /**
   * City where the customer is located
   */
  city: string | null;
  /**
   * State or province where the customer is located
   */
  state: string | null;
  /**
   * ZIP or postal code of the customer's address
   */
  zip: string | null;
  /**
   * Internal notes about the customer for team reference
   */
  note: string | null;
  /**
   * VAT (Value Added Tax) number of the customer
   */
  vatNumber: string | null;
  /**
   * Country code in ISO 3166-1 alpha-2 format
   */
  countryCode: string | null;
  /**
   * Unique token for the customer (used for internal identification)
   */
  token: string;
  /**
   * Primary contact person's name at the customer organization
   */
  contact: string | null;
  /**
   * Total number of invoices created for this customer
   */
  invoiceCount: number;
  /**
   * Total number of projects associated with this customer
   */
  projectCount: number;
  /**
   * Array of tags associated with the customer for categorization
   */
  tags: Array<UpdateCustomerTagResponse>;
};

/** @internal */
export const UpdateCustomerTagRequest$inboundSchema: z.ZodType<
  UpdateCustomerTagRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
});

/** @internal */
export type UpdateCustomerTagRequest$Outbound = {
  id: string;
  name: string;
};

/** @internal */
export const UpdateCustomerTagRequest$outboundSchema: z.ZodType<
  UpdateCustomerTagRequest$Outbound,
  z.ZodTypeDef,
  UpdateCustomerTagRequest
> = z.object({
  id: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerTagRequest$ {
  /** @deprecated use `UpdateCustomerTagRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerTagRequest$inboundSchema;
  /** @deprecated use `UpdateCustomerTagRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerTagRequest$outboundSchema;
  /** @deprecated use `UpdateCustomerTagRequest$Outbound` instead. */
  export type Outbound = UpdateCustomerTagRequest$Outbound;
}

export function updateCustomerTagRequestToJSON(
  updateCustomerTagRequest: UpdateCustomerTagRequest,
): string {
  return JSON.stringify(
    UpdateCustomerTagRequest$outboundSchema.parse(updateCustomerTagRequest),
  );
}

export function updateCustomerTagRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomerTagRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCustomerTagRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomerTagRequest' from JSON`,
  );
}

/** @internal */
export const UpdateCustomerRequestBody$inboundSchema: z.ZodType<
  UpdateCustomerRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  country: z.nullable(z.string()).optional(),
  addressLine1: z.nullable(z.string()).optional(),
  addressLine2: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  zip: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  contact: z.nullable(z.string()).optional(),
  tags: z.array(z.lazy(() => UpdateCustomerTagRequest$inboundSchema))
    .optional(),
});

/** @internal */
export type UpdateCustomerRequestBody$Outbound = {
  id?: string | undefined;
  name: string;
  email: string;
  country?: string | null | undefined;
  addressLine1?: string | null | undefined;
  addressLine2?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  zip?: string | null | undefined;
  phone?: string | null | undefined;
  website?: string | null | undefined;
  note?: string | null | undefined;
  vatNumber?: string | null | undefined;
  countryCode?: string | null | undefined;
  contact?: string | null | undefined;
  tags?: Array<UpdateCustomerTagRequest$Outbound> | undefined;
};

/** @internal */
export const UpdateCustomerRequestBody$outboundSchema: z.ZodType<
  UpdateCustomerRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateCustomerRequestBody
> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  country: z.nullable(z.string()).optional(),
  addressLine1: z.nullable(z.string()).optional(),
  addressLine2: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  zip: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  website: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  vatNumber: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  contact: z.nullable(z.string()).optional(),
  tags: z.array(z.lazy(() => UpdateCustomerTagRequest$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerRequestBody$ {
  /** @deprecated use `UpdateCustomerRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerRequestBody$inboundSchema;
  /** @deprecated use `UpdateCustomerRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerRequestBody$outboundSchema;
  /** @deprecated use `UpdateCustomerRequestBody$Outbound` instead. */
  export type Outbound = UpdateCustomerRequestBody$Outbound;
}

export function updateCustomerRequestBodyToJSON(
  updateCustomerRequestBody: UpdateCustomerRequestBody,
): string {
  return JSON.stringify(
    UpdateCustomerRequestBody$outboundSchema.parse(updateCustomerRequestBody),
  );
}

export function updateCustomerRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomerRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCustomerRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomerRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateCustomerRequest$inboundSchema: z.ZodType<
  UpdateCustomerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => UpdateCustomerRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateCustomerRequest$Outbound = {
  id: string;
  RequestBody?: UpdateCustomerRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateCustomerRequest$outboundSchema: z.ZodType<
  UpdateCustomerRequest$Outbound,
  z.ZodTypeDef,
  UpdateCustomerRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => UpdateCustomerRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerRequest$ {
  /** @deprecated use `UpdateCustomerRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerRequest$inboundSchema;
  /** @deprecated use `UpdateCustomerRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerRequest$outboundSchema;
  /** @deprecated use `UpdateCustomerRequest$Outbound` instead. */
  export type Outbound = UpdateCustomerRequest$Outbound;
}

export function updateCustomerRequestToJSON(
  updateCustomerRequest: UpdateCustomerRequest,
): string {
  return JSON.stringify(
    UpdateCustomerRequest$outboundSchema.parse(updateCustomerRequest),
  );
}

export function updateCustomerRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCustomerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomerRequest' from JSON`,
  );
}

/** @internal */
export const UpdateCustomerTagResponse$inboundSchema: z.ZodType<
  UpdateCustomerTagResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
});

/** @internal */
export type UpdateCustomerTagResponse$Outbound = {
  id: string;
  name: string;
};

/** @internal */
export const UpdateCustomerTagResponse$outboundSchema: z.ZodType<
  UpdateCustomerTagResponse$Outbound,
  z.ZodTypeDef,
  UpdateCustomerTagResponse
> = z.object({
  id: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerTagResponse$ {
  /** @deprecated use `UpdateCustomerTagResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerTagResponse$inboundSchema;
  /** @deprecated use `UpdateCustomerTagResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerTagResponse$outboundSchema;
  /** @deprecated use `UpdateCustomerTagResponse$Outbound` instead. */
  export type Outbound = UpdateCustomerTagResponse$Outbound;
}

export function updateCustomerTagResponseToJSON(
  updateCustomerTagResponse: UpdateCustomerTagResponse,
): string {
  return JSON.stringify(
    UpdateCustomerTagResponse$outboundSchema.parse(updateCustomerTagResponse),
  );
}

export function updateCustomerTagResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomerTagResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCustomerTagResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomerTagResponse' from JSON`,
  );
}

/** @internal */
export const UpdateCustomerResponse$inboundSchema: z.ZodType<
  UpdateCustomerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  phone: z.nullable(z.string()),
  website: z.nullable(z.string()),
  createdAt: z.string(),
  country: z.nullable(z.string()),
  addressLine1: z.nullable(z.string()),
  addressLine2: z.nullable(z.string()),
  city: z.nullable(z.string()),
  state: z.nullable(z.string()),
  zip: z.nullable(z.string()),
  note: z.nullable(z.string()),
  vatNumber: z.nullable(z.string()),
  countryCode: z.nullable(z.string()),
  token: z.string(),
  contact: z.nullable(z.string()),
  invoiceCount: z.number(),
  projectCount: z.number(),
  tags: z.array(z.lazy(() => UpdateCustomerTagResponse$inboundSchema)),
});

/** @internal */
export type UpdateCustomerResponse$Outbound = {
  id: string;
  name: string;
  email: string;
  phone: string | null;
  website: string | null;
  createdAt: string;
  country: string | null;
  addressLine1: string | null;
  addressLine2: string | null;
  city: string | null;
  state: string | null;
  zip: string | null;
  note: string | null;
  vatNumber: string | null;
  countryCode: string | null;
  token: string;
  contact: string | null;
  invoiceCount: number;
  projectCount: number;
  tags: Array<UpdateCustomerTagResponse$Outbound>;
};

/** @internal */
export const UpdateCustomerResponse$outboundSchema: z.ZodType<
  UpdateCustomerResponse$Outbound,
  z.ZodTypeDef,
  UpdateCustomerResponse
> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  phone: z.nullable(z.string()),
  website: z.nullable(z.string()),
  createdAt: z.string(),
  country: z.nullable(z.string()),
  addressLine1: z.nullable(z.string()),
  addressLine2: z.nullable(z.string()),
  city: z.nullable(z.string()),
  state: z.nullable(z.string()),
  zip: z.nullable(z.string()),
  note: z.nullable(z.string()),
  vatNumber: z.nullable(z.string()),
  countryCode: z.nullable(z.string()),
  token: z.string(),
  contact: z.nullable(z.string()),
  invoiceCount: z.number(),
  projectCount: z.number(),
  tags: z.array(z.lazy(() => UpdateCustomerTagResponse$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCustomerResponse$ {
  /** @deprecated use `UpdateCustomerResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateCustomerResponse$inboundSchema;
  /** @deprecated use `UpdateCustomerResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateCustomerResponse$outboundSchema;
  /** @deprecated use `UpdateCustomerResponse$Outbound` instead. */
  export type Outbound = UpdateCustomerResponse$Outbound;
}

export function updateCustomerResponseToJSON(
  updateCustomerResponse: UpdateCustomerResponse,
): string {
  return JSON.stringify(
    UpdateCustomerResponse$outboundSchema.parse(updateCustomerResponse),
  );
}

export function updateCustomerResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCustomerResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCustomerResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCustomerResponse' from JSON`,
  );
}
