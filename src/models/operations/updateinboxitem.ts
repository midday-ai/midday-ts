/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const UpdateInboxItemStatus = {
  New: "new",
  Archived: "archived",
  Processing: "processing",
  Done: "done",
  Pending: "pending",
} as const;
export type UpdateInboxItemStatus = ClosedEnum<typeof UpdateInboxItemStatus>;

export type UpdateInboxItemRequestBody = {
  status: UpdateInboxItemStatus;
};

export type UpdateInboxItemRequest = {
  id: string;
  requestBody: UpdateInboxItemRequestBody;
};

/**
 * Matched transaction for this inbox item, if any
 */
export type UpdateInboxItemTransaction = {
  /**
   * Transaction ID (UUID)
   */
  id: string;
  /**
   * Transaction amount
   */
  amount: number;
  /**
   * Transaction currency (ISO 4217)
   */
  currency: string;
  /**
   * Transaction name or payee
   */
  name: string;
  /**
   * Transaction date (ISO 8601)
   */
  date: string;
};

/**
 * Inbox item object
 */
export type UpdateInboxItemResponse = {
  /**
   * Inbox item ID (UUID)
   */
  id: string;
  /**
   * Original file name of the uploaded document
   */
  fileName: string;
  /**
   * Path segments to the file in storage
   */
  filePath: Array<string>;
  /**
   * Display name for the inbox item
   */
  displayName: string;
  /**
   * Amount detected or entered for the inbox item
   */
  amount: number | null;
  /**
   * Currency code (ISO 4217) for the amount
   */
  currency: string | null;
  /**
   * MIME type of the uploaded file
   */
  contentType: string | null;
  /**
   * Date associated with the inbox item (ISO 8601)
   */
  date: string | null;
  /**
   * Status of the inbox item
   */
  status: string;
  /**
   * Date and time when the inbox item was created (ISO 8601)
   */
  createdAt: string;
  /**
   * Website associated with the inbox item, if any
   */
  website: string | null;
  /**
   * Description or notes for the inbox item
   */
  description: string | null;
  /**
   * Matched transaction for this inbox item, if any
   */
  transaction: UpdateInboxItemTransaction | null;
};

/** @internal */
export const UpdateInboxItemStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateInboxItemStatus
> = z.nativeEnum(UpdateInboxItemStatus);

/** @internal */
export const UpdateInboxItemStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateInboxItemStatus
> = UpdateInboxItemStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInboxItemStatus$ {
  /** @deprecated use `UpdateInboxItemStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateInboxItemStatus$inboundSchema;
  /** @deprecated use `UpdateInboxItemStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateInboxItemStatus$outboundSchema;
}

/** @internal */
export const UpdateInboxItemRequestBody$inboundSchema: z.ZodType<
  UpdateInboxItemRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: UpdateInboxItemStatus$inboundSchema,
});

/** @internal */
export type UpdateInboxItemRequestBody$Outbound = {
  status: string;
};

/** @internal */
export const UpdateInboxItemRequestBody$outboundSchema: z.ZodType<
  UpdateInboxItemRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateInboxItemRequestBody
> = z.object({
  status: UpdateInboxItemStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInboxItemRequestBody$ {
  /** @deprecated use `UpdateInboxItemRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateInboxItemRequestBody$inboundSchema;
  /** @deprecated use `UpdateInboxItemRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateInboxItemRequestBody$outboundSchema;
  /** @deprecated use `UpdateInboxItemRequestBody$Outbound` instead. */
  export type Outbound = UpdateInboxItemRequestBody$Outbound;
}

export function updateInboxItemRequestBodyToJSON(
  updateInboxItemRequestBody: UpdateInboxItemRequestBody,
): string {
  return JSON.stringify(
    UpdateInboxItemRequestBody$outboundSchema.parse(updateInboxItemRequestBody),
  );
}

export function updateInboxItemRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInboxItemRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInboxItemRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInboxItemRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateInboxItemRequest$inboundSchema: z.ZodType<
  UpdateInboxItemRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => UpdateInboxItemRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateInboxItemRequest$Outbound = {
  id: string;
  RequestBody: UpdateInboxItemRequestBody$Outbound;
};

/** @internal */
export const UpdateInboxItemRequest$outboundSchema: z.ZodType<
  UpdateInboxItemRequest$Outbound,
  z.ZodTypeDef,
  UpdateInboxItemRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => UpdateInboxItemRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInboxItemRequest$ {
  /** @deprecated use `UpdateInboxItemRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateInboxItemRequest$inboundSchema;
  /** @deprecated use `UpdateInboxItemRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateInboxItemRequest$outboundSchema;
  /** @deprecated use `UpdateInboxItemRequest$Outbound` instead. */
  export type Outbound = UpdateInboxItemRequest$Outbound;
}

export function updateInboxItemRequestToJSON(
  updateInboxItemRequest: UpdateInboxItemRequest,
): string {
  return JSON.stringify(
    UpdateInboxItemRequest$outboundSchema.parse(updateInboxItemRequest),
  );
}

export function updateInboxItemRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInboxItemRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInboxItemRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInboxItemRequest' from JSON`,
  );
}

/** @internal */
export const UpdateInboxItemTransaction$inboundSchema: z.ZodType<
  UpdateInboxItemTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  amount: z.number(),
  currency: z.string(),
  name: z.string(),
  date: z.string(),
});

/** @internal */
export type UpdateInboxItemTransaction$Outbound = {
  id: string;
  amount: number;
  currency: string;
  name: string;
  date: string;
};

/** @internal */
export const UpdateInboxItemTransaction$outboundSchema: z.ZodType<
  UpdateInboxItemTransaction$Outbound,
  z.ZodTypeDef,
  UpdateInboxItemTransaction
> = z.object({
  id: z.string(),
  amount: z.number(),
  currency: z.string(),
  name: z.string(),
  date: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInboxItemTransaction$ {
  /** @deprecated use `UpdateInboxItemTransaction$inboundSchema` instead. */
  export const inboundSchema = UpdateInboxItemTransaction$inboundSchema;
  /** @deprecated use `UpdateInboxItemTransaction$outboundSchema` instead. */
  export const outboundSchema = UpdateInboxItemTransaction$outboundSchema;
  /** @deprecated use `UpdateInboxItemTransaction$Outbound` instead. */
  export type Outbound = UpdateInboxItemTransaction$Outbound;
}

export function updateInboxItemTransactionToJSON(
  updateInboxItemTransaction: UpdateInboxItemTransaction,
): string {
  return JSON.stringify(
    UpdateInboxItemTransaction$outboundSchema.parse(updateInboxItemTransaction),
  );
}

export function updateInboxItemTransactionFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInboxItemTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInboxItemTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInboxItemTransaction' from JSON`,
  );
}

/** @internal */
export const UpdateInboxItemResponse$inboundSchema: z.ZodType<
  UpdateInboxItemResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  fileName: z.string(),
  filePath: z.array(z.string()),
  displayName: z.string(),
  amount: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  contentType: z.nullable(z.string()),
  date: z.nullable(z.string()),
  status: z.string(),
  createdAt: z.string(),
  website: z.nullable(z.string()),
  description: z.nullable(z.string()),
  transaction: z.nullable(
    z.lazy(() => UpdateInboxItemTransaction$inboundSchema),
  ),
});

/** @internal */
export type UpdateInboxItemResponse$Outbound = {
  id: string;
  fileName: string;
  filePath: Array<string>;
  displayName: string;
  amount: number | null;
  currency: string | null;
  contentType: string | null;
  date: string | null;
  status: string;
  createdAt: string;
  website: string | null;
  description: string | null;
  transaction: UpdateInboxItemTransaction$Outbound | null;
};

/** @internal */
export const UpdateInboxItemResponse$outboundSchema: z.ZodType<
  UpdateInboxItemResponse$Outbound,
  z.ZodTypeDef,
  UpdateInboxItemResponse
> = z.object({
  id: z.string(),
  fileName: z.string(),
  filePath: z.array(z.string()),
  displayName: z.string(),
  amount: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  contentType: z.nullable(z.string()),
  date: z.nullable(z.string()),
  status: z.string(),
  createdAt: z.string(),
  website: z.nullable(z.string()),
  description: z.nullable(z.string()),
  transaction: z.nullable(
    z.lazy(() => UpdateInboxItemTransaction$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInboxItemResponse$ {
  /** @deprecated use `UpdateInboxItemResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateInboxItemResponse$inboundSchema;
  /** @deprecated use `UpdateInboxItemResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateInboxItemResponse$outboundSchema;
  /** @deprecated use `UpdateInboxItemResponse$Outbound` instead. */
  export type Outbound = UpdateInboxItemResponse$Outbound;
}

export function updateInboxItemResponseToJSON(
  updateInboxItemResponse: UpdateInboxItemResponse,
): string {
  return JSON.stringify(
    UpdateInboxItemResponse$outboundSchema.parse(updateInboxItemResponse),
  );
}

export function updateInboxItemResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInboxItemResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInboxItemResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInboxItemResponse' from JSON`,
  );
}
