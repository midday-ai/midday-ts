/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * New status for the invoice
 */
export const UpdateInvoiceStatusRequest = {
  Paid: "paid",
  Canceled: "canceled",
  Unpaid: "unpaid",
  Scheduled: "scheduled",
  Draft: "draft",
} as const;
/**
 * New status for the invoice
 */
export type UpdateInvoiceStatusRequest = ClosedEnum<
  typeof UpdateInvoiceStatusRequest
>;

/**
 * Schema for updating an invoice
 */
export type UpdateInvoiceRequestBody = {
  /**
   * New status for the invoice
   */
  status?: UpdateInvoiceStatusRequest | undefined;
  /**
   * Timestamp when the invoice was paid (ISO 8601)
   */
  paidAt?: Date | null | undefined;
  /**
   * Internal note for the invoice
   */
  internalNote?: string | null | undefined;
};

export type UpdateInvoiceRequest = {
  id: string;
  requestBody?: UpdateInvoiceRequestBody | undefined;
};

/**
 * Current status of the invoice
 */
export const UpdateInvoiceStatusResponse = {
  Draft: "draft",
  Overdue: "overdue",
  Paid: "paid",
  Unpaid: "unpaid",
  Canceled: "canceled",
  Scheduled: "scheduled",
} as const;
/**
 * Current status of the invoice
 */
export type UpdateInvoiceStatusResponse = ClosedEnum<
  typeof UpdateInvoiceStatusResponse
>;

/**
 * Customer details
 */
export type UpdateInvoiceCustomer = {
  /**
   * Unique identifier for the customer
   */
  id: string;
  /**
   * Name of the customer
   */
  name: string;
  /**
   * Website URL of the customer
   */
  website: string | null;
  /**
   * Email address of the customer
   */
  email: string | null;
};

/**
 * Response after updating an invoice
 */
export type UpdateInvoiceResponse = {
  /**
   * Unique identifier for the invoice
   */
  id: string;
  /**
   * Current status of the invoice
   */
  status: UpdateInvoiceStatusResponse;
  /**
   * Due date of the invoice in ISO 8601 format
   */
  dueDate: string;
  /**
   * Issue date of the invoice in ISO 8601 format
   */
  issueDate: string;
  /**
   * Invoice number as shown to the customer (auto-generated if not provided)
   */
  invoiceNumber?: string | undefined;
  /**
   * Total amount of the invoice
   */
  amount: number;
  /**
   * Currency code (ISO 4217) for the invoice amount
   */
  currency: string;
  /**
   * Customer details
   */
  customer: UpdateInvoiceCustomer;
  /**
   * Timestamp when the invoice was paid (ISO 8601), or null if unpaid
   */
  paidAt: string | null;
  /**
   * Timestamp when a payment reminder was sent (ISO 8601), or null if never sent
   */
  reminderSentAt: string | null;
  /**
   * Optional note attached to the invoice
   */
  note: string | null;
  /**
   * Value-added tax amount, or null if not applicable
   */
  vat: number | null;
  /**
   * Tax amount, or null if not applicable
   */
  tax: number | null;
  /**
   * Discount amount applied to the invoice, or null if none
   */
  discount: number | null;
  /**
   * Subtotal before taxes and discounts, or null if not calculated
   */
  subtotal: number | null;
  /**
   * Timestamp when the invoice was viewed by the customer (ISO 8601), or null if never viewed
   */
  viewedAt: string | null;
  /**
   * Name of the customer as shown on the invoice, or null if not set
   */
  customerName: string | null;
  /**
   * Email address to which the invoice was sent, or null if not sent
   */
  sentTo: string | null;
  /**
   * Timestamp when the invoice was sent (ISO 8601), or null if not sent
   */
  sentAt: string | null;
  /**
   * Timestamp when the invoice was created (ISO 8601)
   */
  createdAt: string;
  /**
   * Timestamp when the invoice was last updated (ISO 8601)
   */
  updatedAt: string;
  /**
   * URL to download the invoice PDF, or null if not generated
   */
  pdfUrl: string | null;
  /**
   * URL to preview the invoice in the browser, or null if not generated
   */
  previewUrl: string | null;
};

/** @internal */
export const UpdateInvoiceStatusRequest$inboundSchema: z.ZodNativeEnum<
  typeof UpdateInvoiceStatusRequest
> = z.nativeEnum(UpdateInvoiceStatusRequest);

/** @internal */
export const UpdateInvoiceStatusRequest$outboundSchema: z.ZodNativeEnum<
  typeof UpdateInvoiceStatusRequest
> = UpdateInvoiceStatusRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInvoiceStatusRequest$ {
  /** @deprecated use `UpdateInvoiceStatusRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateInvoiceStatusRequest$inboundSchema;
  /** @deprecated use `UpdateInvoiceStatusRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateInvoiceStatusRequest$outboundSchema;
}

/** @internal */
export const UpdateInvoiceRequestBody$inboundSchema: z.ZodType<
  UpdateInvoiceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: UpdateInvoiceStatusRequest$inboundSchema.optional(),
  paidAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  internalNote: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateInvoiceRequestBody$Outbound = {
  status?: string | undefined;
  paidAt?: string | null | undefined;
  internalNote?: string | null | undefined;
};

/** @internal */
export const UpdateInvoiceRequestBody$outboundSchema: z.ZodType<
  UpdateInvoiceRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateInvoiceRequestBody
> = z.object({
  status: UpdateInvoiceStatusRequest$outboundSchema.optional(),
  paidAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  internalNote: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInvoiceRequestBody$ {
  /** @deprecated use `UpdateInvoiceRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateInvoiceRequestBody$inboundSchema;
  /** @deprecated use `UpdateInvoiceRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateInvoiceRequestBody$outboundSchema;
  /** @deprecated use `UpdateInvoiceRequestBody$Outbound` instead. */
  export type Outbound = UpdateInvoiceRequestBody$Outbound;
}

export function updateInvoiceRequestBodyToJSON(
  updateInvoiceRequestBody: UpdateInvoiceRequestBody,
): string {
  return JSON.stringify(
    UpdateInvoiceRequestBody$outboundSchema.parse(updateInvoiceRequestBody),
  );
}

export function updateInvoiceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInvoiceRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInvoiceRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInvoiceRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateInvoiceRequest$inboundSchema: z.ZodType<
  UpdateInvoiceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => UpdateInvoiceRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateInvoiceRequest$Outbound = {
  id: string;
  RequestBody?: UpdateInvoiceRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateInvoiceRequest$outboundSchema: z.ZodType<
  UpdateInvoiceRequest$Outbound,
  z.ZodTypeDef,
  UpdateInvoiceRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => UpdateInvoiceRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInvoiceRequest$ {
  /** @deprecated use `UpdateInvoiceRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateInvoiceRequest$inboundSchema;
  /** @deprecated use `UpdateInvoiceRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateInvoiceRequest$outboundSchema;
  /** @deprecated use `UpdateInvoiceRequest$Outbound` instead. */
  export type Outbound = UpdateInvoiceRequest$Outbound;
}

export function updateInvoiceRequestToJSON(
  updateInvoiceRequest: UpdateInvoiceRequest,
): string {
  return JSON.stringify(
    UpdateInvoiceRequest$outboundSchema.parse(updateInvoiceRequest),
  );
}

export function updateInvoiceRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInvoiceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInvoiceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInvoiceRequest' from JSON`,
  );
}

/** @internal */
export const UpdateInvoiceStatusResponse$inboundSchema: z.ZodNativeEnum<
  typeof UpdateInvoiceStatusResponse
> = z.nativeEnum(UpdateInvoiceStatusResponse);

/** @internal */
export const UpdateInvoiceStatusResponse$outboundSchema: z.ZodNativeEnum<
  typeof UpdateInvoiceStatusResponse
> = UpdateInvoiceStatusResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInvoiceStatusResponse$ {
  /** @deprecated use `UpdateInvoiceStatusResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateInvoiceStatusResponse$inboundSchema;
  /** @deprecated use `UpdateInvoiceStatusResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateInvoiceStatusResponse$outboundSchema;
}

/** @internal */
export const UpdateInvoiceCustomer$inboundSchema: z.ZodType<
  UpdateInvoiceCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  website: z.nullable(z.string()),
  email: z.nullable(z.string()),
});

/** @internal */
export type UpdateInvoiceCustomer$Outbound = {
  id: string;
  name: string;
  website: string | null;
  email: string | null;
};

/** @internal */
export const UpdateInvoiceCustomer$outboundSchema: z.ZodType<
  UpdateInvoiceCustomer$Outbound,
  z.ZodTypeDef,
  UpdateInvoiceCustomer
> = z.object({
  id: z.string(),
  name: z.string(),
  website: z.nullable(z.string()),
  email: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInvoiceCustomer$ {
  /** @deprecated use `UpdateInvoiceCustomer$inboundSchema` instead. */
  export const inboundSchema = UpdateInvoiceCustomer$inboundSchema;
  /** @deprecated use `UpdateInvoiceCustomer$outboundSchema` instead. */
  export const outboundSchema = UpdateInvoiceCustomer$outboundSchema;
  /** @deprecated use `UpdateInvoiceCustomer$Outbound` instead. */
  export type Outbound = UpdateInvoiceCustomer$Outbound;
}

export function updateInvoiceCustomerToJSON(
  updateInvoiceCustomer: UpdateInvoiceCustomer,
): string {
  return JSON.stringify(
    UpdateInvoiceCustomer$outboundSchema.parse(updateInvoiceCustomer),
  );
}

export function updateInvoiceCustomerFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInvoiceCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInvoiceCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInvoiceCustomer' from JSON`,
  );
}

/** @internal */
export const UpdateInvoiceResponse$inboundSchema: z.ZodType<
  UpdateInvoiceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  status: UpdateInvoiceStatusResponse$inboundSchema,
  dueDate: z.string(),
  issueDate: z.string(),
  invoiceNumber: z.string().optional(),
  amount: z.number(),
  currency: z.string(),
  customer: z.lazy(() => UpdateInvoiceCustomer$inboundSchema),
  paidAt: z.nullable(z.string()),
  reminderSentAt: z.nullable(z.string()),
  note: z.nullable(z.string()),
  vat: z.nullable(z.number()),
  tax: z.nullable(z.number()),
  discount: z.nullable(z.number()),
  subtotal: z.nullable(z.number()),
  viewedAt: z.nullable(z.string()),
  customerName: z.nullable(z.string()),
  sentTo: z.nullable(z.string()),
  sentAt: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
  pdfUrl: z.nullable(z.string()),
  previewUrl: z.nullable(z.string()),
});

/** @internal */
export type UpdateInvoiceResponse$Outbound = {
  id: string;
  status: string;
  dueDate: string;
  issueDate: string;
  invoiceNumber?: string | undefined;
  amount: number;
  currency: string;
  customer: UpdateInvoiceCustomer$Outbound;
  paidAt: string | null;
  reminderSentAt: string | null;
  note: string | null;
  vat: number | null;
  tax: number | null;
  discount: number | null;
  subtotal: number | null;
  viewedAt: string | null;
  customerName: string | null;
  sentTo: string | null;
  sentAt: string | null;
  createdAt: string;
  updatedAt: string;
  pdfUrl: string | null;
  previewUrl: string | null;
};

/** @internal */
export const UpdateInvoiceResponse$outboundSchema: z.ZodType<
  UpdateInvoiceResponse$Outbound,
  z.ZodTypeDef,
  UpdateInvoiceResponse
> = z.object({
  id: z.string(),
  status: UpdateInvoiceStatusResponse$outboundSchema,
  dueDate: z.string(),
  issueDate: z.string(),
  invoiceNumber: z.string().optional(),
  amount: z.number(),
  currency: z.string(),
  customer: z.lazy(() => UpdateInvoiceCustomer$outboundSchema),
  paidAt: z.nullable(z.string()),
  reminderSentAt: z.nullable(z.string()),
  note: z.nullable(z.string()),
  vat: z.nullable(z.number()),
  tax: z.nullable(z.number()),
  discount: z.nullable(z.number()),
  subtotal: z.nullable(z.number()),
  viewedAt: z.nullable(z.string()),
  customerName: z.nullable(z.string()),
  sentTo: z.nullable(z.string()),
  sentAt: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
  pdfUrl: z.nullable(z.string()),
  previewUrl: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInvoiceResponse$ {
  /** @deprecated use `UpdateInvoiceResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateInvoiceResponse$inboundSchema;
  /** @deprecated use `UpdateInvoiceResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateInvoiceResponse$outboundSchema;
  /** @deprecated use `UpdateInvoiceResponse$Outbound` instead. */
  export type Outbound = UpdateInvoiceResponse$Outbound;
}

export function updateInvoiceResponseToJSON(
  updateInvoiceResponse: UpdateInvoiceResponse,
): string {
  return JSON.stringify(
    UpdateInvoiceResponse$outboundSchema.parse(updateInvoiceResponse),
  );
}

export function updateInvoiceResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInvoiceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInvoiceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInvoiceResponse' from JSON`,
  );
}
