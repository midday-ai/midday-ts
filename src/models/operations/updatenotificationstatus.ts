/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The new status for the notification
 */
export const UpdateNotificationStatusStatus = {
  Unread: "unread",
  Read: "read",
  Archived: "archived",
} as const;
/**
 * The new status for the notification
 */
export type UpdateNotificationStatusStatus = ClosedEnum<
  typeof UpdateNotificationStatusStatus
>;

export type UpdateNotificationStatusRequestBody = {
  /**
   * The new status for the notification
   */
  status: UpdateNotificationStatusStatus;
};

export type UpdateNotificationStatusRequest = {
  notificationId: string;
  requestBody?: UpdateNotificationStatusRequestBody | undefined;
};

/** @internal */
export const UpdateNotificationStatusStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateNotificationStatusStatus
> = z.nativeEnum(UpdateNotificationStatusStatus);

/** @internal */
export const UpdateNotificationStatusStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateNotificationStatusStatus
> = UpdateNotificationStatusStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNotificationStatusStatus$ {
  /** @deprecated use `UpdateNotificationStatusStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateNotificationStatusStatus$inboundSchema;
  /** @deprecated use `UpdateNotificationStatusStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateNotificationStatusStatus$outboundSchema;
}

/** @internal */
export const UpdateNotificationStatusRequestBody$inboundSchema: z.ZodType<
  UpdateNotificationStatusRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: UpdateNotificationStatusStatus$inboundSchema,
});

/** @internal */
export type UpdateNotificationStatusRequestBody$Outbound = {
  status: string;
};

/** @internal */
export const UpdateNotificationStatusRequestBody$outboundSchema: z.ZodType<
  UpdateNotificationStatusRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateNotificationStatusRequestBody
> = z.object({
  status: UpdateNotificationStatusStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNotificationStatusRequestBody$ {
  /** @deprecated use `UpdateNotificationStatusRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateNotificationStatusRequestBody$inboundSchema;
  /** @deprecated use `UpdateNotificationStatusRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateNotificationStatusRequestBody$outboundSchema;
  /** @deprecated use `UpdateNotificationStatusRequestBody$Outbound` instead. */
  export type Outbound = UpdateNotificationStatusRequestBody$Outbound;
}

export function updateNotificationStatusRequestBodyToJSON(
  updateNotificationStatusRequestBody: UpdateNotificationStatusRequestBody,
): string {
  return JSON.stringify(
    UpdateNotificationStatusRequestBody$outboundSchema.parse(
      updateNotificationStatusRequestBody,
    ),
  );
}

export function updateNotificationStatusRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNotificationStatusRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateNotificationStatusRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNotificationStatusRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateNotificationStatusRequest$inboundSchema: z.ZodType<
  UpdateNotificationStatusRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  notificationId: z.string(),
  RequestBody: z.lazy(() => UpdateNotificationStatusRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateNotificationStatusRequest$Outbound = {
  notificationId: string;
  RequestBody?: UpdateNotificationStatusRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateNotificationStatusRequest$outboundSchema: z.ZodType<
  UpdateNotificationStatusRequest$Outbound,
  z.ZodTypeDef,
  UpdateNotificationStatusRequest
> = z.object({
  notificationId: z.string(),
  requestBody: z.lazy(() => UpdateNotificationStatusRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNotificationStatusRequest$ {
  /** @deprecated use `UpdateNotificationStatusRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateNotificationStatusRequest$inboundSchema;
  /** @deprecated use `UpdateNotificationStatusRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateNotificationStatusRequest$outboundSchema;
  /** @deprecated use `UpdateNotificationStatusRequest$Outbound` instead. */
  export type Outbound = UpdateNotificationStatusRequest$Outbound;
}

export function updateNotificationStatusRequestToJSON(
  updateNotificationStatusRequest: UpdateNotificationStatusRequest,
): string {
  return JSON.stringify(
    UpdateNotificationStatusRequest$outboundSchema.parse(
      updateNotificationStatusRequest,
    ),
  );
}

export function updateNotificationStatusRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateNotificationStatusRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateNotificationStatusRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateNotificationStatusRequest' from JSON`,
  );
}
