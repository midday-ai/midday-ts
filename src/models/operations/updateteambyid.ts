/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateTeamByIdRequestBody = {
  /**
   * Name of the team or organization. Must be between 2 and 32 characters
   */
  name?: string | undefined;
  /**
   * Primary contact email address for the team
   */
  email?: string | undefined;
  /**
   * URL to the team's logo image. Must be hosted on midday.ai domain
   */
  logoUrl?: string | undefined;
  /**
   * Base currency for the team in ISO 4217 format (3-letter currency code)
   */
  baseCurrency?: string | undefined;
  /**
   * Country code for the team
   */
  countryCode?: string | undefined;
};

export type UpdateTeamByIdRequest = {
  id: string;
  requestBody?: UpdateTeamByIdRequestBody | undefined;
};

/**
 * Current subscription plan of the team
 */
export const UpdateTeamByIdPlan = {
  Trial: "trial",
  Starter: "starter",
  Pro: "pro",
} as const;
/**
 * Current subscription plan of the team
 */
export type UpdateTeamByIdPlan = ClosedEnum<typeof UpdateTeamByIdPlan>;

/**
 * Team updated
 */
export type UpdateTeamByIdResponse = {
  /**
   * Unique identifier of the team
   */
  id: string;
  /**
   * Name of the team or organization
   */
  name: string;
  /**
   * URL to the team's logo image
   */
  logoUrl: string | null;
  /**
   * Current subscription plan of the team
   */
  plan: UpdateTeamByIdPlan;
};

/** @internal */
export const UpdateTeamByIdRequestBody$inboundSchema: z.ZodType<
  UpdateTeamByIdRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  email: z.string().optional(),
  logoUrl: z.string().optional(),
  baseCurrency: z.string().optional(),
  countryCode: z.string().optional(),
});

/** @internal */
export type UpdateTeamByIdRequestBody$Outbound = {
  name?: string | undefined;
  email?: string | undefined;
  logoUrl?: string | undefined;
  baseCurrency?: string | undefined;
  countryCode?: string | undefined;
};

/** @internal */
export const UpdateTeamByIdRequestBody$outboundSchema: z.ZodType<
  UpdateTeamByIdRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateTeamByIdRequestBody
> = z.object({
  name: z.string().optional(),
  email: z.string().optional(),
  logoUrl: z.string().optional(),
  baseCurrency: z.string().optional(),
  countryCode: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamByIdRequestBody$ {
  /** @deprecated use `UpdateTeamByIdRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateTeamByIdRequestBody$inboundSchema;
  /** @deprecated use `UpdateTeamByIdRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateTeamByIdRequestBody$outboundSchema;
  /** @deprecated use `UpdateTeamByIdRequestBody$Outbound` instead. */
  export type Outbound = UpdateTeamByIdRequestBody$Outbound;
}

export function updateTeamByIdRequestBodyToJSON(
  updateTeamByIdRequestBody: UpdateTeamByIdRequestBody,
): string {
  return JSON.stringify(
    UpdateTeamByIdRequestBody$outboundSchema.parse(updateTeamByIdRequestBody),
  );
}

export function updateTeamByIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTeamByIdRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTeamByIdRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTeamByIdRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateTeamByIdRequest$inboundSchema: z.ZodType<
  UpdateTeamByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => UpdateTeamByIdRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateTeamByIdRequest$Outbound = {
  id: string;
  RequestBody?: UpdateTeamByIdRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateTeamByIdRequest$outboundSchema: z.ZodType<
  UpdateTeamByIdRequest$Outbound,
  z.ZodTypeDef,
  UpdateTeamByIdRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => UpdateTeamByIdRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamByIdRequest$ {
  /** @deprecated use `UpdateTeamByIdRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateTeamByIdRequest$inboundSchema;
  /** @deprecated use `UpdateTeamByIdRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateTeamByIdRequest$outboundSchema;
  /** @deprecated use `UpdateTeamByIdRequest$Outbound` instead. */
  export type Outbound = UpdateTeamByIdRequest$Outbound;
}

export function updateTeamByIdRequestToJSON(
  updateTeamByIdRequest: UpdateTeamByIdRequest,
): string {
  return JSON.stringify(
    UpdateTeamByIdRequest$outboundSchema.parse(updateTeamByIdRequest),
  );
}

export function updateTeamByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTeamByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTeamByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTeamByIdRequest' from JSON`,
  );
}

/** @internal */
export const UpdateTeamByIdPlan$inboundSchema: z.ZodNativeEnum<
  typeof UpdateTeamByIdPlan
> = z.nativeEnum(UpdateTeamByIdPlan);

/** @internal */
export const UpdateTeamByIdPlan$outboundSchema: z.ZodNativeEnum<
  typeof UpdateTeamByIdPlan
> = UpdateTeamByIdPlan$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamByIdPlan$ {
  /** @deprecated use `UpdateTeamByIdPlan$inboundSchema` instead. */
  export const inboundSchema = UpdateTeamByIdPlan$inboundSchema;
  /** @deprecated use `UpdateTeamByIdPlan$outboundSchema` instead. */
  export const outboundSchema = UpdateTeamByIdPlan$outboundSchema;
}

/** @internal */
export const UpdateTeamByIdResponse$inboundSchema: z.ZodType<
  UpdateTeamByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  logoUrl: z.nullable(z.string()),
  plan: UpdateTeamByIdPlan$inboundSchema,
});

/** @internal */
export type UpdateTeamByIdResponse$Outbound = {
  id: string;
  name: string;
  logoUrl: string | null;
  plan: string;
};

/** @internal */
export const UpdateTeamByIdResponse$outboundSchema: z.ZodType<
  UpdateTeamByIdResponse$Outbound,
  z.ZodTypeDef,
  UpdateTeamByIdResponse
> = z.object({
  id: z.string(),
  name: z.string(),
  logoUrl: z.nullable(z.string()),
  plan: UpdateTeamByIdPlan$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTeamByIdResponse$ {
  /** @deprecated use `UpdateTeamByIdResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateTeamByIdResponse$inboundSchema;
  /** @deprecated use `UpdateTeamByIdResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateTeamByIdResponse$outboundSchema;
  /** @deprecated use `UpdateTeamByIdResponse$Outbound` instead. */
  export type Outbound = UpdateTeamByIdResponse$Outbound;
}

export function updateTeamByIdResponseToJSON(
  updateTeamByIdResponse: UpdateTeamByIdResponse,
): string {
  return JSON.stringify(
    UpdateTeamByIdResponse$outboundSchema.parse(updateTeamByIdResponse),
  );
}

export function updateTeamByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTeamByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTeamByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTeamByIdResponse' from JSON`,
  );
}
