/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateTrackerEntryRequestBody = {
  /**
   * Start time of the tracker entry in ISO 8601 format
   */
  start: Date;
  /**
   * Stop time of the tracker entry in ISO 8601 format
   */
  stop: Date;
  /**
   * Array of dates for which to create tracker entries
   */
  dates: Array<string>;
  /**
   * Unique identifier of the user assigned to this tracker entry
   */
  assignedId: string | null;
  /**
   * Unique identifier of the project associated with this tracker entry
   */
  projectId: string;
  /**
   * Optional description or notes for the tracker entry
   */
  description?: string | null | undefined;
  /**
   * Duration of the tracker entry in seconds
   */
  duration: number;
};

export type UpdateTrackerEntryRequest = {
  id: string;
  requestBody?: UpdateTrackerEntryRequestBody | undefined;
};

/**
 * User information for the person who created this tracker entry
 */
export type UpdateTrackerEntryUser = {
  /**
   * Unique identifier of the user
   */
  id: string;
  /**
   * Full name of the user
   */
  fullName: string;
  /**
   * URL to the user's avatar image
   */
  avatarUrl: string;
};

/**
 * Customer information associated with the project
 */
export type UpdateTrackerEntryCustomer = {
  /**
   * Unique identifier of the customer
   */
  id: string;
  /**
   * Name of the customer or organization
   */
  name: string;
};

/**
 * Project information associated with this tracker entry
 */
export type UpdateTrackerEntryProject = {
  /**
   * Unique identifier of the project
   */
  id: string;
  /**
   * Date and time when the project was created in ISO 8601 format
   */
  createdAt: string;
  /**
   * Default hourly rate for the project
   */
  rate: number | null;
  /**
   * Currency code for the project rate in ISO 4217 format
   */
  currency: string | null;
  /**
   * Current status of the project
   */
  status: string;
  /**
   * Description of the project
   */
  description: string | null;
  /**
   * Name of the project
   */
  name: string;
  /**
   * Whether the project is billable to the customer
   */
  billable: boolean | null;
  /**
   * Estimated total hours for the project
   */
  estimate: number | null;
  /**
   * Customer information associated with the project
   */
  customer: UpdateTrackerEntryCustomer | null;
};

export type UpdateTrackerEntryData = {
  /**
   * Unique identifier of the tracker entry
   */
  id: string;
  /**
   * Date and time when the tracker entry was created in ISO 8601 format
   */
  createdAt: string;
  /**
   * Duration of the tracker entry in seconds
   */
  duration: number;
  /**
   * Start time of the tracker entry in ISO 8601 format
   */
  start: string;
  /**
   * Stop time of the tracker entry in ISO 8601 format
   */
  stop: string;
  /**
   * Unique identifier of the team that owns this tracker entry
   */
  teamId: string;
  /**
   * Description or notes for the tracker entry
   */
  description: string | null;
  /**
   * Hourly rate applied to this tracker entry
   */
  rate: number | null;
  /**
   * Currency code for the rate in ISO 4217 format
   */
  currency: string | null;
  /**
   * Whether this tracker entry has been billed to the customer
   */
  billed: boolean;
  /**
   * Date of the tracker entry in YYYY-MM-DD format
   */
  date: string;
  /**
   * User information for the person who created this tracker entry
   */
  user: UpdateTrackerEntryUser;
  /**
   * Project information associated with this tracker entry
   */
  project: UpdateTrackerEntryProject;
};

/**
 * Response schema for created tracker entries
 */
export type UpdateTrackerEntryResponse = {
  /**
   * Array of created tracker entries
   */
  data: Array<UpdateTrackerEntryData>;
};

/** @internal */
export const UpdateTrackerEntryRequestBody$inboundSchema: z.ZodType<
  UpdateTrackerEntryRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  start: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  stop: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  dates: z.array(z.string()),
  assignedId: z.nullable(z.string()),
  projectId: z.string(),
  description: z.nullable(z.string()).optional(),
  duration: z.number(),
});

/** @internal */
export type UpdateTrackerEntryRequestBody$Outbound = {
  start: string;
  stop: string;
  dates: Array<string>;
  assignedId: string | null;
  projectId: string;
  description?: string | null | undefined;
  duration: number;
};

/** @internal */
export const UpdateTrackerEntryRequestBody$outboundSchema: z.ZodType<
  UpdateTrackerEntryRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateTrackerEntryRequestBody
> = z.object({
  start: z.date().transform(v => v.toISOString()),
  stop: z.date().transform(v => v.toISOString()),
  dates: z.array(z.string()),
  assignedId: z.nullable(z.string()),
  projectId: z.string(),
  description: z.nullable(z.string()).optional(),
  duration: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTrackerEntryRequestBody$ {
  /** @deprecated use `UpdateTrackerEntryRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateTrackerEntryRequestBody$inboundSchema;
  /** @deprecated use `UpdateTrackerEntryRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateTrackerEntryRequestBody$outboundSchema;
  /** @deprecated use `UpdateTrackerEntryRequestBody$Outbound` instead. */
  export type Outbound = UpdateTrackerEntryRequestBody$Outbound;
}

export function updateTrackerEntryRequestBodyToJSON(
  updateTrackerEntryRequestBody: UpdateTrackerEntryRequestBody,
): string {
  return JSON.stringify(
    UpdateTrackerEntryRequestBody$outboundSchema.parse(
      updateTrackerEntryRequestBody,
    ),
  );
}

export function updateTrackerEntryRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTrackerEntryRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTrackerEntryRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTrackerEntryRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateTrackerEntryRequest$inboundSchema: z.ZodType<
  UpdateTrackerEntryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => UpdateTrackerEntryRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateTrackerEntryRequest$Outbound = {
  id: string;
  RequestBody?: UpdateTrackerEntryRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateTrackerEntryRequest$outboundSchema: z.ZodType<
  UpdateTrackerEntryRequest$Outbound,
  z.ZodTypeDef,
  UpdateTrackerEntryRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => UpdateTrackerEntryRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTrackerEntryRequest$ {
  /** @deprecated use `UpdateTrackerEntryRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateTrackerEntryRequest$inboundSchema;
  /** @deprecated use `UpdateTrackerEntryRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateTrackerEntryRequest$outboundSchema;
  /** @deprecated use `UpdateTrackerEntryRequest$Outbound` instead. */
  export type Outbound = UpdateTrackerEntryRequest$Outbound;
}

export function updateTrackerEntryRequestToJSON(
  updateTrackerEntryRequest: UpdateTrackerEntryRequest,
): string {
  return JSON.stringify(
    UpdateTrackerEntryRequest$outboundSchema.parse(updateTrackerEntryRequest),
  );
}

export function updateTrackerEntryRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTrackerEntryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTrackerEntryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTrackerEntryRequest' from JSON`,
  );
}

/** @internal */
export const UpdateTrackerEntryUser$inboundSchema: z.ZodType<
  UpdateTrackerEntryUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  fullName: z.string(),
  avatarUrl: z.string(),
});

/** @internal */
export type UpdateTrackerEntryUser$Outbound = {
  id: string;
  fullName: string;
  avatarUrl: string;
};

/** @internal */
export const UpdateTrackerEntryUser$outboundSchema: z.ZodType<
  UpdateTrackerEntryUser$Outbound,
  z.ZodTypeDef,
  UpdateTrackerEntryUser
> = z.object({
  id: z.string(),
  fullName: z.string(),
  avatarUrl: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTrackerEntryUser$ {
  /** @deprecated use `UpdateTrackerEntryUser$inboundSchema` instead. */
  export const inboundSchema = UpdateTrackerEntryUser$inboundSchema;
  /** @deprecated use `UpdateTrackerEntryUser$outboundSchema` instead. */
  export const outboundSchema = UpdateTrackerEntryUser$outboundSchema;
  /** @deprecated use `UpdateTrackerEntryUser$Outbound` instead. */
  export type Outbound = UpdateTrackerEntryUser$Outbound;
}

export function updateTrackerEntryUserToJSON(
  updateTrackerEntryUser: UpdateTrackerEntryUser,
): string {
  return JSON.stringify(
    UpdateTrackerEntryUser$outboundSchema.parse(updateTrackerEntryUser),
  );
}

export function updateTrackerEntryUserFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTrackerEntryUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTrackerEntryUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTrackerEntryUser' from JSON`,
  );
}

/** @internal */
export const UpdateTrackerEntryCustomer$inboundSchema: z.ZodType<
  UpdateTrackerEntryCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
});

/** @internal */
export type UpdateTrackerEntryCustomer$Outbound = {
  id: string;
  name: string;
};

/** @internal */
export const UpdateTrackerEntryCustomer$outboundSchema: z.ZodType<
  UpdateTrackerEntryCustomer$Outbound,
  z.ZodTypeDef,
  UpdateTrackerEntryCustomer
> = z.object({
  id: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTrackerEntryCustomer$ {
  /** @deprecated use `UpdateTrackerEntryCustomer$inboundSchema` instead. */
  export const inboundSchema = UpdateTrackerEntryCustomer$inboundSchema;
  /** @deprecated use `UpdateTrackerEntryCustomer$outboundSchema` instead. */
  export const outboundSchema = UpdateTrackerEntryCustomer$outboundSchema;
  /** @deprecated use `UpdateTrackerEntryCustomer$Outbound` instead. */
  export type Outbound = UpdateTrackerEntryCustomer$Outbound;
}

export function updateTrackerEntryCustomerToJSON(
  updateTrackerEntryCustomer: UpdateTrackerEntryCustomer,
): string {
  return JSON.stringify(
    UpdateTrackerEntryCustomer$outboundSchema.parse(updateTrackerEntryCustomer),
  );
}

export function updateTrackerEntryCustomerFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTrackerEntryCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTrackerEntryCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTrackerEntryCustomer' from JSON`,
  );
}

/** @internal */
export const UpdateTrackerEntryProject$inboundSchema: z.ZodType<
  UpdateTrackerEntryProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  rate: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  status: z.string(),
  description: z.nullable(z.string()),
  name: z.string(),
  billable: z.nullable(z.boolean()),
  estimate: z.nullable(z.number()),
  customer: z.nullable(z.lazy(() => UpdateTrackerEntryCustomer$inboundSchema)),
});

/** @internal */
export type UpdateTrackerEntryProject$Outbound = {
  id: string;
  createdAt: string;
  rate: number | null;
  currency: string | null;
  status: string;
  description: string | null;
  name: string;
  billable: boolean | null;
  estimate: number | null;
  customer: UpdateTrackerEntryCustomer$Outbound | null;
};

/** @internal */
export const UpdateTrackerEntryProject$outboundSchema: z.ZodType<
  UpdateTrackerEntryProject$Outbound,
  z.ZodTypeDef,
  UpdateTrackerEntryProject
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  rate: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  status: z.string(),
  description: z.nullable(z.string()),
  name: z.string(),
  billable: z.nullable(z.boolean()),
  estimate: z.nullable(z.number()),
  customer: z.nullable(z.lazy(() => UpdateTrackerEntryCustomer$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTrackerEntryProject$ {
  /** @deprecated use `UpdateTrackerEntryProject$inboundSchema` instead. */
  export const inboundSchema = UpdateTrackerEntryProject$inboundSchema;
  /** @deprecated use `UpdateTrackerEntryProject$outboundSchema` instead. */
  export const outboundSchema = UpdateTrackerEntryProject$outboundSchema;
  /** @deprecated use `UpdateTrackerEntryProject$Outbound` instead. */
  export type Outbound = UpdateTrackerEntryProject$Outbound;
}

export function updateTrackerEntryProjectToJSON(
  updateTrackerEntryProject: UpdateTrackerEntryProject,
): string {
  return JSON.stringify(
    UpdateTrackerEntryProject$outboundSchema.parse(updateTrackerEntryProject),
  );
}

export function updateTrackerEntryProjectFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTrackerEntryProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTrackerEntryProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTrackerEntryProject' from JSON`,
  );
}

/** @internal */
export const UpdateTrackerEntryData$inboundSchema: z.ZodType<
  UpdateTrackerEntryData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  duration: z.number(),
  start: z.string(),
  stop: z.string(),
  teamId: z.string(),
  description: z.nullable(z.string()),
  rate: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  billed: z.boolean(),
  date: z.string(),
  user: z.lazy(() => UpdateTrackerEntryUser$inboundSchema),
  project: z.lazy(() => UpdateTrackerEntryProject$inboundSchema),
});

/** @internal */
export type UpdateTrackerEntryData$Outbound = {
  id: string;
  createdAt: string;
  duration: number;
  start: string;
  stop: string;
  teamId: string;
  description: string | null;
  rate: number | null;
  currency: string | null;
  billed: boolean;
  date: string;
  user: UpdateTrackerEntryUser$Outbound;
  project: UpdateTrackerEntryProject$Outbound;
};

/** @internal */
export const UpdateTrackerEntryData$outboundSchema: z.ZodType<
  UpdateTrackerEntryData$Outbound,
  z.ZodTypeDef,
  UpdateTrackerEntryData
> = z.object({
  id: z.string(),
  createdAt: z.string(),
  duration: z.number(),
  start: z.string(),
  stop: z.string(),
  teamId: z.string(),
  description: z.nullable(z.string()),
  rate: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  billed: z.boolean(),
  date: z.string(),
  user: z.lazy(() => UpdateTrackerEntryUser$outboundSchema),
  project: z.lazy(() => UpdateTrackerEntryProject$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTrackerEntryData$ {
  /** @deprecated use `UpdateTrackerEntryData$inboundSchema` instead. */
  export const inboundSchema = UpdateTrackerEntryData$inboundSchema;
  /** @deprecated use `UpdateTrackerEntryData$outboundSchema` instead. */
  export const outboundSchema = UpdateTrackerEntryData$outboundSchema;
  /** @deprecated use `UpdateTrackerEntryData$Outbound` instead. */
  export type Outbound = UpdateTrackerEntryData$Outbound;
}

export function updateTrackerEntryDataToJSON(
  updateTrackerEntryData: UpdateTrackerEntryData,
): string {
  return JSON.stringify(
    UpdateTrackerEntryData$outboundSchema.parse(updateTrackerEntryData),
  );
}

export function updateTrackerEntryDataFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTrackerEntryData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTrackerEntryData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTrackerEntryData' from JSON`,
  );
}

/** @internal */
export const UpdateTrackerEntryResponse$inboundSchema: z.ZodType<
  UpdateTrackerEntryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => UpdateTrackerEntryData$inboundSchema)),
});

/** @internal */
export type UpdateTrackerEntryResponse$Outbound = {
  data: Array<UpdateTrackerEntryData$Outbound>;
};

/** @internal */
export const UpdateTrackerEntryResponse$outboundSchema: z.ZodType<
  UpdateTrackerEntryResponse$Outbound,
  z.ZodTypeDef,
  UpdateTrackerEntryResponse
> = z.object({
  data: z.array(z.lazy(() => UpdateTrackerEntryData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTrackerEntryResponse$ {
  /** @deprecated use `UpdateTrackerEntryResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateTrackerEntryResponse$inboundSchema;
  /** @deprecated use `UpdateTrackerEntryResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateTrackerEntryResponse$outboundSchema;
  /** @deprecated use `UpdateTrackerEntryResponse$Outbound` instead. */
  export type Outbound = UpdateTrackerEntryResponse$Outbound;
}

export function updateTrackerEntryResponseToJSON(
  updateTrackerEntryResponse: UpdateTrackerEntryResponse,
): string {
  return JSON.stringify(
    UpdateTrackerEntryResponse$outboundSchema.parse(updateTrackerEntryResponse),
  );
}

export function updateTrackerEntryResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTrackerEntryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTrackerEntryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTrackerEntryResponse' from JSON`,
  );
}
