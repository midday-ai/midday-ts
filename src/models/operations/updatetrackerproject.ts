/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Current status of the project
 */
export const UpdateTrackerProjectStatus = {
  InProgress: "in_progress",
  Completed: "completed",
} as const;
/**
 * Current status of the project
 */
export type UpdateTrackerProjectStatus = ClosedEnum<
  typeof UpdateTrackerProjectStatus
>;

export type UpdateTrackerProjectTag = {
  /**
   * Unique identifier of the tag
   */
  id: string;
  /**
   * Display value of the tag
   */
  value: string;
};

export type UpdateTrackerProjectRequestBody = {
  /**
   * Name of the project
   */
  name: string;
  /**
   * Detailed description of the project
   */
  description?: string | null | undefined;
  /**
   * Estimated total hours required to complete the project
   */
  estimate?: number | null | undefined;
  /**
   * Whether the project is billable to the customer
   */
  billable?: boolean | null | undefined;
  /**
   * Hourly rate for the project in the specified currency
   */
  rate?: number | null | undefined;
  /**
   * Currency code for the project rate in ISO 4217 format
   */
  currency?: string | null | undefined;
  /**
   * Current status of the project
   */
  status?: UpdateTrackerProjectStatus | undefined;
  /**
   * Unique identifier of the customer associated with this project
   */
  customerId?: string | null | undefined;
  /**
   * Array of tags to associate with the project
   */
  tags?: Array<UpdateTrackerProjectTag> | null | undefined;
};

export type UpdateTrackerProjectRequest = {
  id: string;
  requestBody?: UpdateTrackerProjectRequestBody | undefined;
};

/** @internal */
export const UpdateTrackerProjectStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateTrackerProjectStatus
> = z.nativeEnum(UpdateTrackerProjectStatus);

/** @internal */
export const UpdateTrackerProjectStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateTrackerProjectStatus
> = UpdateTrackerProjectStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTrackerProjectStatus$ {
  /** @deprecated use `UpdateTrackerProjectStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateTrackerProjectStatus$inboundSchema;
  /** @deprecated use `UpdateTrackerProjectStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateTrackerProjectStatus$outboundSchema;
}

/** @internal */
export const UpdateTrackerProjectTag$inboundSchema: z.ZodType<
  UpdateTrackerProjectTag,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  value: z.string(),
});

/** @internal */
export type UpdateTrackerProjectTag$Outbound = {
  id: string;
  value: string;
};

/** @internal */
export const UpdateTrackerProjectTag$outboundSchema: z.ZodType<
  UpdateTrackerProjectTag$Outbound,
  z.ZodTypeDef,
  UpdateTrackerProjectTag
> = z.object({
  id: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTrackerProjectTag$ {
  /** @deprecated use `UpdateTrackerProjectTag$inboundSchema` instead. */
  export const inboundSchema = UpdateTrackerProjectTag$inboundSchema;
  /** @deprecated use `UpdateTrackerProjectTag$outboundSchema` instead. */
  export const outboundSchema = UpdateTrackerProjectTag$outboundSchema;
  /** @deprecated use `UpdateTrackerProjectTag$Outbound` instead. */
  export type Outbound = UpdateTrackerProjectTag$Outbound;
}

export function updateTrackerProjectTagToJSON(
  updateTrackerProjectTag: UpdateTrackerProjectTag,
): string {
  return JSON.stringify(
    UpdateTrackerProjectTag$outboundSchema.parse(updateTrackerProjectTag),
  );
}

export function updateTrackerProjectTagFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTrackerProjectTag, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTrackerProjectTag$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTrackerProjectTag' from JSON`,
  );
}

/** @internal */
export const UpdateTrackerProjectRequestBody$inboundSchema: z.ZodType<
  UpdateTrackerProjectRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  estimate: z.nullable(z.number()).optional(),
  billable: z.nullable(z.boolean().default(false)),
  rate: z.nullable(z.number()).optional(),
  currency: z.nullable(z.string()).optional(),
  status: UpdateTrackerProjectStatus$inboundSchema.optional(),
  customerId: z.nullable(z.string()).optional(),
  tags: z.nullable(z.array(z.lazy(() => UpdateTrackerProjectTag$inboundSchema)))
    .optional(),
});

/** @internal */
export type UpdateTrackerProjectRequestBody$Outbound = {
  name: string;
  description?: string | null | undefined;
  estimate?: number | null | undefined;
  billable: boolean | null;
  rate?: number | null | undefined;
  currency?: string | null | undefined;
  status?: string | undefined;
  customerId?: string | null | undefined;
  tags?: Array<UpdateTrackerProjectTag$Outbound> | null | undefined;
};

/** @internal */
export const UpdateTrackerProjectRequestBody$outboundSchema: z.ZodType<
  UpdateTrackerProjectRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateTrackerProjectRequestBody
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  estimate: z.nullable(z.number()).optional(),
  billable: z.nullable(z.boolean().default(false)),
  rate: z.nullable(z.number()).optional(),
  currency: z.nullable(z.string()).optional(),
  status: UpdateTrackerProjectStatus$outboundSchema.optional(),
  customerId: z.nullable(z.string()).optional(),
  tags: z.nullable(
    z.array(z.lazy(() => UpdateTrackerProjectTag$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTrackerProjectRequestBody$ {
  /** @deprecated use `UpdateTrackerProjectRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateTrackerProjectRequestBody$inboundSchema;
  /** @deprecated use `UpdateTrackerProjectRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateTrackerProjectRequestBody$outboundSchema;
  /** @deprecated use `UpdateTrackerProjectRequestBody$Outbound` instead. */
  export type Outbound = UpdateTrackerProjectRequestBody$Outbound;
}

export function updateTrackerProjectRequestBodyToJSON(
  updateTrackerProjectRequestBody: UpdateTrackerProjectRequestBody,
): string {
  return JSON.stringify(
    UpdateTrackerProjectRequestBody$outboundSchema.parse(
      updateTrackerProjectRequestBody,
    ),
  );
}

export function updateTrackerProjectRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTrackerProjectRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTrackerProjectRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTrackerProjectRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateTrackerProjectRequest$inboundSchema: z.ZodType<
  UpdateTrackerProjectRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => UpdateTrackerProjectRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateTrackerProjectRequest$Outbound = {
  id: string;
  RequestBody?: UpdateTrackerProjectRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateTrackerProjectRequest$outboundSchema: z.ZodType<
  UpdateTrackerProjectRequest$Outbound,
  z.ZodTypeDef,
  UpdateTrackerProjectRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => UpdateTrackerProjectRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTrackerProjectRequest$ {
  /** @deprecated use `UpdateTrackerProjectRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateTrackerProjectRequest$inboundSchema;
  /** @deprecated use `UpdateTrackerProjectRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateTrackerProjectRequest$outboundSchema;
  /** @deprecated use `UpdateTrackerProjectRequest$Outbound` instead. */
  export type Outbound = UpdateTrackerProjectRequest$Outbound;
}

export function updateTrackerProjectRequestToJSON(
  updateTrackerProjectRequest: UpdateTrackerProjectRequest,
): string {
  return JSON.stringify(
    UpdateTrackerProjectRequest$outboundSchema.parse(
      updateTrackerProjectRequest,
    ),
  );
}

export function updateTrackerProjectRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTrackerProjectRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTrackerProjectRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTrackerProjectRequest' from JSON`,
  );
}
