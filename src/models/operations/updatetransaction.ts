/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Status of the transaction.
 */
export const UpdateTransactionStatus = {
  Pending: "pending",
  Archived: "archived",
  Completed: "completed",
  Posted: "posted",
  Excluded: "excluded",
} as const;
/**
 * Status of the transaction.
 */
export type UpdateTransactionStatus = ClosedEnum<
  typeof UpdateTransactionStatus
>;

/**
 * Recurring frequency of the transaction.
 */
export const UpdateTransactionFrequency = {
  Weekly: "weekly",
  Monthly: "monthly",
  Annually: "annually",
  Irregular: "irregular",
} as const;
/**
 * Recurring frequency of the transaction.
 */
export type UpdateTransactionFrequency = ClosedEnum<
  typeof UpdateTransactionFrequency
>;

export type UpdateTransactionRequestBody = {
  /**
   * Category slug for the transaction.
   */
  categorySlug?: string | null | undefined;
  /**
   * Status of the transaction.
   */
  status?: UpdateTransactionStatus | null | undefined;
  /**
   * Whether the transaction is internal.
   */
  internal?: boolean | undefined;
  /**
   * Whether the transaction is recurring.
   */
  recurring?: boolean | undefined;
  /**
   * Recurring frequency of the transaction.
   */
  frequency?: UpdateTransactionFrequency | null | undefined;
  /**
   * Note for the transaction.
   */
  note?: string | null | undefined;
  /**
   * Assigned user ID for the transaction.
   */
  assignedId?: string | null | undefined;
};

export type UpdateTransactionRequest = {
  id: string;
  requestBody?: UpdateTransactionRequestBody | undefined;
};

/** @internal */
export const UpdateTransactionStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateTransactionStatus
> = z.nativeEnum(UpdateTransactionStatus);

/** @internal */
export const UpdateTransactionStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateTransactionStatus
> = UpdateTransactionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTransactionStatus$ {
  /** @deprecated use `UpdateTransactionStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateTransactionStatus$inboundSchema;
  /** @deprecated use `UpdateTransactionStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateTransactionStatus$outboundSchema;
}

/** @internal */
export const UpdateTransactionFrequency$inboundSchema: z.ZodNativeEnum<
  typeof UpdateTransactionFrequency
> = z.nativeEnum(UpdateTransactionFrequency);

/** @internal */
export const UpdateTransactionFrequency$outboundSchema: z.ZodNativeEnum<
  typeof UpdateTransactionFrequency
> = UpdateTransactionFrequency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTransactionFrequency$ {
  /** @deprecated use `UpdateTransactionFrequency$inboundSchema` instead. */
  export const inboundSchema = UpdateTransactionFrequency$inboundSchema;
  /** @deprecated use `UpdateTransactionFrequency$outboundSchema` instead. */
  export const outboundSchema = UpdateTransactionFrequency$outboundSchema;
}

/** @internal */
export const UpdateTransactionRequestBody$inboundSchema: z.ZodType<
  UpdateTransactionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  categorySlug: z.nullable(z.string()).optional(),
  status: z.nullable(UpdateTransactionStatus$inboundSchema).optional(),
  internal: z.boolean().optional(),
  recurring: z.boolean().optional(),
  frequency: z.nullable(UpdateTransactionFrequency$inboundSchema).optional(),
  note: z.nullable(z.string()).optional(),
  assignedId: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateTransactionRequestBody$Outbound = {
  categorySlug?: string | null | undefined;
  status?: string | null | undefined;
  internal?: boolean | undefined;
  recurring?: boolean | undefined;
  frequency?: string | null | undefined;
  note?: string | null | undefined;
  assignedId?: string | null | undefined;
};

/** @internal */
export const UpdateTransactionRequestBody$outboundSchema: z.ZodType<
  UpdateTransactionRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateTransactionRequestBody
> = z.object({
  categorySlug: z.nullable(z.string()).optional(),
  status: z.nullable(UpdateTransactionStatus$outboundSchema).optional(),
  internal: z.boolean().optional(),
  recurring: z.boolean().optional(),
  frequency: z.nullable(UpdateTransactionFrequency$outboundSchema).optional(),
  note: z.nullable(z.string()).optional(),
  assignedId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTransactionRequestBody$ {
  /** @deprecated use `UpdateTransactionRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateTransactionRequestBody$inboundSchema;
  /** @deprecated use `UpdateTransactionRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateTransactionRequestBody$outboundSchema;
  /** @deprecated use `UpdateTransactionRequestBody$Outbound` instead. */
  export type Outbound = UpdateTransactionRequestBody$Outbound;
}

export function updateTransactionRequestBodyToJSON(
  updateTransactionRequestBody: UpdateTransactionRequestBody,
): string {
  return JSON.stringify(
    UpdateTransactionRequestBody$outboundSchema.parse(
      updateTransactionRequestBody,
    ),
  );
}

export function updateTransactionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTransactionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTransactionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTransactionRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateTransactionRequest$inboundSchema: z.ZodType<
  UpdateTransactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => UpdateTransactionRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateTransactionRequest$Outbound = {
  id: string;
  RequestBody?: UpdateTransactionRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateTransactionRequest$outboundSchema: z.ZodType<
  UpdateTransactionRequest$Outbound,
  z.ZodTypeDef,
  UpdateTransactionRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => UpdateTransactionRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTransactionRequest$ {
  /** @deprecated use `UpdateTransactionRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateTransactionRequest$inboundSchema;
  /** @deprecated use `UpdateTransactionRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateTransactionRequest$outboundSchema;
  /** @deprecated use `UpdateTransactionRequest$Outbound` instead. */
  export type Outbound = UpdateTransactionRequest$Outbound;
}

export function updateTransactionRequestToJSON(
  updateTransactionRequest: UpdateTransactionRequest,
): string {
  return JSON.stringify(
    UpdateTransactionRequest$outboundSchema.parse(updateTransactionRequest),
  );
}

export function updateTransactionRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTransactionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTransactionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTransactionRequest' from JSON`,
  );
}
