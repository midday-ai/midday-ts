/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Status to set for the transactions.
 */
export const UpdateTransactionsStatus = {
  Pending: "pending",
  Archived: "archived",
  Completed: "completed",
  Posted: "posted",
  Excluded: "excluded",
} as const;
/**
 * Status to set for the transactions.
 */
export type UpdateTransactionsStatus = ClosedEnum<
  typeof UpdateTransactionsStatus
>;

/**
 * Recurring frequency to set for the transactions.
 */
export const UpdateTransactionsFrequency = {
  Weekly: "weekly",
  Monthly: "monthly",
  Annually: "annually",
  Irregular: "irregular",
} as const;
/**
 * Recurring frequency to set for the transactions.
 */
export type UpdateTransactionsFrequency = ClosedEnum<
  typeof UpdateTransactionsFrequency
>;

export type UpdateTransactionsRequest = {
  /**
   * Array of transaction IDs to update.
   */
  ids: Array<string>;
  /**
   * Category slug for the transactions.
   */
  categorySlug?: string | null | undefined;
  /**
   * Status to set for the transactions.
   */
  status?: UpdateTransactionsStatus | null | undefined;
  /**
   * Recurring frequency to set for the transactions.
   */
  frequency?: UpdateTransactionsFrequency | null | undefined;
  /**
   * Whether the transactions are internal.
   */
  internal?: boolean | undefined;
  /**
   * Note to set for the transactions.
   */
  note?: string | null | undefined;
  /**
   * Assigned user ID for the transactions.
   */
  assignedId?: string | null | undefined;
  /**
   * Whether the transactions are recurring.
   */
  recurring?: boolean | undefined;
  /**
   * Tag ID to set for the transactions.
   */
  tagId?: string | null | undefined;
};

/**
 * Pagination metadata for the transactions response
 */
export type UpdateTransactionsMeta = {
  /**
   * Cursor for the next page of results, undefined if no more pages
   */
  cursor?: string | undefined;
  /**
   * Whether there are more transactions available on the previous page
   */
  hasPreviousPage: boolean;
  /**
   * Whether there are more transactions available on the next page
   */
  hasNextPage: boolean;
};

/**
 * Transactions updated
 */
export type UpdateTransactionsResponse = {
  /**
   * Pagination metadata for the transactions response
   */
  meta: UpdateTransactionsMeta;
  /**
   * Array of transactions matching the query criteria
   */
  data: Array<models.TransactionResponse>;
};

/** @internal */
export const UpdateTransactionsStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateTransactionsStatus
> = z.nativeEnum(UpdateTransactionsStatus);

/** @internal */
export const UpdateTransactionsStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateTransactionsStatus
> = UpdateTransactionsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTransactionsStatus$ {
  /** @deprecated use `UpdateTransactionsStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateTransactionsStatus$inboundSchema;
  /** @deprecated use `UpdateTransactionsStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateTransactionsStatus$outboundSchema;
}

/** @internal */
export const UpdateTransactionsFrequency$inboundSchema: z.ZodNativeEnum<
  typeof UpdateTransactionsFrequency
> = z.nativeEnum(UpdateTransactionsFrequency);

/** @internal */
export const UpdateTransactionsFrequency$outboundSchema: z.ZodNativeEnum<
  typeof UpdateTransactionsFrequency
> = UpdateTransactionsFrequency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTransactionsFrequency$ {
  /** @deprecated use `UpdateTransactionsFrequency$inboundSchema` instead. */
  export const inboundSchema = UpdateTransactionsFrequency$inboundSchema;
  /** @deprecated use `UpdateTransactionsFrequency$outboundSchema` instead. */
  export const outboundSchema = UpdateTransactionsFrequency$outboundSchema;
}

/** @internal */
export const UpdateTransactionsRequest$inboundSchema: z.ZodType<
  UpdateTransactionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ids: z.array(z.string()),
  categorySlug: z.nullable(z.string()).optional(),
  status: z.nullable(UpdateTransactionsStatus$inboundSchema).optional(),
  frequency: z.nullable(UpdateTransactionsFrequency$inboundSchema).optional(),
  internal: z.boolean().optional(),
  note: z.nullable(z.string()).optional(),
  assignedId: z.nullable(z.string()).optional(),
  recurring: z.boolean().optional(),
  tagId: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateTransactionsRequest$Outbound = {
  ids: Array<string>;
  categorySlug?: string | null | undefined;
  status?: string | null | undefined;
  frequency?: string | null | undefined;
  internal?: boolean | undefined;
  note?: string | null | undefined;
  assignedId?: string | null | undefined;
  recurring?: boolean | undefined;
  tagId?: string | null | undefined;
};

/** @internal */
export const UpdateTransactionsRequest$outboundSchema: z.ZodType<
  UpdateTransactionsRequest$Outbound,
  z.ZodTypeDef,
  UpdateTransactionsRequest
> = z.object({
  ids: z.array(z.string()),
  categorySlug: z.nullable(z.string()).optional(),
  status: z.nullable(UpdateTransactionsStatus$outboundSchema).optional(),
  frequency: z.nullable(UpdateTransactionsFrequency$outboundSchema).optional(),
  internal: z.boolean().optional(),
  note: z.nullable(z.string()).optional(),
  assignedId: z.nullable(z.string()).optional(),
  recurring: z.boolean().optional(),
  tagId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTransactionsRequest$ {
  /** @deprecated use `UpdateTransactionsRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateTransactionsRequest$inboundSchema;
  /** @deprecated use `UpdateTransactionsRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateTransactionsRequest$outboundSchema;
  /** @deprecated use `UpdateTransactionsRequest$Outbound` instead. */
  export type Outbound = UpdateTransactionsRequest$Outbound;
}

export function updateTransactionsRequestToJSON(
  updateTransactionsRequest: UpdateTransactionsRequest,
): string {
  return JSON.stringify(
    UpdateTransactionsRequest$outboundSchema.parse(updateTransactionsRequest),
  );
}

export function updateTransactionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTransactionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTransactionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTransactionsRequest' from JSON`,
  );
}

/** @internal */
export const UpdateTransactionsMeta$inboundSchema: z.ZodType<
  UpdateTransactionsMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  cursor: z.string().optional(),
  hasPreviousPage: z.boolean(),
  hasNextPage: z.boolean(),
});

/** @internal */
export type UpdateTransactionsMeta$Outbound = {
  cursor?: string | undefined;
  hasPreviousPage: boolean;
  hasNextPage: boolean;
};

/** @internal */
export const UpdateTransactionsMeta$outboundSchema: z.ZodType<
  UpdateTransactionsMeta$Outbound,
  z.ZodTypeDef,
  UpdateTransactionsMeta
> = z.object({
  cursor: z.string().optional(),
  hasPreviousPage: z.boolean(),
  hasNextPage: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTransactionsMeta$ {
  /** @deprecated use `UpdateTransactionsMeta$inboundSchema` instead. */
  export const inboundSchema = UpdateTransactionsMeta$inboundSchema;
  /** @deprecated use `UpdateTransactionsMeta$outboundSchema` instead. */
  export const outboundSchema = UpdateTransactionsMeta$outboundSchema;
  /** @deprecated use `UpdateTransactionsMeta$Outbound` instead. */
  export type Outbound = UpdateTransactionsMeta$Outbound;
}

export function updateTransactionsMetaToJSON(
  updateTransactionsMeta: UpdateTransactionsMeta,
): string {
  return JSON.stringify(
    UpdateTransactionsMeta$outboundSchema.parse(updateTransactionsMeta),
  );
}

export function updateTransactionsMetaFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTransactionsMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTransactionsMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTransactionsMeta' from JSON`,
  );
}

/** @internal */
export const UpdateTransactionsResponse$inboundSchema: z.ZodType<
  UpdateTransactionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  meta: z.lazy(() => UpdateTransactionsMeta$inboundSchema),
  data: z.array(models.TransactionResponse$inboundSchema),
});

/** @internal */
export type UpdateTransactionsResponse$Outbound = {
  meta: UpdateTransactionsMeta$Outbound;
  data: Array<models.TransactionResponse$Outbound>;
};

/** @internal */
export const UpdateTransactionsResponse$outboundSchema: z.ZodType<
  UpdateTransactionsResponse$Outbound,
  z.ZodTypeDef,
  UpdateTransactionsResponse
> = z.object({
  meta: z.lazy(() => UpdateTransactionsMeta$outboundSchema),
  data: z.array(models.TransactionResponse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTransactionsResponse$ {
  /** @deprecated use `UpdateTransactionsResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateTransactionsResponse$inboundSchema;
  /** @deprecated use `UpdateTransactionsResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateTransactionsResponse$outboundSchema;
  /** @deprecated use `UpdateTransactionsResponse$Outbound` instead. */
  export type Outbound = UpdateTransactionsResponse$Outbound;
}

export function updateTransactionsResponseToJSON(
  updateTransactionsResponse: UpdateTransactionsResponse,
): string {
  return JSON.stringify(
    UpdateTransactionsResponse$outboundSchema.parse(updateTransactionsResponse),
  );
}

export function updateTransactionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTransactionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTransactionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTransactionsResponse' from JSON`,
  );
}
