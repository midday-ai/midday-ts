/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Type of metric
 */
export const ProfitMetaType = {
  Profit: "profit",
} as const;
/**
 * Type of metric
 */
export type ProfitMetaType = ClosedEnum<typeof ProfitMetaType>;

export type ProfitMeta = {
  /**
   * Type of metric
   */
  type: ProfitMetaType;
  /**
   * Currency code (ISO 4217)
   */
  currency: string;
};

/** @internal */
export const ProfitMetaType$inboundSchema: z.ZodNativeEnum<
  typeof ProfitMetaType
> = z.nativeEnum(ProfitMetaType);

/** @internal */
export const ProfitMetaType$outboundSchema: z.ZodNativeEnum<
  typeof ProfitMetaType
> = ProfitMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProfitMetaType$ {
  /** @deprecated use `ProfitMetaType$inboundSchema` instead. */
  export const inboundSchema = ProfitMetaType$inboundSchema;
  /** @deprecated use `ProfitMetaType$outboundSchema` instead. */
  export const outboundSchema = ProfitMetaType$outboundSchema;
}

/** @internal */
export const ProfitMeta$inboundSchema: z.ZodType<
  ProfitMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ProfitMetaType$inboundSchema,
  currency: z.string(),
});

/** @internal */
export type ProfitMeta$Outbound = {
  type: string;
  currency: string;
};

/** @internal */
export const ProfitMeta$outboundSchema: z.ZodType<
  ProfitMeta$Outbound,
  z.ZodTypeDef,
  ProfitMeta
> = z.object({
  type: ProfitMetaType$outboundSchema,
  currency: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProfitMeta$ {
  /** @deprecated use `ProfitMeta$inboundSchema` instead. */
  export const inboundSchema = ProfitMeta$inboundSchema;
  /** @deprecated use `ProfitMeta$outboundSchema` instead. */
  export const outboundSchema = ProfitMeta$outboundSchema;
  /** @deprecated use `ProfitMeta$Outbound` instead. */
  export type Outbound = ProfitMeta$Outbound;
}

export function profitMetaToJSON(profitMeta: ProfitMeta): string {
  return JSON.stringify(ProfitMeta$outboundSchema.parse(profitMeta));
}

export function profitMetaFromJSON(
  jsonString: string,
): SafeParseResult<ProfitMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProfitMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProfitMeta' from JSON`,
  );
}
