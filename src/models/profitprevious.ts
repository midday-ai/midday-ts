/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ProfitPrevious = {
  /**
   * Date for the previous value
   */
  date: string;
  /**
   * Previous value
   */
  value: number;
  /**
   * Currency code (ISO 4217)
   */
  currency: string;
};

/** @internal */
export const ProfitPrevious$inboundSchema: z.ZodType<
  ProfitPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  date: z.string(),
  value: z.number(),
  currency: z.string(),
});

/** @internal */
export type ProfitPrevious$Outbound = {
  date: string;
  value: number;
  currency: string;
};

/** @internal */
export const ProfitPrevious$outboundSchema: z.ZodType<
  ProfitPrevious$Outbound,
  z.ZodTypeDef,
  ProfitPrevious
> = z.object({
  date: z.string(),
  value: z.number(),
  currency: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProfitPrevious$ {
  /** @deprecated use `ProfitPrevious$inboundSchema` instead. */
  export const inboundSchema = ProfitPrevious$inboundSchema;
  /** @deprecated use `ProfitPrevious$outboundSchema` instead. */
  export const outboundSchema = ProfitPrevious$outboundSchema;
  /** @deprecated use `ProfitPrevious$Outbound` instead. */
  export type Outbound = ProfitPrevious$Outbound;
}

export function profitPreviousToJSON(profitPrevious: ProfitPrevious): string {
  return JSON.stringify(ProfitPrevious$outboundSchema.parse(profitPrevious));
}

export function profitPreviousFromJSON(
  jsonString: string,
): SafeParseResult<ProfitPrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProfitPrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProfitPrevious' from JSON`,
  );
}
