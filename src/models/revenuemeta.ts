/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Type of metric
 */
export const RevenueMetaType = {
  Revenue: "revenue",
} as const;
/**
 * Type of metric
 */
export type RevenueMetaType = ClosedEnum<typeof RevenueMetaType>;

export type RevenueMeta = {
  /**
   * Type of metric
   */
  type: RevenueMetaType;
  /**
   * Currency code (ISO 4217)
   */
  currency: string;
};

/** @internal */
export const RevenueMetaType$inboundSchema: z.ZodNativeEnum<
  typeof RevenueMetaType
> = z.nativeEnum(RevenueMetaType);

/** @internal */
export const RevenueMetaType$outboundSchema: z.ZodNativeEnum<
  typeof RevenueMetaType
> = RevenueMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RevenueMetaType$ {
  /** @deprecated use `RevenueMetaType$inboundSchema` instead. */
  export const inboundSchema = RevenueMetaType$inboundSchema;
  /** @deprecated use `RevenueMetaType$outboundSchema` instead. */
  export const outboundSchema = RevenueMetaType$outboundSchema;
}

/** @internal */
export const RevenueMeta$inboundSchema: z.ZodType<
  RevenueMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RevenueMetaType$inboundSchema,
  currency: z.string(),
});

/** @internal */
export type RevenueMeta$Outbound = {
  type: string;
  currency: string;
};

/** @internal */
export const RevenueMeta$outboundSchema: z.ZodType<
  RevenueMeta$Outbound,
  z.ZodTypeDef,
  RevenueMeta
> = z.object({
  type: RevenueMetaType$outboundSchema,
  currency: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RevenueMeta$ {
  /** @deprecated use `RevenueMeta$inboundSchema` instead. */
  export const inboundSchema = RevenueMeta$inboundSchema;
  /** @deprecated use `RevenueMeta$outboundSchema` instead. */
  export const outboundSchema = RevenueMeta$outboundSchema;
  /** @deprecated use `RevenueMeta$Outbound` instead. */
  export type Outbound = RevenueMeta$Outbound;
}

export function revenueMetaToJSON(revenueMeta: RevenueMeta): string {
  return JSON.stringify(RevenueMeta$outboundSchema.parse(revenueMeta));
}

export function revenueMetaFromJSON(
  jsonString: string,
): SafeParseResult<RevenueMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RevenueMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RevenueMeta' from JSON`,
  );
}
