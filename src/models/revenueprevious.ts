/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type RevenuePrevious = {
  /**
   * Date for the previous value
   */
  date: string;
  /**
   * Previous value
   */
  value: number;
  /**
   * Currency code (ISO 4217)
   */
  currency: string;
};

/** @internal */
export const RevenuePrevious$inboundSchema: z.ZodType<
  RevenuePrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  date: z.string(),
  value: z.number(),
  currency: z.string(),
});

/** @internal */
export type RevenuePrevious$Outbound = {
  date: string;
  value: number;
  currency: string;
};

/** @internal */
export const RevenuePrevious$outboundSchema: z.ZodType<
  RevenuePrevious$Outbound,
  z.ZodTypeDef,
  RevenuePrevious
> = z.object({
  date: z.string(),
  value: z.number(),
  currency: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RevenuePrevious$ {
  /** @deprecated use `RevenuePrevious$inboundSchema` instead. */
  export const inboundSchema = RevenuePrevious$inboundSchema;
  /** @deprecated use `RevenuePrevious$outboundSchema` instead. */
  export const outboundSchema = RevenuePrevious$outboundSchema;
  /** @deprecated use `RevenuePrevious$Outbound` instead. */
  export type Outbound = RevenuePrevious$Outbound;
}

export function revenuePreviousToJSON(
  revenuePrevious: RevenuePrevious,
): string {
  return JSON.stringify(RevenuePrevious$outboundSchema.parse(revenuePrevious));
}

export function revenuePreviousFromJSON(
  jsonString: string,
): SafeParseResult<RevenuePrevious, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RevenuePrevious$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RevenuePrevious' from JSON`,
  );
}
