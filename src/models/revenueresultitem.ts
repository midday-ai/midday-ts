/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  RevenueCurrent,
  RevenueCurrent$inboundSchema,
  RevenueCurrent$Outbound,
  RevenueCurrent$outboundSchema,
} from "./revenuecurrent.js";
import {
  RevenuePercentage,
  RevenuePercentage$inboundSchema,
  RevenuePercentage$Outbound,
  RevenuePercentage$outboundSchema,
} from "./revenuepercentage.js";
import {
  RevenuePrevious,
  RevenuePrevious$inboundSchema,
  RevenuePrevious$Outbound,
  RevenuePrevious$outboundSchema,
} from "./revenueprevious.js";

export type RevenueResultItem = {
  /**
   * Date for the metric (ISO 8601)
   */
  date: string;
  percentage: RevenuePercentage;
  current: RevenueCurrent;
  previous: RevenuePrevious;
};

/** @internal */
export const RevenueResultItem$inboundSchema: z.ZodType<
  RevenueResultItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  date: z.string(),
  percentage: RevenuePercentage$inboundSchema,
  current: RevenueCurrent$inboundSchema,
  previous: RevenuePrevious$inboundSchema,
});

/** @internal */
export type RevenueResultItem$Outbound = {
  date: string;
  percentage: RevenuePercentage$Outbound;
  current: RevenueCurrent$Outbound;
  previous: RevenuePrevious$Outbound;
};

/** @internal */
export const RevenueResultItem$outboundSchema: z.ZodType<
  RevenueResultItem$Outbound,
  z.ZodTypeDef,
  RevenueResultItem
> = z.object({
  date: z.string(),
  percentage: RevenuePercentage$outboundSchema,
  current: RevenueCurrent$outboundSchema,
  previous: RevenuePrevious$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RevenueResultItem$ {
  /** @deprecated use `RevenueResultItem$inboundSchema` instead. */
  export const inboundSchema = RevenueResultItem$inboundSchema;
  /** @deprecated use `RevenueResultItem$outboundSchema` instead. */
  export const outboundSchema = RevenueResultItem$outboundSchema;
  /** @deprecated use `RevenueResultItem$Outbound` instead. */
  export type Outbound = RevenueResultItem$Outbound;
}

export function revenueResultItemToJSON(
  revenueResultItem: RevenueResultItem,
): string {
  return JSON.stringify(
    RevenueResultItem$outboundSchema.parse(revenueResultItem),
  );
}

export function revenueResultItemFromJSON(
  jsonString: string,
): SafeParseResult<RevenueResultItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RevenueResultItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RevenueResultItem' from JSON`,
  );
}
