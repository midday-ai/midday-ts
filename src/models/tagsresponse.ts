/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TagResponse,
  TagResponse$inboundSchema,
  TagResponse$Outbound,
  TagResponse$outboundSchema,
} from "./tagresponse.js";

export type TagsResponse = {
  /**
   * List of tags.
   */
  data: Array<TagResponse>;
};

/** @internal */
export const TagsResponse$inboundSchema: z.ZodType<
  TagsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(TagResponse$inboundSchema),
});

/** @internal */
export type TagsResponse$Outbound = {
  data: Array<TagResponse$Outbound>;
};

/** @internal */
export const TagsResponse$outboundSchema: z.ZodType<
  TagsResponse$Outbound,
  z.ZodTypeDef,
  TagsResponse
> = z.object({
  data: z.array(TagResponse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TagsResponse$ {
  /** @deprecated use `TagsResponse$inboundSchema` instead. */
  export const inboundSchema = TagsResponse$inboundSchema;
  /** @deprecated use `TagsResponse$outboundSchema` instead. */
  export const outboundSchema = TagsResponse$outboundSchema;
  /** @deprecated use `TagsResponse$Outbound` instead. */
  export type Outbound = TagsResponse$Outbound;
}

export function tagsResponseToJSON(tagsResponse: TagsResponse): string {
  return JSON.stringify(TagsResponse$outboundSchema.parse(tagsResponse));
}

export function tagsResponseFromJSON(
  jsonString: string,
): SafeParseResult<TagsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TagsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TagsResponse' from JSON`,
  );
}
