/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Current status of the project
 */
export const TrackerProjectResponseStatus = {
  InProgress: "in_progress",
  Completed: "completed",
} as const;
/**
 * Current status of the project
 */
export type TrackerProjectResponseStatus = ClosedEnum<
  typeof TrackerProjectResponseStatus
>;

/**
 * Customer information associated with the project
 */
export type Customer = {
  /**
   * Unique identifier of the customer
   */
  id: string;
  /**
   * Name of the customer or organization
   */
  name: string;
  /**
   * Website URL of the customer
   */
  website: string;
};

export type TrackerProjectResponseTag = {
  /**
   * Unique identifier of the tag
   */
  id: string;
  /**
   * Display name of the tag
   */
  name: string;
};

export type User = {
  /**
   * Unique identifier of the user
   */
  id: string;
  /**
   * Full name of the user
   */
  fullName: string;
  /**
   * URL to the user's avatar image
   */
  avatarUrl: string;
};

export type TrackerProjectResponse = {
  /**
   * Unique identifier of the project
   */
  id: string;
  /**
   * Name of the project
   */
  name: string;
  /**
   * Detailed description of the project
   */
  description: string | null;
  /**
   * Current status of the project
   */
  status: TrackerProjectResponseStatus;
  /**
   * Estimated total hours required to complete the project
   */
  estimate: number | null;
  /**
   * Currency code for the project rate in ISO 4217 format
   */
  currency: string | null;
  /**
   * Date and time when the project was created in ISO 8601 format
   */
  createdAt: string;
  /**
   * Total tracked time for the project in seconds
   */
  totalDuration: number | null;
  /**
   * Total monetary amount earned from the project
   */
  totalAmount: number;
  /**
   * Customer information associated with the project
   */
  customer: Customer | null;
  /**
   * Array of tags associated with the project
   */
  tags: Array<TrackerProjectResponseTag>;
  /**
   * Array of users assigned to work on the project
   */
  users: Array<User> | null;
};

/** @internal */
export const TrackerProjectResponseStatus$inboundSchema: z.ZodNativeEnum<
  typeof TrackerProjectResponseStatus
> = z.nativeEnum(TrackerProjectResponseStatus);

/** @internal */
export const TrackerProjectResponseStatus$outboundSchema: z.ZodNativeEnum<
  typeof TrackerProjectResponseStatus
> = TrackerProjectResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrackerProjectResponseStatus$ {
  /** @deprecated use `TrackerProjectResponseStatus$inboundSchema` instead. */
  export const inboundSchema = TrackerProjectResponseStatus$inboundSchema;
  /** @deprecated use `TrackerProjectResponseStatus$outboundSchema` instead. */
  export const outboundSchema = TrackerProjectResponseStatus$outboundSchema;
}

/** @internal */
export const Customer$inboundSchema: z.ZodType<
  Customer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  website: z.string(),
});

/** @internal */
export type Customer$Outbound = {
  id: string;
  name: string;
  website: string;
};

/** @internal */
export const Customer$outboundSchema: z.ZodType<
  Customer$Outbound,
  z.ZodTypeDef,
  Customer
> = z.object({
  id: z.string(),
  name: z.string(),
  website: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Customer$ {
  /** @deprecated use `Customer$inboundSchema` instead. */
  export const inboundSchema = Customer$inboundSchema;
  /** @deprecated use `Customer$outboundSchema` instead. */
  export const outboundSchema = Customer$outboundSchema;
  /** @deprecated use `Customer$Outbound` instead. */
  export type Outbound = Customer$Outbound;
}

export function customerToJSON(customer: Customer): string {
  return JSON.stringify(Customer$outboundSchema.parse(customer));
}

export function customerFromJSON(
  jsonString: string,
): SafeParseResult<Customer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Customer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Customer' from JSON`,
  );
}

/** @internal */
export const TrackerProjectResponseTag$inboundSchema: z.ZodType<
  TrackerProjectResponseTag,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
});

/** @internal */
export type TrackerProjectResponseTag$Outbound = {
  id: string;
  name: string;
};

/** @internal */
export const TrackerProjectResponseTag$outboundSchema: z.ZodType<
  TrackerProjectResponseTag$Outbound,
  z.ZodTypeDef,
  TrackerProjectResponseTag
> = z.object({
  id: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrackerProjectResponseTag$ {
  /** @deprecated use `TrackerProjectResponseTag$inboundSchema` instead. */
  export const inboundSchema = TrackerProjectResponseTag$inboundSchema;
  /** @deprecated use `TrackerProjectResponseTag$outboundSchema` instead. */
  export const outboundSchema = TrackerProjectResponseTag$outboundSchema;
  /** @deprecated use `TrackerProjectResponseTag$Outbound` instead. */
  export type Outbound = TrackerProjectResponseTag$Outbound;
}

export function trackerProjectResponseTagToJSON(
  trackerProjectResponseTag: TrackerProjectResponseTag,
): string {
  return JSON.stringify(
    TrackerProjectResponseTag$outboundSchema.parse(trackerProjectResponseTag),
  );
}

export function trackerProjectResponseTagFromJSON(
  jsonString: string,
): SafeParseResult<TrackerProjectResponseTag, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TrackerProjectResponseTag$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TrackerProjectResponseTag' from JSON`,
  );
}

/** @internal */
export const User$inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    fullName: z.string(),
    avatarUrl: z.string(),
  });

/** @internal */
export type User$Outbound = {
  id: string;
  fullName: string;
  avatarUrl: string;
};

/** @internal */
export const User$outboundSchema: z.ZodType<User$Outbound, z.ZodTypeDef, User> =
  z.object({
    id: z.string(),
    fullName: z.string(),
    avatarUrl: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace User$ {
  /** @deprecated use `User$inboundSchema` instead. */
  export const inboundSchema = User$inboundSchema;
  /** @deprecated use `User$outboundSchema` instead. */
  export const outboundSchema = User$outboundSchema;
  /** @deprecated use `User$Outbound` instead. */
  export type Outbound = User$Outbound;
}

export function userToJSON(user: User): string {
  return JSON.stringify(User$outboundSchema.parse(user));
}

export function userFromJSON(
  jsonString: string,
): SafeParseResult<User, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => User$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'User' from JSON`,
  );
}

/** @internal */
export const TrackerProjectResponse$inboundSchema: z.ZodType<
  TrackerProjectResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  status: TrackerProjectResponseStatus$inboundSchema,
  estimate: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  createdAt: z.string(),
  totalDuration: z.nullable(z.number()),
  totalAmount: z.number(),
  customer: z.nullable(z.lazy(() => Customer$inboundSchema)),
  tags: z.array(z.lazy(() => TrackerProjectResponseTag$inboundSchema)),
  users: z.nullable(z.array(z.lazy(() => User$inboundSchema))),
});

/** @internal */
export type TrackerProjectResponse$Outbound = {
  id: string;
  name: string;
  description: string | null;
  status: string;
  estimate: number | null;
  currency: string | null;
  createdAt: string;
  totalDuration: number | null;
  totalAmount: number;
  customer: Customer$Outbound | null;
  tags: Array<TrackerProjectResponseTag$Outbound>;
  users: Array<User$Outbound> | null;
};

/** @internal */
export const TrackerProjectResponse$outboundSchema: z.ZodType<
  TrackerProjectResponse$Outbound,
  z.ZodTypeDef,
  TrackerProjectResponse
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  status: TrackerProjectResponseStatus$outboundSchema,
  estimate: z.nullable(z.number()),
  currency: z.nullable(z.string()),
  createdAt: z.string(),
  totalDuration: z.nullable(z.number()),
  totalAmount: z.number(),
  customer: z.nullable(z.lazy(() => Customer$outboundSchema)),
  tags: z.array(z.lazy(() => TrackerProjectResponseTag$outboundSchema)),
  users: z.nullable(z.array(z.lazy(() => User$outboundSchema))),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrackerProjectResponse$ {
  /** @deprecated use `TrackerProjectResponse$inboundSchema` instead. */
  export const inboundSchema = TrackerProjectResponse$inboundSchema;
  /** @deprecated use `TrackerProjectResponse$outboundSchema` instead. */
  export const outboundSchema = TrackerProjectResponse$outboundSchema;
  /** @deprecated use `TrackerProjectResponse$Outbound` instead. */
  export type Outbound = TrackerProjectResponse$Outbound;
}

export function trackerProjectResponseToJSON(
  trackerProjectResponse: TrackerProjectResponse,
): string {
  return JSON.stringify(
    TrackerProjectResponse$outboundSchema.parse(trackerProjectResponse),
  );
}

export function trackerProjectResponseFromJSON(
  jsonString: string,
): SafeParseResult<TrackerProjectResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TrackerProjectResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TrackerProjectResponse' from JSON`,
  );
}
