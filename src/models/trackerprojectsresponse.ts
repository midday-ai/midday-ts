/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TrackerProjectResponse,
  TrackerProjectResponse$inboundSchema,
  TrackerProjectResponse$Outbound,
  TrackerProjectResponse$outboundSchema,
} from "./trackerprojectresponse.js";

/**
 * Pagination metadata for the projects response
 */
export type TrackerProjectsResponseMeta = {
  /**
   * Whether there are more projects available on the next page
   */
  hasNextPage: boolean;
  /**
   * Whether there are more projects available on the previous page
   */
  hasPreviousPage: boolean;
};

export type TrackerProjectsResponse = {
  /**
   * Pagination metadata for the projects response
   */
  meta: TrackerProjectsResponseMeta;
  /**
   * Array of tracker projects matching the query criteria
   */
  data: Array<TrackerProjectResponse>;
};

/** @internal */
export const TrackerProjectsResponseMeta$inboundSchema: z.ZodType<
  TrackerProjectsResponseMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  hasNextPage: z.boolean(),
  hasPreviousPage: z.boolean(),
});

/** @internal */
export type TrackerProjectsResponseMeta$Outbound = {
  hasNextPage: boolean;
  hasPreviousPage: boolean;
};

/** @internal */
export const TrackerProjectsResponseMeta$outboundSchema: z.ZodType<
  TrackerProjectsResponseMeta$Outbound,
  z.ZodTypeDef,
  TrackerProjectsResponseMeta
> = z.object({
  hasNextPage: z.boolean(),
  hasPreviousPage: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrackerProjectsResponseMeta$ {
  /** @deprecated use `TrackerProjectsResponseMeta$inboundSchema` instead. */
  export const inboundSchema = TrackerProjectsResponseMeta$inboundSchema;
  /** @deprecated use `TrackerProjectsResponseMeta$outboundSchema` instead. */
  export const outboundSchema = TrackerProjectsResponseMeta$outboundSchema;
  /** @deprecated use `TrackerProjectsResponseMeta$Outbound` instead. */
  export type Outbound = TrackerProjectsResponseMeta$Outbound;
}

export function trackerProjectsResponseMetaToJSON(
  trackerProjectsResponseMeta: TrackerProjectsResponseMeta,
): string {
  return JSON.stringify(
    TrackerProjectsResponseMeta$outboundSchema.parse(
      trackerProjectsResponseMeta,
    ),
  );
}

export function trackerProjectsResponseMetaFromJSON(
  jsonString: string,
): SafeParseResult<TrackerProjectsResponseMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TrackerProjectsResponseMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TrackerProjectsResponseMeta' from JSON`,
  );
}

/** @internal */
export const TrackerProjectsResponse$inboundSchema: z.ZodType<
  TrackerProjectsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  meta: z.lazy(() => TrackerProjectsResponseMeta$inboundSchema),
  data: z.array(TrackerProjectResponse$inboundSchema),
});

/** @internal */
export type TrackerProjectsResponse$Outbound = {
  meta: TrackerProjectsResponseMeta$Outbound;
  data: Array<TrackerProjectResponse$Outbound>;
};

/** @internal */
export const TrackerProjectsResponse$outboundSchema: z.ZodType<
  TrackerProjectsResponse$Outbound,
  z.ZodTypeDef,
  TrackerProjectsResponse
> = z.object({
  meta: z.lazy(() => TrackerProjectsResponseMeta$outboundSchema),
  data: z.array(TrackerProjectResponse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TrackerProjectsResponse$ {
  /** @deprecated use `TrackerProjectsResponse$inboundSchema` instead. */
  export const inboundSchema = TrackerProjectsResponse$inboundSchema;
  /** @deprecated use `TrackerProjectsResponse$outboundSchema` instead. */
  export const outboundSchema = TrackerProjectsResponse$outboundSchema;
  /** @deprecated use `TrackerProjectsResponse$Outbound` instead. */
  export type Outbound = TrackerProjectsResponse$Outbound;
}

export function trackerProjectsResponseToJSON(
  trackerProjectsResponse: TrackerProjectsResponse,
): string {
  return JSON.stringify(
    TrackerProjectsResponse$outboundSchema.parse(trackerProjectsResponse),
  );
}

export function trackerProjectsResponseFromJSON(
  jsonString: string,
): SafeParseResult<TrackerProjectsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TrackerProjectsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TrackerProjectsResponse' from JSON`,
  );
}
