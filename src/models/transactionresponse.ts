/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Category information assigned to the transaction for organization
 */
export type Category = {
  /**
   * Unique identifier of the category
   */
  id: string;
  /**
   * Display name of the category
   */
  name: string;
  /**
   * Hex color code associated with the category for UI display
   */
  color: string;
  /**
   * URL-friendly slug of the category
   */
  slug: string;
};

/**
 * Bank connection information associated with the account
 */
export type Connection = {
  /**
   * Unique identifier of the bank connection
   */
  id: string;
  /**
   * Name of the bank institution
   */
  name: string;
  /**
   * URL to the bank institution's logo image
   */
  logoUrl: string | null;
};

/**
 * Bank account information associated with the transaction
 */
export type Account = {
  /**
   * Unique identifier of the bank account
   */
  id: string;
  /**
   * Display name of the bank account
   */
  name: string;
  /**
   * Currency of the bank account in ISO 4217 format
   */
  currency: string;
  /**
   * Bank connection information associated with the account
   */
  connection: Connection;
};

export type TransactionResponseTag = {
  /**
   * Unique identifier of the tag
   */
  id: string;
  /**
   * Display name of the tag
   */
  name: string | null;
};

export type Attachment = {
  /**
   * Unique identifier of the attachment
   */
  id: string;
  /**
   * Array of path segments for the attachment file storage location
   */
  path: Array<string>;
  /**
   * Size of the attachment file in bytes
   */
  size: number;
  /**
   * MIME type of the attachment file
   */
  type: string;
  /**
   * Original filename of the attachment when uploaded
   */
  filename: string | null;
};

export type TransactionResponse = {
  /**
   * Unique identifier of the transaction
   */
  id: string;
  /**
   * Name or description of the transaction
   */
  name: string;
  /**
   * Monetary amount of the transaction
   */
  amount: number;
  /**
   * Currency code of the transaction in ISO 4217 format
   */
  currency: string;
  /**
   * Date and time of the transaction in ISO 8601 format
   */
  date: string;
  /**
   * Category information assigned to the transaction for organization
   */
  category: Category | null;
  /**
   * Current status of the transaction
   */
  status: string;
  /**
   * Whether the transaction is internal (between own accounts)
   */
  internal: boolean | null;
  /**
   * Whether the transaction is part of a recurring series
   */
  recurring: boolean | null;
  /**
   * Whether the transaction was created manually (via API/form) rather than imported from bank connections
   */
  manual: boolean | null;
  /**
   * Frequency of the recurring transaction if applicable (weekly, monthly, annually, irregular)
   */
  frequency: string | null;
  /**
   * Whether the transaction has been fulfilled or processed
   */
  isFulfilled: boolean;
  /**
   * Optional note or memo attached to the transaction
   */
  note: string | null;
  /**
   * Bank account information associated with the transaction
   */
  account: Account;
  /**
   * Array of tags associated with the transaction for categorization and filtering
   */
  tags: Array<TransactionResponseTag> | null;
  /**
   * Array of file attachments associated with the transaction (receipts, invoices, etc.)
   */
  attachments: Array<Attachment> | null;
};

/** @internal */
export const Category$inboundSchema: z.ZodType<
  Category,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  color: z.string(),
  slug: z.string(),
});

/** @internal */
export type Category$Outbound = {
  id: string;
  name: string;
  color: string;
  slug: string;
};

/** @internal */
export const Category$outboundSchema: z.ZodType<
  Category$Outbound,
  z.ZodTypeDef,
  Category
> = z.object({
  id: z.string(),
  name: z.string(),
  color: z.string(),
  slug: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Category$ {
  /** @deprecated use `Category$inboundSchema` instead. */
  export const inboundSchema = Category$inboundSchema;
  /** @deprecated use `Category$outboundSchema` instead. */
  export const outboundSchema = Category$outboundSchema;
  /** @deprecated use `Category$Outbound` instead. */
  export type Outbound = Category$Outbound;
}

export function categoryToJSON(category: Category): string {
  return JSON.stringify(Category$outboundSchema.parse(category));
}

export function categoryFromJSON(
  jsonString: string,
): SafeParseResult<Category, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Category$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Category' from JSON`,
  );
}

/** @internal */
export const Connection$inboundSchema: z.ZodType<
  Connection,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  logoUrl: z.nullable(z.string()),
});

/** @internal */
export type Connection$Outbound = {
  id: string;
  name: string;
  logoUrl: string | null;
};

/** @internal */
export const Connection$outboundSchema: z.ZodType<
  Connection$Outbound,
  z.ZodTypeDef,
  Connection
> = z.object({
  id: z.string(),
  name: z.string(),
  logoUrl: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Connection$ {
  /** @deprecated use `Connection$inboundSchema` instead. */
  export const inboundSchema = Connection$inboundSchema;
  /** @deprecated use `Connection$outboundSchema` instead. */
  export const outboundSchema = Connection$outboundSchema;
  /** @deprecated use `Connection$Outbound` instead. */
  export type Outbound = Connection$Outbound;
}

export function connectionToJSON(connection: Connection): string {
  return JSON.stringify(Connection$outboundSchema.parse(connection));
}

export function connectionFromJSON(
  jsonString: string,
): SafeParseResult<Connection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Connection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Connection' from JSON`,
  );
}

/** @internal */
export const Account$inboundSchema: z.ZodType<Account, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    name: z.string(),
    currency: z.string(),
    connection: z.lazy(() => Connection$inboundSchema),
  });

/** @internal */
export type Account$Outbound = {
  id: string;
  name: string;
  currency: string;
  connection: Connection$Outbound;
};

/** @internal */
export const Account$outboundSchema: z.ZodType<
  Account$Outbound,
  z.ZodTypeDef,
  Account
> = z.object({
  id: z.string(),
  name: z.string(),
  currency: z.string(),
  connection: z.lazy(() => Connection$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Account$ {
  /** @deprecated use `Account$inboundSchema` instead. */
  export const inboundSchema = Account$inboundSchema;
  /** @deprecated use `Account$outboundSchema` instead. */
  export const outboundSchema = Account$outboundSchema;
  /** @deprecated use `Account$Outbound` instead. */
  export type Outbound = Account$Outbound;
}

export function accountToJSON(account: Account): string {
  return JSON.stringify(Account$outboundSchema.parse(account));
}

export function accountFromJSON(
  jsonString: string,
): SafeParseResult<Account, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Account$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Account' from JSON`,
  );
}

/** @internal */
export const TransactionResponseTag$inboundSchema: z.ZodType<
  TransactionResponseTag,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()),
});

/** @internal */
export type TransactionResponseTag$Outbound = {
  id: string;
  name: string | null;
};

/** @internal */
export const TransactionResponseTag$outboundSchema: z.ZodType<
  TransactionResponseTag$Outbound,
  z.ZodTypeDef,
  TransactionResponseTag
> = z.object({
  id: z.string(),
  name: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionResponseTag$ {
  /** @deprecated use `TransactionResponseTag$inboundSchema` instead. */
  export const inboundSchema = TransactionResponseTag$inboundSchema;
  /** @deprecated use `TransactionResponseTag$outboundSchema` instead. */
  export const outboundSchema = TransactionResponseTag$outboundSchema;
  /** @deprecated use `TransactionResponseTag$Outbound` instead. */
  export type Outbound = TransactionResponseTag$Outbound;
}

export function transactionResponseTagToJSON(
  transactionResponseTag: TransactionResponseTag,
): string {
  return JSON.stringify(
    TransactionResponseTag$outboundSchema.parse(transactionResponseTag),
  );
}

export function transactionResponseTagFromJSON(
  jsonString: string,
): SafeParseResult<TransactionResponseTag, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionResponseTag$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionResponseTag' from JSON`,
  );
}

/** @internal */
export const Attachment$inboundSchema: z.ZodType<
  Attachment,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  path: z.array(z.string()),
  size: z.number(),
  type: z.string(),
  filename: z.nullable(z.string()),
});

/** @internal */
export type Attachment$Outbound = {
  id: string;
  path: Array<string>;
  size: number;
  type: string;
  filename: string | null;
};

/** @internal */
export const Attachment$outboundSchema: z.ZodType<
  Attachment$Outbound,
  z.ZodTypeDef,
  Attachment
> = z.object({
  id: z.string(),
  path: z.array(z.string()),
  size: z.number(),
  type: z.string(),
  filename: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Attachment$ {
  /** @deprecated use `Attachment$inboundSchema` instead. */
  export const inboundSchema = Attachment$inboundSchema;
  /** @deprecated use `Attachment$outboundSchema` instead. */
  export const outboundSchema = Attachment$outboundSchema;
  /** @deprecated use `Attachment$Outbound` instead. */
  export type Outbound = Attachment$Outbound;
}

export function attachmentToJSON(attachment: Attachment): string {
  return JSON.stringify(Attachment$outboundSchema.parse(attachment));
}

export function attachmentFromJSON(
  jsonString: string,
): SafeParseResult<Attachment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Attachment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Attachment' from JSON`,
  );
}

/** @internal */
export const TransactionResponse$inboundSchema: z.ZodType<
  TransactionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  amount: z.number(),
  currency: z.string(),
  date: z.string(),
  category: z.nullable(z.lazy(() => Category$inboundSchema)),
  status: z.string(),
  internal: z.nullable(z.boolean()),
  recurring: z.nullable(z.boolean()),
  manual: z.nullable(z.boolean()),
  frequency: z.nullable(z.string()),
  isFulfilled: z.boolean(),
  note: z.nullable(z.string()),
  account: z.lazy(() => Account$inboundSchema),
  tags: z.nullable(z.array(z.lazy(() => TransactionResponseTag$inboundSchema))),
  attachments: z.nullable(z.array(z.lazy(() => Attachment$inboundSchema))),
});

/** @internal */
export type TransactionResponse$Outbound = {
  id: string;
  name: string;
  amount: number;
  currency: string;
  date: string;
  category: Category$Outbound | null;
  status: string;
  internal: boolean | null;
  recurring: boolean | null;
  manual: boolean | null;
  frequency: string | null;
  isFulfilled: boolean;
  note: string | null;
  account: Account$Outbound;
  tags: Array<TransactionResponseTag$Outbound> | null;
  attachments: Array<Attachment$Outbound> | null;
};

/** @internal */
export const TransactionResponse$outboundSchema: z.ZodType<
  TransactionResponse$Outbound,
  z.ZodTypeDef,
  TransactionResponse
> = z.object({
  id: z.string(),
  name: z.string(),
  amount: z.number(),
  currency: z.string(),
  date: z.string(),
  category: z.nullable(z.lazy(() => Category$outboundSchema)),
  status: z.string(),
  internal: z.nullable(z.boolean()),
  recurring: z.nullable(z.boolean()),
  manual: z.nullable(z.boolean()),
  frequency: z.nullable(z.string()),
  isFulfilled: z.boolean(),
  note: z.nullable(z.string()),
  account: z.lazy(() => Account$outboundSchema),
  tags: z.nullable(
    z.array(z.lazy(() => TransactionResponseTag$outboundSchema)),
  ),
  attachments: z.nullable(z.array(z.lazy(() => Attachment$outboundSchema))),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionResponse$ {
  /** @deprecated use `TransactionResponse$inboundSchema` instead. */
  export const inboundSchema = TransactionResponse$inboundSchema;
  /** @deprecated use `TransactionResponse$outboundSchema` instead. */
  export const outboundSchema = TransactionResponse$outboundSchema;
  /** @deprecated use `TransactionResponse$Outbound` instead. */
  export type Outbound = TransactionResponse$Outbound;
}

export function transactionResponseToJSON(
  transactionResponse: TransactionResponse,
): string {
  return JSON.stringify(
    TransactionResponse$outboundSchema.parse(transactionResponse),
  );
}

export function transactionResponseFromJSON(
  jsonString: string,
): SafeParseResult<TransactionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionResponse' from JSON`,
  );
}
