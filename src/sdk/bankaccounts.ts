/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { bankAccountsCreate } from "../funcs/bankAccountsCreate.js";
import { bankAccountsDelete } from "../funcs/bankAccountsDelete.js";
import { bankAccountsGet } from "../funcs/bankAccountsGet.js";
import { bankAccountsList } from "../funcs/bankAccountsList.js";
import { bankAccountsUpdate } from "../funcs/bankAccountsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class BankAccounts extends ClientSDK {
  /**
   * List all bank accounts
   *
   * @remarks
   * Retrieve a list of bank accounts for the authenticated team.
   */
  async list(
    request: operations.ListBankAccountsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListBankAccountsResponse> {
    return unwrapAsync(bankAccountsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a bank account
   *
   * @remarks
   * Create a new bank account for the authenticated team.
   */
  async create(
    request?: operations.CreateBankAccountRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateBankAccountResponse> {
    return unwrapAsync(bankAccountsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a bank account
   *
   * @remarks
   * Retrieve a bank account by ID for the authenticated team.
   */
  async get(
    request: operations.GetBankAccountByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetBankAccountByIdResponse> {
    return unwrapAsync(bankAccountsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a bank account
   *
   * @remarks
   * Update a bank account by ID for the authenticated team.
   */
  async update(
    request: operations.UpdateBankAccountRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateBankAccountResponse> {
    return unwrapAsync(bankAccountsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a bank account
   *
   * @remarks
   * Delete a bank account by ID for the authenticated team.
   */
  async delete(
    request: operations.DeleteBankAccountRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteBankAccountResponse> {
    return unwrapAsync(bankAccountsDelete(
      this,
      request,
      options,
    ));
  }
}
