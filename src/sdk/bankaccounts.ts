/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { bankAccountsDeleteV1BankAccountsId } from "../funcs/bankAccountsDeleteV1BankAccountsId.js";
import { bankAccountsGetV1BankAccounts } from "../funcs/bankAccountsGetV1BankAccounts.js";
import { bankAccountsGetV1BankAccountsId } from "../funcs/bankAccountsGetV1BankAccountsId.js";
import { bankAccountsPatchV1BankAccountsId } from "../funcs/bankAccountsPatchV1BankAccountsId.js";
import { bankAccountsPostV1BankAccounts } from "../funcs/bankAccountsPostV1BankAccounts.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class BankAccounts extends ClientSDK {
  /**
   * List all bank accounts
   *
   * @remarks
   * Retrieve a list of bank accounts for the authenticated team.
   */
  async getV1BankAccounts(
    request: operations.GetV1BankAccountsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV1BankAccountsResponse> {
    return unwrapAsync(bankAccountsGetV1BankAccounts(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a bank account
   *
   * @remarks
   * Create a new bank account for the authenticated team.
   */
  async postV1BankAccounts(
    request?: operations.PostV1BankAccountsRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.PostV1BankAccountsResponse> {
    return unwrapAsync(bankAccountsPostV1BankAccounts(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a bank account
   *
   * @remarks
   * Retrieve a bank account by ID for the authenticated team.
   */
  async getV1BankAccountsId(
    request: operations.GetV1BankAccountsIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV1BankAccountsIdResponse> {
    return unwrapAsync(bankAccountsGetV1BankAccountsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a bank account
   *
   * @remarks
   * Update a bank account by ID for the authenticated team.
   */
  async patchV1BankAccountsId(
    request: operations.PatchV1BankAccountsIdRequest,
    options?: RequestOptions,
  ): Promise<operations.PatchV1BankAccountsIdResponse> {
    return unwrapAsync(bankAccountsPatchV1BankAccountsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a bank account
   *
   * @remarks
   * Delete a bank account by ID for the authenticated team.
   */
  async deleteV1BankAccountsId(
    request: operations.DeleteV1BankAccountsIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteV1BankAccountsIdResponse> {
    return unwrapAsync(bankAccountsDeleteV1BankAccountsId(
      this,
      request,
      options,
    ));
  }
}
