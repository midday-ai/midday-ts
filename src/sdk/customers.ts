/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { customersCreate } from "../funcs/customersCreate.js";
import { customersDelete } from "../funcs/customersDelete.js";
import { customersGet } from "../funcs/customersGet.js";
import { customersList } from "../funcs/customersList.js";
import { customersUpdate } from "../funcs/customersUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Customers extends ClientSDK {
  /**
   * List all customers
   *
   * @remarks
   * Retrieve a list of customers for the authenticated team.
   */
  async list(
    request: operations.ListCustomersRequest,
    options?: RequestOptions,
  ): Promise<operations.ListCustomersResponse> {
    return unwrapAsync(customersList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create customer
   *
   * @remarks
   * Create a new customer for the authenticated team.
   */
  async create(
    request?: operations.CreateCustomerRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateCustomerResponse> {
    return unwrapAsync(customersCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a customer
   *
   * @remarks
   * Retrieve a customer by ID for the authenticated team.
   */
  async get(
    request: operations.GetCustomerByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetCustomerByIdResponse> {
    return unwrapAsync(customersGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a customer
   *
   * @remarks
   * Update a customer by ID for the authenticated team.
   */
  async update(
    request: operations.UpdateCustomerRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateCustomerResponse> {
    return unwrapAsync(customersUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a customer
   *
   * @remarks
   * Delete a customer by ID for the authenticated team.
   */
  async delete(
    request: operations.DeleteCustomerRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteCustomerResponse> {
    return unwrapAsync(customersDelete(
      this,
      request,
      options,
    ));
  }
}
