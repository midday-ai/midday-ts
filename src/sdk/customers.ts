/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { customersDeleteV1CustomersId } from "../funcs/customersDeleteV1CustomersId.js";
import { customersGetV1Customers } from "../funcs/customersGetV1Customers.js";
import { customersGetV1CustomersId } from "../funcs/customersGetV1CustomersId.js";
import { customersPatchV1CustomersId } from "../funcs/customersPatchV1CustomersId.js";
import { customersPostV1Customers } from "../funcs/customersPostV1Customers.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Customers extends ClientSDK {
  /**
   * List all customers
   *
   * @remarks
   * Retrieve a list of customers for the authenticated team.
   */
  async getV1Customers(
    request: operations.GetV1CustomersRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV1CustomersResponse> {
    return unwrapAsync(customersGetV1Customers(
      this,
      request,
      options,
    ));
  }

  /**
   * Create customer
   *
   * @remarks
   * Create a new customer for the authenticated team.
   */
  async postV1Customers(
    request?: operations.PostV1CustomersRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.PostV1CustomersResponse> {
    return unwrapAsync(customersPostV1Customers(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a customer
   *
   * @remarks
   * Retrieve a customer by ID for the authenticated team.
   */
  async getV1CustomersId(
    request: operations.GetV1CustomersIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV1CustomersIdResponse> {
    return unwrapAsync(customersGetV1CustomersId(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a customer
   *
   * @remarks
   * Update a customer by ID for the authenticated team.
   */
  async patchV1CustomersId(
    request: operations.PatchV1CustomersIdRequest,
    options?: RequestOptions,
  ): Promise<operations.PatchV1CustomersIdResponse> {
    return unwrapAsync(customersPatchV1CustomersId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a customer
   *
   * @remarks
   * Delete a customer by ID for the authenticated team.
   */
  async deleteV1CustomersId(
    request: operations.DeleteV1CustomersIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteV1CustomersIdResponse> {
    return unwrapAsync(customersDeleteV1CustomersId(
      this,
      request,
      options,
    ));
  }
}
