/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { documentsDelete } from "../funcs/documentsDelete.js";
import { documentsGet } from "../funcs/documentsGet.js";
import { documentsGetPreSignedUrl } from "../funcs/documentsGetPreSignedUrl.js";
import { documentsList } from "../funcs/documentsList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Documents extends ClientSDK {
  /**
   * List all documents
   *
   * @remarks
   * Retrieve a list of documents for the authenticated team.
   */
  async list(
    request: operations.ListDocumentsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListDocumentsResponse> {
    return unwrapAsync(documentsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a document
   *
   * @remarks
   * Retrieve a document by its unique identifier for the authenticated team.
   */
  async get(
    request: operations.GetDocumentByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetDocumentByIdResponse> {
    return unwrapAsync(documentsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a document
   *
   * @remarks
   * Delete a document by its unique identifier for the authenticated team.
   */
  async delete(
    request: operations.DeleteDocumentRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteDocumentResponse> {
    return unwrapAsync(documentsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Generate pre-signed URL for document
   *
   * @remarks
   * Generate a pre-signed URL for accessing a document. The URL is valid for 60 seconds and allows secure temporary access to the document file.
   */
  async getPreSignedUrl(
    request: operations.GetDocumentPreSignedUrlRequest,
    options?: RequestOptions,
  ): Promise<operations.GetDocumentPreSignedUrlResponse> {
    return unwrapAsync(documentsGetPreSignedUrl(
      this,
      request,
      options,
    ));
  }
}
