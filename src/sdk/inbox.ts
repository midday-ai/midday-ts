/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { inboxDeleteV1InboxId } from "../funcs/inboxDeleteV1InboxId.js";
import { inboxGetV1Inbox } from "../funcs/inboxGetV1Inbox.js";
import { inboxGetV1InboxId } from "../funcs/inboxGetV1InboxId.js";
import { inboxPatchV1InboxId } from "../funcs/inboxPatchV1InboxId.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Inbox extends ClientSDK {
  /**
   * List all inbox items
   *
   * @remarks
   * Retrieve a list of inbox items for the authenticated team.
   */
  async getV1Inbox(
    request: operations.GetV1InboxRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV1InboxResponse> {
    return unwrapAsync(inboxGetV1Inbox(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a inbox item
   *
   * @remarks
   * Retrieve a inbox item by its unique identifier for the authenticated team.
   */
  async getV1InboxId(
    request: operations.GetV1InboxIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV1InboxIdResponse> {
    return unwrapAsync(inboxGetV1InboxId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a inbox item
   *
   * @remarks
   * Delete a inbox item by its unique identifier for the authenticated team.
   */
  async deleteV1InboxId(
    request: operations.DeleteV1InboxIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteV1InboxIdResponse> {
    return unwrapAsync(inboxDeleteV1InboxId(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a inbox item
   *
   * @remarks
   * Update fields of an inbox item by its unique identifier for the authenticated team.
   */
  async patchV1InboxId(
    request: operations.PatchV1InboxIdRequest,
    options?: RequestOptions,
  ): Promise<operations.PatchV1InboxIdResponse> {
    return unwrapAsync(inboxPatchV1InboxId(
      this,
      request,
      options,
    ));
  }
}
