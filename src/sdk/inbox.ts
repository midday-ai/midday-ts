/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { inboxDelete } from "../funcs/inboxDelete.js";
import { inboxGet } from "../funcs/inboxGet.js";
import { inboxGetPreSignedUrl } from "../funcs/inboxGetPreSignedUrl.js";
import { inboxList } from "../funcs/inboxList.js";
import { inboxUpdate } from "../funcs/inboxUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Inbox extends ClientSDK {
  /**
   * List all inbox items
   *
   * @remarks
   * Retrieve a list of inbox items for the authenticated team.
   */
  async list(
    request: operations.ListInboxItemsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListInboxItemsResponse> {
    return unwrapAsync(inboxList(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a inbox item
   *
   * @remarks
   * Retrieve a inbox item by its unique identifier for the authenticated team.
   */
  async get(
    request: operations.GetInboxItemByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetInboxItemByIdResponse> {
    return unwrapAsync(inboxGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a inbox item
   *
   * @remarks
   * Delete a inbox item by its unique identifier for the authenticated team.
   */
  async delete(
    request: operations.DeleteInboxItemRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteInboxItemResponse> {
    return unwrapAsync(inboxDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a inbox item
   *
   * @remarks
   * Update fields of an inbox item by its unique identifier for the authenticated team.
   */
  async update(
    request: operations.UpdateInboxItemRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateInboxItemResponse> {
    return unwrapAsync(inboxUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Generate pre-signed URL for inbox attachment
   *
   * @remarks
   * Generate a pre-signed URL for accessing an inbox attachment. The URL is valid for 60 seconds and allows secure temporary access to the attachment file.
   */
  async getPreSignedUrl(
    request: operations.GetInboxPreSignedUrlRequest,
    options?: RequestOptions,
  ): Promise<operations.GetInboxPreSignedUrlResponse> {
    return unwrapAsync(inboxGetPreSignedUrl(
      this,
      request,
      options,
    ));
  }
}
