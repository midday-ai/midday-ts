/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { invoicesDeleteV1InvoicesId } from "../funcs/invoicesDeleteV1InvoicesId.js";
import { invoicesGetV1Invoices } from "../funcs/invoicesGetV1Invoices.js";
import { invoicesGetV1InvoicesId } from "../funcs/invoicesGetV1InvoicesId.js";
import { invoicesGetV1InvoicesPaymentStatus } from "../funcs/invoicesGetV1InvoicesPaymentStatus.js";
import { invoicesGetV1InvoicesSummary } from "../funcs/invoicesGetV1InvoicesSummary.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Invoices extends ClientSDK {
  /**
   * List all invoices
   *
   * @remarks
   * Retrieve a list of invoices for the authenticated team.
   */
  async getV1Invoices(
    request: operations.GetV1InvoicesRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV1InvoicesResponse> {
    return unwrapAsync(invoicesGetV1Invoices(
      this,
      request,
      options,
    ));
  }

  /**
   * Payment status
   *
   * @remarks
   * Get payment status for the authenticated team.
   */
  async getV1InvoicesPaymentStatus(
    options?: RequestOptions,
  ): Promise<operations.GetV1InvoicesPaymentStatusResponse> {
    return unwrapAsync(invoicesGetV1InvoicesPaymentStatus(
      this,
      options,
    ));
  }

  /**
   * Invoice summary
   *
   * @remarks
   * Get summary of invoices for the authenticated team.
   */
  async getV1InvoicesSummary(
    request: operations.GetV1InvoicesSummaryRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.GetV1InvoicesSummaryResponse>> {
    return unwrapAsync(invoicesGetV1InvoicesSummary(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a invoice
   *
   * @remarks
   * Retrieve a invoice by its unique identifier for the authenticated team.
   */
  async getV1InvoicesId(
    request: operations.GetV1InvoicesIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV1InvoicesIdResponse> {
    return unwrapAsync(invoicesGetV1InvoicesId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a invoice
   *
   * @remarks
   * Delete an invoice by its unique identifier for the authenticated team. Only invoices with status 'draft' or 'canceled' can be deleted directly. If the invoice is not in one of these statuses, update its status to 'canceled' before attempting deletion.
   */
  async deleteV1InvoicesId(
    request: operations.DeleteV1InvoicesIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteV1InvoicesIdResponse> {
    return unwrapAsync(invoicesDeleteV1InvoicesId(
      this,
      request,
      options,
    ));
  }
}
