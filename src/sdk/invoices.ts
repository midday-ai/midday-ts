/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { invoicesCreate } from "../funcs/invoicesCreate.js";
import { invoicesDelete } from "../funcs/invoicesDelete.js";
import { invoicesGet } from "../funcs/invoicesGet.js";
import { invoicesGetInvoicesPaymentStatus } from "../funcs/invoicesGetInvoicesPaymentStatus.js";
import { invoicesList } from "../funcs/invoicesList.js";
import { invoicesSummary } from "../funcs/invoicesSummary.js";
import { invoicesUpdate } from "../funcs/invoicesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Invoices extends ClientSDK {
  /**
   * List all invoices
   *
   * @remarks
   * Retrieve a list of invoices for the authenticated team.
   */
  async list(
    request: operations.ListInvoicesRequest,
    options?: RequestOptions,
  ): Promise<operations.ListInvoicesResponse> {
    return unwrapAsync(invoicesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an invoice
   *
   * @remarks
   * Create an invoice for the authenticated team. The behavior depends on deliveryType: 'create' generates and finalizes the invoice immediately, 'create_and_send' also sends it to the customer, 'scheduled' schedules the invoice for automatic processing at the specified date.
   */
  async create(
    request?: operations.CreateInvoiceRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateInvoiceResponse> {
    return unwrapAsync(invoicesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Payment status
   *
   * @remarks
   * Get payment status for the authenticated team.
   */
  async getInvoicesPaymentStatus(
    options?: RequestOptions,
  ): Promise<operations.GetInvoicesPaymentStatusResponse> {
    return unwrapAsync(invoicesGetInvoicesPaymentStatus(
      this,
      options,
    ));
  }

  /**
   * Invoice summary
   *
   * @remarks
   * Get summary of invoices for the authenticated team.
   */
  async summary(
    request: operations.GetInvoiceSummaryRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.GetInvoiceSummaryResponse>> {
    return unwrapAsync(invoicesSummary(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a invoice
   *
   * @remarks
   * Retrieve a invoice by its unique identifier for the authenticated team.
   */
  async get(
    request: operations.GetInvoiceByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetInvoiceByIdResponse> {
    return unwrapAsync(invoicesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an invoice
   *
   * @remarks
   * Update an invoice by its unique identifier for the authenticated team.
   */
  async update(
    request: operations.UpdateInvoiceRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateInvoiceResponse> {
    return unwrapAsync(invoicesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a invoice
   *
   * @remarks
   * Delete an invoice by its unique identifier for the authenticated team. Only invoices with status 'draft' or 'canceled' can be deleted directly. If the invoice is not in one of these statuses, update its status to 'canceled' before attempting deletion.
   */
  async delete(
    request: operations.DeleteInvoiceRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteInvoiceResponse> {
    return unwrapAsync(invoicesDelete(
      this,
      request,
      options,
    ));
  }
}
