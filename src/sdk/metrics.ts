/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { metricsGetV1MetricsBurnRate } from "../funcs/metricsGetV1MetricsBurnRate.js";
import { metricsGetV1MetricsExpenses } from "../funcs/metricsGetV1MetricsExpenses.js";
import { metricsGetV1MetricsProfit } from "../funcs/metricsGetV1MetricsProfit.js";
import { metricsGetV1MetricsRevenue } from "../funcs/metricsGetV1MetricsRevenue.js";
import { metricsGetV1MetricsRunway } from "../funcs/metricsGetV1MetricsRunway.js";
import { metricsGetV1MetricsSpending } from "../funcs/metricsGetV1MetricsSpending.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Metrics extends ClientSDK {
  /**
   * Revenue metrics
   *
   * @remarks
   * Revenue metrics for the authenticated team.
   */
  async getV1MetricsRevenue(
    request: operations.GetV1MetricsRevenueRequest,
    options?: RequestOptions,
  ): Promise<models.GetRevenueResponseSchema> {
    return unwrapAsync(metricsGetV1MetricsRevenue(
      this,
      request,
      options,
    ));
  }

  /**
   * Profit metrics
   *
   * @remarks
   * Profit metrics for the authenticated team.
   */
  async getV1MetricsProfit(
    request: operations.GetV1MetricsProfitRequest,
    options?: RequestOptions,
  ): Promise<models.GetProfitResponseSchema> {
    return unwrapAsync(metricsGetV1MetricsProfit(
      this,
      request,
      options,
    ));
  }

  /**
   * Burn rate metrics
   *
   * @remarks
   * Burn rate metrics for the authenticated team.
   */
  async getV1MetricsBurnRate(
    request: operations.GetV1MetricsBurnRateRequest,
    options?: RequestOptions,
  ): Promise<Array<models.GetBurnRateResponseSchema>> {
    return unwrapAsync(metricsGetV1MetricsBurnRate(
      this,
      request,
      options,
    ));
  }

  /**
   * Runway metrics
   *
   * @remarks
   * Runway metrics for the authenticated team.
   */
  async getV1MetricsRunway(
    request: operations.GetV1MetricsRunwayRequest,
    options?: RequestOptions,
  ): Promise<number> {
    return unwrapAsync(metricsGetV1MetricsRunway(
      this,
      request,
      options,
    ));
  }

  /**
   * Expense metrics
   *
   * @remarks
   * Expense metrics for the authenticated team.
   */
  async getV1MetricsExpenses(
    request: operations.GetV1MetricsExpensesRequest,
    options?: RequestOptions,
  ): Promise<models.GetExpensesResponseSchema> {
    return unwrapAsync(metricsGetV1MetricsExpenses(
      this,
      request,
      options,
    ));
  }

  /**
   * Spending metrics
   *
   * @remarks
   * Spending metrics for the authenticated team.
   */
  async getV1MetricsSpending(
    request: operations.GetV1MetricsSpendingRequest,
    options?: RequestOptions,
  ): Promise<Array<models.SpendingResultArray>> {
    return unwrapAsync(metricsGetV1MetricsSpending(
      this,
      request,
      options,
    ));
  }
}
