/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { metricsBurnRate } from "../funcs/metricsBurnRate.js";
import { metricsExpenses } from "../funcs/metricsExpenses.js";
import { metricsProfit } from "../funcs/metricsProfit.js";
import { metricsRevenue } from "../funcs/metricsRevenue.js";
import { metricsRunway } from "../funcs/metricsRunway.js";
import { metricsSpending } from "../funcs/metricsSpending.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Metrics extends ClientSDK {
  /**
   * Revenue metrics
   *
   * @remarks
   * Revenue metrics for the authenticated team.
   */
  async revenue(
    request: operations.GetRevenueMetricsRequest,
    options?: RequestOptions,
  ): Promise<models.GetRevenueResponseSchema> {
    return unwrapAsync(metricsRevenue(
      this,
      request,
      options,
    ));
  }

  /**
   * Profit metrics
   *
   * @remarks
   * Profit metrics for the authenticated team.
   */
  async profit(
    request: operations.GetProfitMetricsRequest,
    options?: RequestOptions,
  ): Promise<models.GetProfitResponseSchema> {
    return unwrapAsync(metricsProfit(
      this,
      request,
      options,
    ));
  }

  /**
   * Burn rate metrics
   *
   * @remarks
   * Burn rate metrics for the authenticated team.
   */
  async burnRate(
    request: operations.GetBurnRateMetricsRequest,
    options?: RequestOptions,
  ): Promise<Array<models.GetBurnRateResponseSchema>> {
    return unwrapAsync(metricsBurnRate(
      this,
      request,
      options,
    ));
  }

  /**
   * Runway metrics
   *
   * @remarks
   * Runway metrics for the authenticated team.
   */
  async runway(
    request: operations.GetRunwayMetricsRequest,
    options?: RequestOptions,
  ): Promise<number> {
    return unwrapAsync(metricsRunway(
      this,
      request,
      options,
    ));
  }

  /**
   * Expense metrics
   *
   * @remarks
   * Expense metrics for the authenticated team.
   */
  async expenses(
    request: operations.GetExpensesMetricsRequest,
    options?: RequestOptions,
  ): Promise<models.GetExpensesResponseSchema> {
    return unwrapAsync(metricsExpenses(
      this,
      request,
      options,
    ));
  }

  /**
   * Spending metrics
   *
   * @remarks
   * Spending metrics for the authenticated team.
   */
  async spending(
    request: operations.GetSpendingMetricsRequest,
    options?: RequestOptions,
  ): Promise<Array<models.SpendingResultArray>> {
    return unwrapAsync(metricsSpending(
      this,
      request,
      options,
    ));
  }
}
