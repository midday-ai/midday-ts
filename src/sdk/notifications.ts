/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { notificationsList } from "../funcs/notificationsList.js";
import { notificationsUpdateAllStatus } from "../funcs/notificationsUpdateAllStatus.js";
import { notificationsUpdateStatus } from "../funcs/notificationsUpdateStatus.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Notifications extends ClientSDK {
  /**
   * List all notifications
   *
   * @remarks
   * Retrieve a list of notifications for the authenticated team.
   */
  async list(
    request: operations.ListNotificationsRequest,
    options?: RequestOptions,
  ): Promise<models.NotificationsResponseSchema> {
    return unwrapAsync(notificationsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Update notification status
   *
   * @remarks
   * Update the status of a specific notification.
   */
  async updateStatus(
    request: operations.UpdateNotificationStatusRequest,
    options?: RequestOptions,
  ): Promise<models.NotificationResponseSchema> {
    return unwrapAsync(notificationsUpdateStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * Update status of all notifications
   *
   * @remarks
   * Update the status of all notifications for the authenticated team.
   */
  async updateAllStatus(
    request?: models.UpdateAllNotificationsStatusSchema | undefined,
    options?: RequestOptions,
  ): Promise<models.UpdateAllNotificationsStatusResponseSchema> {
    return unwrapAsync(notificationsUpdateAllStatus(
      this,
      request,
      options,
    ));
  }
}
