/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { oAuthGetOAuthAuthorization } from "../funcs/oAuthGetOAuthAuthorization.js";
import { oAuthPostOAuthAuthorization } from "../funcs/oAuthPostOAuthAuthorization.js";
import { oAuthPostOAuthRevoke } from "../funcs/oAuthPostOAuthRevoke.js";
import { oAuthPostOAuthToken } from "../funcs/oAuthPostOAuthToken.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class OAuth extends ClientSDK {
  /**
   * OAuth Authorization Endpoint
   *
   * @remarks
   * Initiate OAuth authorization flow and get consent screen information
   */
  async getOAuthAuthorization(
    request: operations.GetOAuthAuthorizationRequest,
    options?: RequestOptions,
  ): Promise<operations.GetOAuthAuthorizationResponse> {
    return unwrapAsync(oAuthGetOAuthAuthorization(
      this,
      request,
      options,
    ));
  }

  /**
   * OAuth Authorization Decision
   *
   * @remarks
   * Process user's authorization decision (allow/deny)
   */
  async postOAuthAuthorization(
    request?: operations.PostOAuthAuthorizationRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.PostOAuthAuthorizationResponse> {
    return unwrapAsync(oAuthPostOAuthAuthorization(
      this,
      request,
      options,
    ));
  }

  /**
   * OAuth Token Exchange
   *
   * @remarks
   * Exchange authorization code for access token or refresh an access token
   */
  async postOAuthToken(
    request?: operations.PostOAuthTokenRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.PostOAuthTokenResponse> {
    return unwrapAsync(oAuthPostOAuthToken(
      this,
      request,
      options,
    ));
  }

  /**
   * OAuth Token Revocation
   *
   * @remarks
   * Revoke an access token or refresh token
   */
  async postOAuthRevoke(
    request?: operations.PostOAuthRevokeRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.PostOAuthRevokeResponse> {
    return unwrapAsync(oAuthPostOAuthRevoke(
      this,
      request,
      options,
    ));
  }
}
