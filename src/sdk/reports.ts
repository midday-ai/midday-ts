/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { reportsBurnRate } from "../funcs/reportsBurnRate.js";
import { reportsExpenses } from "../funcs/reportsExpenses.js";
import { reportsProfit } from "../funcs/reportsProfit.js";
import { reportsRevenue } from "../funcs/reportsRevenue.js";
import { reportsRunway } from "../funcs/reportsRunway.js";
import { reportsSpending } from "../funcs/reportsSpending.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Reports extends ClientSDK {
  /**
   * Revenue reports
   *
   * @remarks
   * Revenue reports for the authenticated team.
   */
  async revenue(
    request: operations.GetRevenueReportsRequest,
    options?: RequestOptions,
  ): Promise<models.GetRevenueResponseSchema> {
    return unwrapAsync(reportsRevenue(
      this,
      request,
      options,
    ));
  }

  /**
   * Profit reports
   *
   * @remarks
   * Profit reports for the authenticated team.
   */
  async profit(
    request: operations.GetProfitReportsRequest,
    options?: RequestOptions,
  ): Promise<models.GetProfitResponseSchema> {
    return unwrapAsync(reportsProfit(
      this,
      request,
      options,
    ));
  }

  /**
   * Burn rate reports
   *
   * @remarks
   * Burn rate reports for the authenticated team.
   */
  async burnRate(
    request: operations.GetBurnRateReportsRequest,
    options?: RequestOptions,
  ): Promise<Array<models.GetBurnRateResponseSchema>> {
    return unwrapAsync(reportsBurnRate(
      this,
      request,
      options,
    ));
  }

  /**
   * Runway reports
   *
   * @remarks
   * Runway reports for the authenticated team.
   */
  async runway(
    request: operations.GetRunwayReportsRequest,
    options?: RequestOptions,
  ): Promise<number> {
    return unwrapAsync(reportsRunway(
      this,
      request,
      options,
    ));
  }

  /**
   * Expense reports
   *
   * @remarks
   * Expense reports for the authenticated team.
   */
  async expenses(
    request: operations.GetExpensesReportsRequest,
    options?: RequestOptions,
  ): Promise<models.GetExpensesResponseSchema> {
    return unwrapAsync(reportsExpenses(
      this,
      request,
      options,
    ));
  }

  /**
   * Spending reports
   *
   * @remarks
   * Spending reports for the authenticated team.
   */
  async spending(
    request: operations.GetSpendingReportsRequest,
    options?: RequestOptions,
  ): Promise<Array<models.SpendingResultArray>> {
    return unwrapAsync(reportsSpending(
      this,
      request,
      options,
    ));
  }
}
