/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { tagsDeleteV1TagsId } from "../funcs/tagsDeleteV1TagsId.js";
import { tagsGetV1Tags } from "../funcs/tagsGetV1Tags.js";
import { tagsGetV1TagsId } from "../funcs/tagsGetV1TagsId.js";
import { tagsPatchV1TagsId } from "../funcs/tagsPatchV1TagsId.js";
import { tagsPostV1Tags } from "../funcs/tagsPostV1Tags.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Tags extends ClientSDK {
  /**
   * List all tags
   *
   * @remarks
   * Retrieve a list of tags for the authenticated team.
   */
  async getV1Tags(
    options?: RequestOptions,
  ): Promise<models.TagsResponse> {
    return unwrapAsync(tagsGetV1Tags(
      this,
      options,
    ));
  }

  /**
   * Create a new tag
   *
   * @remarks
   * Create a new tag for the authenticated team.
   */
  async postV1Tags(
    request?: models.CreateTag | undefined,
    options?: RequestOptions,
  ): Promise<models.TagsResponse> {
    return unwrapAsync(tagsPostV1Tags(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a tag
   *
   * @remarks
   * Retrieve a tag by ID for the authenticated team.
   */
  async getV1TagsId(
    request: operations.GetV1TagsIdRequest,
    options?: RequestOptions,
  ): Promise<models.TagResponse> {
    return unwrapAsync(tagsGetV1TagsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a tag
   *
   * @remarks
   * Update a tag by ID for the authenticated team.
   */
  async patchV1TagsId(
    request: operations.PatchV1TagsIdRequest,
    options?: RequestOptions,
  ): Promise<models.TagResponse> {
    return unwrapAsync(tagsPatchV1TagsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a tag
   *
   * @remarks
   * Delete a tag by ID for the authenticated team.
   */
  async deleteV1TagsId(
    request: operations.DeleteV1TagsIdRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(tagsDeleteV1TagsId(
      this,
      request,
      options,
    ));
  }
}
