/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { tagsCreate } from "../funcs/tagsCreate.js";
import { tagsDelete } from "../funcs/tagsDelete.js";
import { tagsGet } from "../funcs/tagsGet.js";
import { tagsList } from "../funcs/tagsList.js";
import { tagsUpdate } from "../funcs/tagsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Tags extends ClientSDK {
  /**
   * List all tags
   *
   * @remarks
   * Retrieve a list of tags for the authenticated team.
   */
  async list(
    options?: RequestOptions,
  ): Promise<models.TagsResponse> {
    return unwrapAsync(tagsList(
      this,
      options,
    ));
  }

  /**
   * Create a new tag
   *
   * @remarks
   * Create a new tag for the authenticated team.
   */
  async create(
    request?: models.CreateTag | undefined,
    options?: RequestOptions,
  ): Promise<models.TagsResponse> {
    return unwrapAsync(tagsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a tag
   *
   * @remarks
   * Retrieve a tag by ID for the authenticated team.
   */
  async get(
    request: operations.GetTagByIdRequest,
    options?: RequestOptions,
  ): Promise<models.TagResponse> {
    return unwrapAsync(tagsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a tag
   *
   * @remarks
   * Update a tag by ID for the authenticated team.
   */
  async update(
    request: operations.UpdateTagRequest,
    options?: RequestOptions,
  ): Promise<models.TagResponse> {
    return unwrapAsync(tagsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a tag
   *
   * @remarks
   * Delete a tag by ID for the authenticated team.
   */
  async delete(
    request: operations.DeleteTagRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(tagsDelete(
      this,
      request,
      options,
    ));
  }
}
