/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { teamsGet } from "../funcs/teamsGet.js";
import { teamsList } from "../funcs/teamsList.js";
import { teamsMembers } from "../funcs/teamsMembers.js";
import { teamsUpdate } from "../funcs/teamsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Teams extends ClientSDK {
  /**
   * List all teams
   *
   * @remarks
   * Retrieve a list of teams for the authenticated user.
   */
  async list(
    options?: RequestOptions,
  ): Promise<operations.ListTeamsResponse> {
    return unwrapAsync(teamsList(
      this,
      options,
    ));
  }

  /**
   * Retrieve a team
   *
   * @remarks
   * Retrieve a team by its ID for the authenticated team.
   */
  async get(
    request: operations.GetTeamByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetTeamByIdResponse> {
    return unwrapAsync(teamsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a team
   *
   * @remarks
   * Update a team for the authenticated workspace. If thereâ€™s no change, returns it as it is.
   */
  async update(
    request: operations.UpdateTeamByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateTeamByIdResponse> {
    return unwrapAsync(teamsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * List all team members
   *
   * @remarks
   * List all team members for the authenticated team.
   */
  async members(
    request: operations.ListTeamMembersRequest,
    options?: RequestOptions,
  ): Promise<operations.ListTeamMembersResponse> {
    return unwrapAsync(teamsMembers(
      this,
      request,
      options,
    ));
  }
}
