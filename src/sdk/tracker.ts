/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { trackerDeleteV1TrackerEntriesId } from "../funcs/trackerDeleteV1TrackerEntriesId.js";
import { trackerDeleteV1TrackerProjectsId } from "../funcs/trackerDeleteV1TrackerProjectsId.js";
import { trackerGetV1TrackerEntries } from "../funcs/trackerGetV1TrackerEntries.js";
import { trackerGetV1TrackerProjects } from "../funcs/trackerGetV1TrackerProjects.js";
import { trackerGetV1TrackerProjectsId } from "../funcs/trackerGetV1TrackerProjectsId.js";
import { trackerPatchV1TrackerProjectsId } from "../funcs/trackerPatchV1TrackerProjectsId.js";
import { trackerPostV1TrackerProjects } from "../funcs/trackerPostV1TrackerProjects.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Tracker extends ClientSDK {
  /**
   * List all tracker projects
   *
   * @remarks
   * List all tracker projects for the authenticated team.
   */
  async getV1TrackerProjects(
    request: operations.GetV1TrackerProjectsRequest,
    options?: RequestOptions,
  ): Promise<models.TrackerProjectsResponse> {
    return unwrapAsync(trackerGetV1TrackerProjects(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a tracker project
   *
   * @remarks
   * Create a tracker project for the authenticated team.
   */
  async postV1TrackerProjects(
    request?: operations.PostV1TrackerProjectsRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.TrackerProjectResponse> {
    return unwrapAsync(trackerPostV1TrackerProjects(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a tracker project
   *
   * @remarks
   * Update a tracker project for the authenticated team.
   */
  async patchV1TrackerProjectsId(
    request: operations.PatchV1TrackerProjectsIdRequest,
    options?: RequestOptions,
  ): Promise<models.TrackerProjectResponse> {
    return unwrapAsync(trackerPatchV1TrackerProjectsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a tracker project
   *
   * @remarks
   * Retrieve a tracker project for the authenticated team.
   */
  async getV1TrackerProjectsId(
    request: operations.GetV1TrackerProjectsIdRequest,
    options?: RequestOptions,
  ): Promise<models.TrackerProjectResponse> {
    return unwrapAsync(trackerGetV1TrackerProjectsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a tracker project
   *
   * @remarks
   * Delete a tracker project for the authenticated team.
   */
  async deleteV1TrackerProjectsId(
    request: operations.DeleteV1TrackerProjectsIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteV1TrackerProjectsIdResponse> {
    return unwrapAsync(trackerDeleteV1TrackerProjectsId(
      this,
      request,
      options,
    ));
  }

  /**
   * List all tracker entries
   *
   * @remarks
   * List all tracker entries for the authenticated team.
   */
  async getV1TrackerEntries(
    request: operations.GetV1TrackerEntriesRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV1TrackerEntriesResponse> {
    return unwrapAsync(trackerGetV1TrackerEntries(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a tracker entry
   *
   * @remarks
   * Delete a tracker entry for the authenticated team.
   */
  async deleteV1TrackerEntriesId(
    request: operations.DeleteV1TrackerEntriesIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteV1TrackerEntriesIdResponse> {
    return unwrapAsync(trackerDeleteV1TrackerEntriesId(
      this,
      request,
      options,
    ));
  }
}
