/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { trackerProjectsCreate } from "../funcs/trackerProjectsCreate.js";
import { trackerProjectsDelete } from "../funcs/trackerProjectsDelete.js";
import { trackerProjectsGet } from "../funcs/trackerProjectsGet.js";
import { trackerProjectsList } from "../funcs/trackerProjectsList.js";
import { trackerProjectsUpdate } from "../funcs/trackerProjectsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class TrackerProjects extends ClientSDK {
  /**
   * List all tracker projects
   *
   * @remarks
   * List all tracker projects for the authenticated team.
   */
  async list(
    request: operations.ListTrackerProjectsRequest,
    options?: RequestOptions,
  ): Promise<models.TrackerProjectsResponse> {
    return unwrapAsync(trackerProjectsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a tracker project
   *
   * @remarks
   * Create a tracker project for the authenticated team.
   */
  async create(
    request?: operations.CreateTrackerProjectRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.TrackerProjectResponse> {
    return unwrapAsync(trackerProjectsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a tracker project
   *
   * @remarks
   * Update a tracker project for the authenticated team.
   */
  async update(
    request: operations.UpdateTrackerProjectRequest,
    options?: RequestOptions,
  ): Promise<models.TrackerProjectResponse> {
    return unwrapAsync(trackerProjectsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a tracker project
   *
   * @remarks
   * Retrieve a tracker project for the authenticated team.
   */
  async get(
    request: operations.GetTrackerProjectByIdRequest,
    options?: RequestOptions,
  ): Promise<models.TrackerProjectResponse> {
    return unwrapAsync(trackerProjectsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a tracker project
   *
   * @remarks
   * Delete a tracker project for the authenticated team.
   */
  async delete(
    request: operations.DeleteTrackerProjectRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteTrackerProjectResponse> {
    return unwrapAsync(trackerProjectsDelete(
      this,
      request,
      options,
    ));
  }
}
