/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { trackerTimerGetCurrentTimer } from "../funcs/trackerTimerGetCurrentTimer.js";
import { trackerTimerGetTimerStatus } from "../funcs/trackerTimerGetTimerStatus.js";
import { trackerTimerStartTimer } from "../funcs/trackerTimerStartTimer.js";
import { trackerTimerStopTimer } from "../funcs/trackerTimerStopTimer.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class TrackerTimer extends ClientSDK {
  /**
   * Start a timer
   *
   * @remarks
   * Start a new timer or continue from a paused entry.
   */
  async startTimer(
    request?: operations.StartTimerRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.StartTimerResponse> {
    return unwrapAsync(trackerTimerStartTimer(
      this,
      request,
      options,
    ));
  }

  /**
   * Stop a timer
   *
   * @remarks
   * Stop the current running timer or a specific timer entry.
   */
  async stopTimer(
    request?: operations.StopTimerRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.StopTimerResponse> {
    return unwrapAsync(trackerTimerStopTimer(
      this,
      request,
      options,
    ));
  }

  /**
   * Get current timer
   *
   * @remarks
   * Get the currently running timer for the authenticated user.
   */
  async getCurrentTimer(
    request: operations.GetCurrentTimerRequest,
    options?: RequestOptions,
  ): Promise<operations.GetCurrentTimerResponse> {
    return unwrapAsync(trackerTimerGetCurrentTimer(
      this,
      request,
      options,
    ));
  }

  /**
   * Get timer status
   *
   * @remarks
   * Get timer status including elapsed time for the authenticated user.
   */
  async getTimerStatus(
    request: operations.GetTimerStatusRequest,
    options?: RequestOptions,
  ): Promise<operations.GetTimerStatusResponse> {
    return unwrapAsync(trackerTimerGetTimerStatus(
      this,
      request,
      options,
    ));
  }
}
