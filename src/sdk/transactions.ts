/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { transactionsCreate } from "../funcs/transactionsCreate.js";
import { transactionsCreateMany } from "../funcs/transactionsCreateMany.js";
import { transactionsDelete } from "../funcs/transactionsDelete.js";
import { transactionsDeleteMany } from "../funcs/transactionsDeleteMany.js";
import { transactionsGet } from "../funcs/transactionsGet.js";
import { transactionsGetAttachmentPreSignedUrl } from "../funcs/transactionsGetAttachmentPreSignedUrl.js";
import { transactionsList } from "../funcs/transactionsList.js";
import { transactionsUpdate } from "../funcs/transactionsUpdate.js";
import { transactionsUpdateMany } from "../funcs/transactionsUpdateMany.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Transactions extends ClientSDK {
  /**
   * List all transactions
   *
   * @remarks
   * Retrieve a list of transactions for the authenticated team.
   */
  async list(
    request: operations.ListTransactionsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListTransactionsResponse> {
    return unwrapAsync(transactionsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a transaction
   *
   * @remarks
   * Create a transaction
   */
  async create(
    request?: operations.CreateTransactionRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.TransactionResponse> {
    return unwrapAsync(transactionsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a transaction
   *
   * @remarks
   * Retrieve a transaction by its ID for the authenticated team.
   */
  async get(
    request: operations.GetTransactionByIdRequest,
    options?: RequestOptions,
  ): Promise<models.TransactionResponse> {
    return unwrapAsync(transactionsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a transaction
   *
   * @remarks
   * Update a transaction for the authenticated team. If there's no change, returns it as it is.
   */
  async update(
    request: operations.UpdateTransactionRequest,
    options?: RequestOptions,
  ): Promise<models.TransactionResponse> {
    return unwrapAsync(transactionsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a transaction
   *
   * @remarks
   * Delete a transaction for the authenticated team. Only manually created transactions can be deleted via this endpoint or the form. Transactions inserted by bank connections cannot be deleted, but can be excluded by updating the status.
   */
  async delete(
    request: operations.DeleteTransactionRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteTransactionResponse> {
    return unwrapAsync(transactionsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Generate pre-signed URL for transaction attachment
   *
   * @remarks
   * Generate a pre-signed URL for accessing a transaction attachment. The URL is valid for 60 seconds and allows secure temporary access to the attachment file.
   */
  async getAttachmentPreSignedUrl(
    request: operations.GetTransactionAttachmentPreSignedUrlRequest,
    options?: RequestOptions,
  ): Promise<operations.GetTransactionAttachmentPreSignedUrlResponse> {
    return unwrapAsync(transactionsGetAttachmentPreSignedUrl(
      this,
      request,
      options,
    ));
  }

  /**
   * Bulk update transactions
   *
   * @remarks
   * Bulk update transactions for the authenticated team. If there's no change, returns it as it is.
   */
  async updateMany(
    request?: operations.UpdateTransactionsRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.UpdateTransactionsResponse> {
    return unwrapAsync(transactionsUpdateMany(
      this,
      request,
      options,
    ));
  }

  /**
   * Bulk create transactions
   *
   * @remarks
   * Bulk create transactions for the authenticated team.
   */
  async createMany(
    request?: Array<operations.RequestBody> | undefined,
    options?: RequestOptions,
  ): Promise<Array<models.TransactionResponse>> {
    return unwrapAsync(transactionsCreateMany(
      this,
      request,
      options,
    ));
  }

  /**
   * Bulk delete transactions
   *
   * @remarks
   * Bulk delete transactions for the authenticated team. Only manually created transactions can be deleted via this endpoint or the form. Transactions inserted by bank connections cannot be deleted, but can be excluded by updating the status.
   */
  async deleteMany(
    request?: Array<string> | undefined,
    options?: RequestOptions,
  ): Promise<Array<operations.DeleteTransactionsResponse>> {
    return unwrapAsync(transactionsDeleteMany(
      this,
      request,
      options,
    ));
  }
}
