/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { transactionsDeleteV1TransactionsBulk } from "../funcs/transactionsDeleteV1TransactionsBulk.js";
import { transactionsDeleteV1TransactionsId } from "../funcs/transactionsDeleteV1TransactionsId.js";
import { transactionsGetV1Transactions } from "../funcs/transactionsGetV1Transactions.js";
import { transactionsGetV1TransactionsId } from "../funcs/transactionsGetV1TransactionsId.js";
import { transactionsPatchV1TransactionsBulk } from "../funcs/transactionsPatchV1TransactionsBulk.js";
import { transactionsPatchV1TransactionsId } from "../funcs/transactionsPatchV1TransactionsId.js";
import { transactionsPostV1Transactions } from "../funcs/transactionsPostV1Transactions.js";
import { transactionsPostV1TransactionsBulk } from "../funcs/transactionsPostV1TransactionsBulk.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Transactions extends ClientSDK {
  /**
   * List all transactions
   *
   * @remarks
   * Retrieve a list of transactions for the authenticated team.
   */
  async getV1Transactions(
    request: operations.GetV1TransactionsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV1TransactionsResponse> {
    return unwrapAsync(transactionsGetV1Transactions(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a transaction
   *
   * @remarks
   * Create a transaction
   */
  async postV1Transactions(
    request?: operations.PostV1TransactionsRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.TransactionResponse> {
    return unwrapAsync(transactionsPostV1Transactions(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a transaction
   *
   * @remarks
   * Retrieve a transaction by its ID for the authenticated team.
   */
  async getV1TransactionsId(
    request: operations.GetV1TransactionsIdRequest,
    options?: RequestOptions,
  ): Promise<models.TransactionResponse> {
    return unwrapAsync(transactionsGetV1TransactionsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a transaction
   *
   * @remarks
   * Update a transaction for the authenticated team. If there's no change, returns it as it is.
   */
  async patchV1TransactionsId(
    request: operations.PatchV1TransactionsIdRequest,
    options?: RequestOptions,
  ): Promise<models.TransactionResponse> {
    return unwrapAsync(transactionsPatchV1TransactionsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a transaction
   *
   * @remarks
   * Delete a transaction for the authenticated team. Only manually created transactions can be deleted via this endpoint or the form. Transactions inserted by bank connections cannot be deleted, but can be excluded by updating the status.
   */
  async deleteV1TransactionsId(
    request: operations.DeleteV1TransactionsIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteV1TransactionsIdResponse> {
    return unwrapAsync(transactionsDeleteV1TransactionsId(
      this,
      request,
      options,
    ));
  }

  /**
   * Bulk update transactions
   *
   * @remarks
   * Bulk update transactions for the authenticated team. If there's no change, returns it as it is.
   */
  async patchV1TransactionsBulk(
    request?: operations.PatchV1TransactionsBulkRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.PatchV1TransactionsBulkResponse> {
    return unwrapAsync(transactionsPatchV1TransactionsBulk(
      this,
      request,
      options,
    ));
  }

  /**
   * Bulk create transactions
   *
   * @remarks
   * Bulk create transactions for the authenticated team.
   */
  async postV1TransactionsBulk(
    request?: Array<operations.RequestBody> | undefined,
    options?: RequestOptions,
  ): Promise<Array<models.TransactionResponse>> {
    return unwrapAsync(transactionsPostV1TransactionsBulk(
      this,
      request,
      options,
    ));
  }

  /**
   * Bulk delete transactions
   *
   * @remarks
   * Bulk delete transactions for the authenticated team. Only manually created transactions can be deleted via this endpoint or the form. Transactions inserted by bank connections cannot be deleted, but can be excluded by updating the status.
   */
  async deleteV1TransactionsBulk(
    request?: Array<string> | undefined,
    options?: RequestOptions,
  ): Promise<Array<operations.DeleteV1TransactionsBulkResponse>> {
    return unwrapAsync(transactionsDeleteV1TransactionsBulk(
      this,
      request,
      options,
    ));
  }
}
